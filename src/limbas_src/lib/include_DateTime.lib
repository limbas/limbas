<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */



#$weekday = array("$lang[873]","$lang[874]","$lang[875]","$lang[876]","$lang[877]","$lang[878]","$lang[879]");



/**
 * convert stamp to date
 *
 * @param number $stamp
 * @param number $format (0,1,2,3,string)
 * @return datetime string
 */
function stampToDate($stamp,$format=0,$country=null){
	
	# workaround for import
	if(is_numeric($stamp)){
		# >= php 5.3
		#$pv = explode('.',phpversion());
		#if($pv[0] >= 5 && $pv[1] >= 3){
			$pdt = new DateTime();
			$pdt->setTimestamp($stamp);
		#}else{
			#$f = setDateFormat(null,1);
			#$time = date($f,$stamp);
			#$pdt = new DateTime($time);
		#}
	}else{
		$pdt = $stamp;
	}
	
	if(!$pdt){return false;}
	
	#if(lmb_strlen($format) > 3){
	#	return $format;
	#}else{
	#	$format = setDateFormat($format,1);
	#}
	
	if(is_numeric($format)){
		$format = setDateFormat($format,1,$country);
	}
	
	return $pdt->format($format);
}

/**
 * Converts two-digit year (e.g. 17) to four digit year (e.g. 2017).
 * @param $twoDigitYear
 * @return false|string
 */
function getFourDigitYear($twoDigitYear) {
	# validate input
	if (!is_numeric($twoDigitYear)) {
		return false;
	}
	if (is_string($twoDigitYear)) {
		$twoDigitYear = intval($twoDigitYear);
	}
    if ($twoDigitYear < 0 || $twoDigitYear >= 100) {
        return false;
    }

    # get min/max two digit years
    $umgvarFuture = intval($GLOBALS['umgvar']['date_max_two_digit_year_addend']);
    try {
        $minYear = (new DateTime('now'))->sub(new DateInterval('P' . (100 - $umgvarFuture) . 'Y'))->format('Y');
        $maxYear = (new DateTime('now'))->add(new DateInterval('P' . $umgvarFuture . 'Y'))->format('Y');
	} catch (Exception $e) {
    	return false;
	}

    # get correct year between min/max year
    $maxYearTwoDigit = intval(lmb_substr($maxYear, 2, 2));
	if ($twoDigitYear <= $maxYearTwoDigit) {
		$century = lmb_substr($maxYear, 0, 2);
	} else {
		$century = lmb_substr($minYear, 0, 2);
	}

	return $century . lmb_str_pad(strval($twoDigitYear), 2, '0', STR_PAD_LEFT);
}

/**
 * convert date to stamp
 *
 * @param string $dateString
 * @param bool $getObj
 * @return false|number|DateTime
 */
function dateToStamp($dateString, $getObj = false) {
    $dateString = trim($dateString);
    if (!$dateString) {
        return false;
    }

    # only year?
    if (is_numeric($dateString)) {
        if (lmb_strlen($dateString) <= 2) {
            $dateString = getFourDigitYear($dateString);
        }
        $dateObj = DateTime::createFromFormat('Y-m-d', $dateString . '-01-01');
        if ($dateObj) {
            $dateObj->setTime(0, 0, 0);
        } else {
        	return 0;
		}
    } else {
        # translate german months
        static $months = array(
            'jan' => array('januar'),
            'feb' => array('februar'),
            'mar' => array('märz', 'mär'),
            'may' => array('mai'),
            'jun' => array('juni'),
            'jul' => array('juli'),
            'oct' => array('oktober', 'okt'),
            'dec' => array('dezember', 'dez')
        );
		foreach($months as $enName => $gerNames){
			foreach ($gerNames as $gerName){
				if (lmb_stripos($dateString, $gerName) !== false) {
					$dateString = str_ireplace($gerName, $enName, $dateString);
					break 2;
				}
			}
		}

        // replace separator
        $dateString = preg_replace("/[+\/,]{1}/",'-',$dateString);

		# replace two-digit year with four-digit year
        $dateString = preg_replace_callback('/^(\d\d?\.\d\d?\.)(\d\d)$/', function($match) {
			return $match[1] . getFourDigitYear($match[2]);
		}, $dateString);

        try {
            $dateObj = new DateTime($dateString);
        } catch (Exception $e) {
            try {
                $dateObj = DateTime::createFromFormat('Y-m-d H:i:s+', $dateString);
            } catch (Exception $e) {
                return false;
            }
        }
    }

    # return dateobject (for internal use) / timestamp
    if ($getObj) {
        return $dateObj;
    } else {
        return intval($dateObj->format("U"));
    }
}


/**
 * current date
 *
 * @param number $typ (0=date, 1=datetime)
 * @return date string
 */
function local_date($typ=1){
	return stampToDate(time(),$typ);
}

/**
 * current timestamp
 *
 * @param number $typ (1=datetime, 2=date)
 * @return false|int
 */
function local_stamp($typ=null): bool|int
{
	if($typ == 2){
		return time();
	}else{
		return mktime(0,0,0,date("m"),date("d"),date("Y"));
	}
}

/**
 * convert Date from given format
 *
 * @param string $db_date
 * @param string $format ('%A - %B %e %Y')
 * @return date string
 */
function get_format_date($db_date,$format){
	if(!$db_date){return false;}
	
	$pdt = new DateTime($db_date);
	return $pdt->format($format);
}

/**
 * convert time for database
 *
 * @param string $db_time
 * @return date string
 */
function convert_time($db_time){
	if($db_time){
		$db_time = lmb_substr($db_time,0,19);
		$db_time = preg_replace("/[^0-9]/",";",$db_time);
		$db_time = explode(";",$db_time);

		if(!$db_time[0] = sprintf("%02d", $db_time[0]) OR $db_time[0] > 23){$db_time[0] = "00";}
		if(!$db_time[1] = sprintf("%02d", $db_time[1]) OR $db_time[0] > 59){$db_time[1] = "00";}
		if(!$db_time[2] = sprintf("%02d", $db_time[2]) OR $db_time[0] > 59){$db_time[2] = "00";}

		$result_time = $db_time[0].":".$db_time[1].":".$db_time[2];
	}
	
	if(!preg_match("/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/",$result_time)){return false;}
	
	return $result_time;
}

/**
 * convert date for database
 * 
 * @param string $date_string
 * @return date string
 */
function convert_date($date_string,$t=0){
	if(!$date_string){return "";}
	$pdt = dateToStamp($date_string, true);
	if($pdt === false){return "";}
	return dbf_1($pdt,$t);
}


/**
 * convert stamp for database
 *
 * @param number $stamp
 * @return date string
 */
function convert_stamp($stamp,$t=0){
	# >= php 5.3
	#$pdt = new DateTime();
	#$pdt->setTimestamp($pdt);
	$time = date("d-m-Y H:i:s",$stamp);
	$pdt = new DateTime($time);
	return dbf_1($pdt,$t);
}



# ------ convert Date from Database --------
/**
 * convert date from database
 *
 * @param string $db_date
 * @param number $typ (1=date, 2=datetime, strftime format))
 * @return date string
 */
function get_date($db_date,$format=0,$country=null){
	if($format == 2){$format = 0;}
	if(!$db_date OR $db_date == '0000-00-00 00:00:00'){return false;}
	#$pdt = new DateTime($db_date);
	$pdt = new DateTime(lmb_substr($db_date,0,26));
	return stampToDate($pdt,$format,$country);
}


/**
 * convert stamp from database
 *
 * @param string $db_date
 * @return date string
 */
function get_stamp($db_date){
	if(!$db_date){return false;}
	#$pdt = new DateTime($db_date);
	$pdt = new DateTime(lmb_substr($db_date,0,26));
	$stamp = $pdt->format("U");
	if(is_numeric($stamp)){
		return $stamp;
	}
}



/**
 * Enter description here...
 *
 * @param unknown_type $filter  ex: #-1DAY#   or #123MONTH# or #-10YEAR#
 * @return date in format
 */
function dateDeltaToday($filter){
	$today = getdate();

	if($filter[0]=="<" || $filter[0]==">")
	{
		$filter = lmb_substr($filter,1);
	}

	if($filter[0]=="=")
	{
		$filter = lmb_substr($filter,1);
	}

	if(lmb_strpos($filter,"DAY#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"],$today["mday"] + lmb_substr($filter,1,lmb_strpos($filter,"DAY#")),$today["year"]));
	}elseif(lmb_strpos($filter,"MONTH#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"] + lmb_substr($filter,1,lmb_strpos($filter,"MONTH#")),$today["mday"],$today["year"]));
	}elseif(lmb_strpos($filter,"YEAR#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"],$today["mday"],$today["year"] + lmb_substr($filter,1,lmb_strpos($filter,"YEAR#"))));
	}
}

/**
 * get first monday from week of year
 *
 * @param unknown_type $kw
 * @param unknown_type $year
 * @return unknown
 */
function get_mondaykw($kw,$year) {
	$wday = date('w',mktime(0,0,0,1,1,$year));

	if ($wday <= 4) {
		$firstmonday = mktime(0,0,0,1,1-($wday-1),$year);
	}else if($wday!=1) {
		$firstmonday = mktime(0,0,0,1,1+(7-$wday+1),$year);
	}else {
		$firstmonday = $wday;
	}

	$mon_month = date('m',$firstmonday);
	$mon_year = date('Y',$firstmonday);
	$mon_days = date('d',$firstmonday);
	$days =(intval($kw)-1)*7;

	$mondaykw = mktime(0,0,0,$mon_month,$mon_days+$days,$mon_year);
	return $mondaykw;
}
?>
