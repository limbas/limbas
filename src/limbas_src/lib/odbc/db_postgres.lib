<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */


#require_once(COREPATH . 'lib/db/db_odbc.lib');


# constants
function postgres_dbf_0($value){

    # LMB_DBTYPE #
    $LMB_DBTYPE_CHAR = 'CHAR';
    $LMB_DBTYPE_VARCHAR = 'VARCHAR';
    $LMB_DBTYPE_INTEGER = 'INTEGER';
    $LMB_DBTYPE_SMALLINT = 'SMALLINT';
    $LMB_DBTYPE_BIGINT = 'BIGINT';
    $LMB_DBTYPE_FLOAT = 'FLOAT';
    $LMB_DBTYPE_NUMERIC = 'NUMERIC';
    $LMB_DBTYPE_FIXED = 'NUMERIC';
    $LMB_DBTYPE_BOOLEAN = 'BOOLEAN';
    $LMB_DBTYPE_DATE = 'DATE';
    $LMB_DBTYPE_TIME = 'TIME';
    $LMB_DBTYPE_TIMESTAMP = 'TIMESTAMP';
    $LMB_DBTYPE_LONG = 'TEXT';
    $LMB_DBTYPE_ASCII = '';
    $LMB_DBTYPE_BYTE = '';
    $LMB_DBTYPE_SERIAL = 'SERIAL';
    
    # LMB_DBDEF #
    $LMB_DBDEF_TIME = 'CURRENT_TIME';
    $LMB_DBDEF_DATE = 'CURRENT_DATE';
    $LMB_DBDEF_TIMESTAMP = 'CURRENT_TIMESTAMP';
    $LMB_DBDEF_FALSE = 'FALSE';
    $LMB_DBDEF_TRUE = 'TRUE';
    $LMB_DBDEF_NULL = 'NULL';
    $LMB_DBDEF_DTNULL = 'NULL';
    
    # LMB_DBRETYPE #
    $LMB_DBRETYPE_CHAR = 'CHAR';
    $LMB_DBRETYPE_VARCHAR = 'VARCHAR';
    $LMB_DBRETYPE_BPCHAR = 'CHAR';
    $LMB_DBRETYPE_INT8 = 'INTEGER';
    $LMB_DBRETYPE_INT4 = 'INTEGER';
    $LMB_DBRETYPE_INT2 = 'SMALLINT';
    $LMB_DBRETYPE_FLOAT4 = 'FLOAT';
    $LMB_DBRETYPE_FLOAT8 = 'FLOAT';
    $LMB_DBRETYPE_NUMERIC = 'FIXED';
    $LMB_DBRETYPE_BOOL = 'BOOLEAN';
    $LMB_DBRETYPE_DATE = 'DATE';
    $LMB_DBRETYPE_TIME = 'TIME';
    $LMB_DBRETYPE_TIMESTAMP = 'TIMESTAMP';
    $LMB_DBRETYPE_TIMESTAMPTZ = 'TIMESTAMP';
    $LMB_DBRETYPE_TEXT = 'LONG';
    
    # LMB_DBREDEF #
    ${'LMB_DBREDEF_NOW()'} = 'TIMESTAMP';
    $LMB_DBREDEF_CURRENT_TIMESTAMP = 'TIMESTAMP';
    $LMB_DBREDEF_FALSE = 'FALSE';
    $LMB_DBREDEF_TRUE = 'TRUE';
    
    # LMB_DBFUNC #
    $LMB_DBFUNC_ISNULL = 'IS NULL';
    $LMB_DBFUNC_PRIMARY_KEY = 'PRIMARY KEY';
    $LMB_DBFUNC_UNIQUE = 'UNIQUE';
    $LMB_DBFUNC_CONCAT = '||';
    #$LMB_DBFUNC_UMASCB = '\\';
    $LMB_DBFUNC_LIMIT = 'LIMIT';
    $LMB_DBFUNC_ROWNO = '';
    $LMB_DBFUNC_SPLIT_TRIGGER = 'EXECUTE PROCEDURE';
    $LMB_DBFUNC_ADD_COLUMN_FIRST = 'ADD COLUMN';
    $LMB_DBFUNC_ADD_COLUMN_NEXT = 'ADD COLUMN';
    $LMB_DBFUNC_DROP_COLUMN_FIRST = 'DROP COLUMN';
    $LMB_DBFUNC_DROP_COLUMN_NEXT = 'DROP COLUMN';
    $LMB_DBFUNC_DATE = 'DATE(';
    $LMB_DBFUNC_TIME = 'TIME(';
    $LMB_DBFUNC_YEAR = 'EXTRACT(YEAR FROM ';
    $LMB_DBFUNC_MONTH = 'EXTRACT(MONTH FROM ';
    $LMB_DBFUNC_DAY = 'EXTRACT(DAY FROM ';
    $LMB_DBFUNC_HOUR = 'EXTRACT(HOUR FROM ';
    $LMB_DBFUNC_MINUTE = 'EXTRACT(MINUTE FROM ';
    
    $LMB_DBFUNC_LONGHANDLE = 1;
    $LMB_DBFUNC_PROCEDUREHANDLE = 1;
    $LMB_DBFUNC_FKEYHANDLE = 1;
    $LMB_DBFUNC_FLOATHANDLE = 0;
    $LMB_DBFUNC_PREPAREHANDLE = 0;
    $LMB_DBFUNC_TIMEHANDLE = 1;
    $LMB_DBFUNC_NUMROWS = 1;
    $LMB_DBFUNC_VIEWGALIAS = 0;
    $LMB_DBFUNC_SEQUENCE = 1;
    $LMB_DBFUNC_VIEWDEPENDENCY = 1;

    $LMB_DBFUNC_UMASCB = '\\';

    return ${$value};
    
}

# DBCURSOR #
#define("LMB_DBCURSOR",0);

#require_once("lib/db/db_pdo.lib");

# odbc connect:
function postgres_dbq_0($host,$database,$dbuser,$dbpass,$dbdriver=null,$port=null){
    if($dbdriver == 'PDO') {
        $dsn = "pgsql:host=$host;dbname=$database";
        $db = lmbdb_pconnect ($dsn, $dbuser, $dbpass);
    }elseif($dbdriver){
		$dsn = "Driver=$dbdriver;Server=$host;Port=$port;Database=$database;ReadOnly=No";
		#SQL_CUR_USE_ODBC
		#SQL_CUR_DEFAULT
		#SQL_CUR_USE_DRIVER
		$db = lmbdb_pconnect ($dsn, $dbuser, $dbpass);
	}else{
		$db = lmbdb_pconnect($database,$dbuser,$dbpass);
	}
	if($db){return $db;}
	else{echo("<h1>Database connection failed</h1><p>($dsn)<BR>".lmbdb_errormsg()."</p>"); return false;}
}

/**
 * convert stamp for db
 *
 * @param number $p
 * @return string
 */
function postgres_dbf_1($p,$t=0){
    if($t){
        if(!is_object($p)){return date("Y-m-d",1);}
        return $p->format("Y-m-d");
    }else{
        if(!is_object($p)){return date("Y-m-d H:i:s",1);}
        return $p->format("Y-m-d H:i:s");
    }
}

/**
 * convert date from db to stamp
 *
 * @param string $p
 * @return number
 */
function postgres_dbf_2($p){
	if(!$p){return false;}
	$db_date = lmb_substr($p,0,19);
	$db_date = preg_replace("/[^0-9]/",";",$db_date);
	$db_date = explode(";",$db_date);
	if(is_numeric($db_date[0])){
		$result_stamp = mktime($db_date[3],$db_date[4],$db_date[5],$db_date[1],$db_date[2],$db_date[0]);
	}else{$result_stamp = 0;}
	return $result_stamp;
}

/**
 * parse blob
 *
 * @param string $p
 * @return string
 */
function postgres_dbf_6($p){
	return str_replace("\\",LMB_DBFUNC_UMASCB,str_replace("'","''",$p));
}

/**
 * parse string
 *
 * @param string $p
 * @return string
 */
function postgres_dbf_7($p){
	return str_replace("\\",LMB_DBFUNC_UMASCB,str_replace("'","''",$p));
}


/**
 * get sequence
 *
 * @param array $p[0]=name
 */
function postgres_dbf_8($db,$p){

	$rs = lmbdb_exec($db,"SELECT NEXTVAL('".dbf_4($p)."') AS NEXTSEQ") or errorhandle(lmbdb_errormsg($db),$prepare_string,"get next sequence",$FILE,$LINE);
	return lmbdb_result($rs,"NEXTSEQ");
}

/**
 * case sensitive
 *
 * @param string $p
 * @return string
 */
function postgres_dbf_4($p){
	return lmb_strtolower($p);
}

/**
 * timediff
 *
 * @param array $p
 * @return string
 */
function postgres_dbf_9($p){
	return "(".$p[1]."-".$p[0].")";
}

/**
 * datediff
 *
 * @param array $p
 * @return string
 */
function postgres_dbf_10($p){
	return "(".$p[1]."-".$p[0].")";
}

?>
