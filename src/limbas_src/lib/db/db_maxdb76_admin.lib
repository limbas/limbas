<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */



############# Domain Tables ########################

$DBA["DOMAINTABLE"] = array("system","constraints","foreignkeys","indexes","info_io_statistics","info_locks","info_log_state","info_parameters","info_state","info_sysdd_monitor");
$DBA["DOMAINSCHEMA"] = array("domain","domain","domain","domain","domain","domain","domain","domain","domain","domain");

# db version
function dbf_version(){
	global $db;

	return 0;
}

############# indexes ########################

/** existing indexes
 * 
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=indexname, [3]=no primary, [4]=fieldname
 * @return sql string
 */
function dbq_2($p){
	$sql = "SELECT TABLENAME,
				COLUMNNAME,
				INDEXNAME,
				INDEX_USED,
				CASE WHEN TYPE = 'UNIQUE' THEN 1 ELSE 0 END AS IS_UNIQUE
			FROM 
				DOMAIN.INDEXCOLUMNS 
			WHERE 
				OWNER = '".$p[0]."'";
	
	if($p[1]){
		$sql .= " AND LOWER(TABLENAME) = '".lmb_strtolower($p[1])."'";
	}
	if($p[2]){
		$sql .= " AND LOWER(INDEXNAME) = '".lmb_strtolower($p[2])."'";
	}
	if($p[4]){
		$sql .= "AND LOWER(COLUMNNAME) = '".lmb_strtolower($p[4])."'";
	}
	if($p[3]){
		$sql .= "AND NOT INDEXNAME = 'SYSPRIMARYKEYINDEX'";
	}

	
	$sql .= " ORDER BY TABLENAME,INDEXNAME";
	
	
	return $sql;
}

/**
 * create index
 *
 * @param array $p [0]=schema, [1]=indexname, [2]=tablename, [3]=fieldname, [4]=unique
 * @return sql string
 */
function dbq_4($p){
	if($p[4]){$unique = 'UNIQUE';}
	return "CREATE $unique INDEX ".$p[1]." ON ".$p[2]."(".$p[3].")";
}

/**
 * drop index
 *
 * @param array $p [0]=schema, [1]=indexname, [2]=tablename
 * @return sql string
 */
function dbq_5($p){
	return "DROP INDEX ".$p[1];
}

############# constaints ########################

/**
 * get primary keys
 *
 * @param array $p [0]=schema, [1]=table, [2]=column
 * @return sql string
 */
function dbq_23($p){
	global $db;
	
	$sql = "SELECT CONSTRAINTNAME, TABLENAME, COLUMNNAME FROM DOMAIN.CONSTRAINTCOLUMNS WHERE CONSTRAINTTYPE = 'KEY' AND SCHEMANAME = '".$p[0]."'";
	
	if($p[1]){$sql .= " AND TABLENAME = '".dbf_4($p[1]);}
	if($p[2]){$sql .= " AND COLUMNNAME = '".dbf_4($p[2]);}
	
	$sql .= "ORDER BY TABLENAME,COLUMNNAME";

	$rs = lmbdb_exec($db,$sql) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs)){
		$contraint["TABLE_NAME"][] = lmbdb_result($rs,"TABLENAME");
		$contraint["COLUMN_NAME"][] = lmbdb_result($rs,"COLUMNNAME");
		$contraint["PK_NAME"][] = lmbdb_result($rs,"CONSTRAINTNAME");
	}
	return  $contraint;
}

/**
 * get UNIQUE contraints
 *
 * @param array $p [0]=schema, [1]=table, [2]=dbname
 * @return sql string
 */
function dbq_26($p=null){
	global $db;
	
	$sql = "SELECT INDEXNAME, TABLENAME, COLUMNNAME FROM DOMAIN.INDEXCOLUMNS WHERE TYPE = 'UNIQUE'";
	
	if($p[1]){$sql .= " AND TABLENAME = '".dbf_4($p[1]);}
	if($p[2]){$sql .= " AND COLUMNNAME = '".dbf_4($p[2]);}
	
	$sql .= "ORDER BY TABLENAME,COLUMNNAME";

	$rs = lmbdb_exec($db,$sql) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs)){
		$contraint["TABLE_NAME"][] = lmbdb_result($rs,"TABLENAME");
		$contraint["COLUMN_NAME"][] = lmbdb_result($rs,"COLUMNNAME");
		$contraint["PK_NAME"][] = lmbdb_result($rs,"INDEXNAME");
	}
	return  $contraint;
}

/**
 * create primary key
 *
 * @param array $p [0]=table, [1]=field
 * @return sql string
 */
function dbq_17($p){
	return "ALTER TABLE ".$p[0]." ADD PRIMARY KEY (".dbf_4($p[1]).")";
}

/**
 * create constaint
 *
 * @param array $p [0]=table, [1]=field
 * @return sql string
 */
function dbq_24($p){
	return "ALTER TABLE ".$p[0]." ADD CONSTRAINT ".dbf_4($p[2])." UNIQUE (".dbf_4($p[1]).")";
}


/**
 * drop primary key
 *
 * @param array $p [0]=table
 * @return sql string
 */
function dbq_18($p){
	echo "ALTER TABLE ".$p[0]." DROP PRIMARY KEY";
	return "ALTER TABLE ".$p[0]." DROP PRIMARY KEY";
}

/**
 * drop contstraint
 *
 * @param array $p [0]=table
 * @return sql string
 */
function dbq_25($p){
	return "DROP INDEX ".dbf_4($p[2]);
}

############# foreign keys ########################


/**
 * get details for foreign keys for specific table or keyname
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=keyname
 * @return sql string
 */
function dbq_3($p){
	$sql = "Select TABLENAME,
				COLUMNNAME,
				REFTABLENAME,
				REFCOLUMNNAME,
				FKEYNAME,
				RULE
			FROM 
				DOMAIN.FOREIGNKEYCOLUMNS 
			WHERE 
				OWNER = '".$p[0]."'";
	
	if($p[1]){
		$sql .= " AND LOWER(TABLENAME) = '".lmb_strtolower($p[1])."'";
	}
	if($p[2]){
		$sql .= " AND LOWER(FKEYNAME) LIKE '".lmb_strtolower($p[2])."'";
	}
	
	return $sql;
}

/**
 * add foreign key
 *
 * @param array $p [0]=parent-tablename, [1]=parent-fieldname, [2]=child-tablename, [3]=child-fieldname, [4]=keyname
 * @return sql string
 */
function dbq_11($p){
    if(!$p[5]) {
        $p[5] = "RESTRICT";
    }
	
	return "ALTER TABLE ".$p[0]." 
		ADD FOREIGN KEY ".$p[4]." (".$p[1].") 
		REFERENCES ".$p[2]." 
		ON DELETE ".$p[5];
}


/**
 * drop foreign key
 *
 * @param array $p [0]=tablename, [1]=keyname
 * @return sql string
 */
function dbq_6($p){
	return " ALTER TABLE ".$p[0]." DROP FOREIGN KEY ".$p[1];
}


############# trigger ########################


/**
 * get information about database trigger
 *
 * @param array $p [0]=schema, [1]=triggername
 * @return array
 */
function dbf_3($p){
	global $db;	

	$sql = "SELECT TRIGGERNAME,DEFINITION,TABLENAME,INSERT,UPDATE,DELETE
		FROM
		 	DOMAIN.TRIGGERS";
	if($p[1]){
		$sql .= " WHERE LOWER(TRIGGERNAME) LIKE '".lmb_strtolower($p[1])."'";
	}
	
	$rs = lmbdb_exec($db,$sql);
	while(lmbdb_fetch_row($rs)){
		$res["triggername"][] = lmbdb_result($rs,"TRIGGERNAME");
		$res["definition"][] = lmbdb_result($rs,"DEFINITION");
		$res["tablename"][] = lmbdb_result($rs,"TABLENAME");
		if(lmbdb_result($rs,"INSERT") == "YES"){
			$res["event"][] = "INSERT";
		}elseif(lmbdb_result($rs,"UPDATE") == "YES"){
			$res["event"][] = "UPDATE";
		}elseif(lmbdb_result($rs,"DELETE") == "YES"){
			$res["event"][] = "DELETE";
		}else{
			$res["event"][] = "";
		}
	}
	
	return $res;
}


/**
 * drop database trigger
 *
 * @param array $p [0]=schema, [1]=triggername
 * @return sql string
 */
function dbq_10($p){
	return "DROP TRIGGER ".$p[0]." 
		OF ".$p[1];
}

/**
 * create trigger
 *
 * @param array $p [0]=schema, [1]=triggername, [2]=tablename, [3]=action, [4]=value, [5]=position (only support AFTER)
 * @return sql string
 */
function dbq_13($p){
	$sql = "CREATE TRIGGER ".$p[1]." FOR ".$p[0].".".$p[2]. " AFTER ".$p[3]." EXECUTE (".$p[4].")";
	return $sql;
}

/**
 * limbas specific trigger function for limbas relation schema
 *
 * @param array $p [0]=schema, [1]=triggername, [2]=tablename, [3]=action, [4]=value
 * @return sql string
 */
function dbq_14($p){
	global $DBA;
	if($p[4] == "+"){$act = ":NEW.ID,:NEW.VERKN_ID";}else{$act = ":OLD.ID,:OLD.VERKN_ID";}
	return "Call ".$DBA["DBSCHEMA"].".lmb_vkn(".$act.",'".$p[0].".".$p[2]."','".$p[3]."','".$p[4]."','".$p[0].".".$p[5]."','".$p[6]."','".$p[0].".".$p[1]."');";
}

/**
 * limbas specific trigger function for lastmodified
 *
 * @param array $p [0]=schema, [2]=tableid
 * @return sql string
 */
function dbq_27($p){
	return;
}


############# view ########################


/**
 * get view definition
 *
 * @param array $p [0]=schema [1]=viewname
 * @return sql string
 */
function dbq_8($p){
	return "SELECT VIEWNAME, DEFINITION 
			FROM 
				DOMAIN.VIEWDEFS
			WHERE 
				OWNER = '".$p[0]."'
				AND VIEWNAME = '".dbf_4($p[1])."'";
}

/**
 * existing views
 *
 * @param array $p [0]=schema, [1]=viewname
 * @return sql string
 */
function dbq_12($p){
	$qu = "SELECT VIEWNAME,TABLENAME 
		FROM 
			DOMAIN.VIEWTABLES 
		WHERE 
			OWNER = '".$p[0]."'";
	if($p[1]){
		$qu .= " AND LOWER(VIEWNAME) = '".lmb_strtolower($p[1])."'";
	}
	return $qu;
}

/**
 * create view
 *
 * @param array $p [0]=view name, [1]=definition
 * @return sql string
 */
function dbq_19($p){
	if(lmb_stripos($p[1],"CREATE VIEW") !== false){
		$qu = $p[1];
	}else{
		$qu = "CREATE OR REPLACE VIEW ".$p[0]." AS (".rtrim(trim($p[1]),";").")";
	}
	
	return $qu;
}

/**
 * drop view
 *
 * @param array $p [0]=view name
 * @return sql string
 */
function dbq_20($p){

	$qu = "DROP VIEW ".$p[0];

	return $qu;
}

/**
 * rename view
 *
 * @param array $p [0]=old tablename, [0]=new tablename
 * @return sql string
 */
function dbf_24($p){
	return "RENAME VIEW ".dbf_4($p[0])." TO ".dbf_4($p[1]);
}

/**
 * check view dependencies
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=fieldname
 * @return array
 */
function dbf_25($p){
    return false;   
}

############# tables ########################

/**
 * rename table
 *
 * @param array $p [0]=old tablename, [0]=new tablename
 * @return sql string
 */
function dbf_17($p){
	return "RENAME TABLE ".dbf_4($p[0])." TO ".dbf_4($p[1]);
}

/**
 * list of tables / views
 *
 * @param array $p [0]=schema, [1]=name, [2]=typ
 * @return sql string
 */
function dbf_20($p){
	global $db;

	$rs = lmbdb_tables($db,null,$p[0],dbf_4($p[1]),$p[2]);
	while(lmbdb_fetch_row($rs)){
		$odbc_table["table_name"][] = lmbdb_result($rs,"TABLE_NAME");
		$odbc_table["table_type"][] = lmbdb_result($rs,"TABLE_TYPE");
		$odbc_table["table_owner"][] = lmbdb_result($rs,"TABLE_OWNER");
	}
	
	if(!$odbc_table){
		return false;
	}else{
		return $odbc_table;
	}

}

/**
 * drop table
 *
 * @param array $p [0]=table name
 * @return sql string
 */
function dbq_28($p){

	$qu = "DROP TABLE ".dbf_4($p[0]);

	return $qu;
}

############# SEQUENCE ########################

/**
 * create sequence
 *
 * @param array $p [0]=schema, [1]=name, [2]=start
 */
function dbf_21($p){
	global $db;
	
	#first drop sequence if exists
	dbf_22($p);
	
	if($p[2]){$start = " START WITH ".$p[2];}
	if($rs = lmbdb_exec($db,"CREATE SEQUENCE ".dbf_4($p[1]).$start)){
		return true;
	}else{
		return false;
	}
}

/**
 * drop sequence
 *
 * @param array $p [0]=schema, [1]=name
 */
function dbf_22($p){
	global $db;

	if($rs = lmbdb_exec($db,"DROP SEQUENCE ".dbf_4($p[1]))){
		return true;
	}else{
		return false;
	}
}


############# columns ########################

/**
 * add column
 *
 * @param array $p [0]=schema,[1]=tablename, [2]=columnname, [3]=fieldtype, [4]=default
 * @return sql string
 */
function dbq_29($p){

    if(is_array($p[2])){
        foreach($p[2] as $key => $field){
            $qu = LMB_DBFUNC_ADD_COLUMN_FIRST.' '.dbf_4($field).' '.$p[3][$key];
            if($p[4][$key]){$qu .= ' DEFAULT '.$p[4][$key];}
            $adf[] = $qu;
        }
    }else{
        $qu = LMB_DBFUNC_ADD_COLUMN_FIRST.' '.dbf_4($p[2]).' '.$p[3];
        if($p[4]){$qu .= ' DEFAULT '.$p[4];}
        $adf[] = $qu;
    }

	return "ALTER TABLE ".dbf_4($p[1])." ".implode(',',$adf);
}


/**
 * existing columns
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=fieldname, 
 * @return sql string
 */
function dbf_5($p,$mode=null){
	global $db;
	
	if($p[3]){
		if($p[2]){
			$rs = lmbdb_columns($db,null,$p[0],dbf_4($p[1]),dbf_4($p[2]));
		}else{
			$rs = lmbdb_columns($db,null,$p[0],dbf_4($p[1]));
		}
		return $rs;
	}
	
	$sql = "SELECT * FROM DOMAIN.COLUMNS WHERE OWNER = '".$p[0]."' AND LOWER(TABLENAME) = '".lmb_strtolower($p[1])."'";
	if($p[2]){
		$sql .= " AND LOWER(COLUMNNAME) = '".lmb_strtolower($p[2])."'";
	}

	$rs = lmbdb_exec($db,$sql);
	while(lmbdb_fetch_row($rs)) {
		$col["tablename"][] = dbf_4(lmbdb_result($rs, "TABLENAME"));
		$col["columnname"][] = dbf_4(lmbdb_result($rs, "COLUMNNAME"));
		$col["columnname_lower"][] = dbf_4(trim(lmbdb_result($rs, "COLUMNNAME")));
		$col["datatype"][] = lmbdb_result($rs, "DATATYPE");
		$col["length"][] = lmbdb_result($rs, "LEN");
		$col["scale"][] = trim(lmbdb_result($rs, "DEC"));
		$col["default"][] = lmbdb_result($rs, "DEFAULT");
		$col["mode"][] = lmbdb_result($rs, "MODE"); # 1 / 0 if is primary key
	}
	
	if($col){
		return $col;
	}else{
		return false;
	}
}


/**
 * modify column default
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname, [3]=value
 * @return sql string
 */
function dbq_9($p){
	return "ALTER TABLE ".dbf_4($p[1])." MODIFY ".dbf_4($p[2])." DEFAULT ".$p[3];
}

/**
 * rename column 
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname, [3]=value
 * @return sql string
 */
function dbq_7($p){
	#return "ALTER TABLE ".dbf_4($p[1])." RENAME COLUMN ".dbf_4($p[2]).".TEMP_CONVERT TO ".dbf_4($p[3]);
	return "RENAME COLUMN ".dbf_4($p[1]).".".dbf_4($p[2])." TO ".dbf_4($p[3]);
}

/**
 * modify column type
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname, [3]=value
 * @return sql string
 */
function dbq_15($p){
	return "ALTER TABLE ".dbf_4($p[1])." MODIFY ".dbf_4($p[2])." ".dbf_4($p[3]);
}

/**
 * drop column
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname
 * @return sql string
 */
function dbq_22($p){
	return "ALTER TABLE ".dbf_4($p[0])." DROP ".dbf_4($p[1]);
}



############# procedure ########################


/**
 * limbas based lmb_vkn procedure 
 *
 * @param array $p [0]=schema
 * @return sql string
 */
function dbq_16($p=null){
	global $db;
	
	# drop procedure
	if($p[1]){
		dbq_21($p);
	}

	$sqlquery = "
create dbproc ".$p[0].".lmb_vkn(in id fixed(16),in vid fixed(16), in tabname char(60), in fieldname char(30), in act char(1) , in rtabname char(60), in rfieldname char(30), in vtabname char(30)) as
VAR statement1 char(200); statement2 char(200);

Begin
Try

SET statement1 = 'update ' || tabname || ' set ' || fieldname || ' = (select count(*) from ' || vtabname || ' where id = '|| id ||') where id = ' || id;
EXECUTE statement1;

SET statement2 = '';

IF rtabname <> '' THEN
SET statement2 = 'update ' || rtabname || ' set ' || rfieldname || ' = (select count(*) from ' || vtabname || ' where verkn_id = '|| vid ||') where id = ' || vid;
IF statement2 <> '' THEN
EXECUTE statement2;


Catch
      Stop(\$RC, \$ERRMSG);
End;
";
	
	if($rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_vkn",__FILE__,__LINE__)){
		return true;
	}else{
		return false;
	}
}

/**
 * drop limbas based lmb_vkn procedure 
 *
 * @param array $p [0]=schema
 * @return bool
 */
function dbq_21($p){
	global $db;
	
	$sqlquery = "drop dbproc ".$p[0].".lmb_vkn";
	$rs = lmbdb_exec($db,$sqlquery);
}

/**
 * pretty print table size
 * CURRENTLY ONLY SUPPORTED IN POSTGRESQL
 *
 * @param array $p [0]=schema, [1]=tablename
 * @return array table size, order size
 */
function dbq_30(array $p): array{
	return ["", ""];
}

################# BACKUP #################

# -------- create Medium --------
function create_medium($path,$typ){
	global $DBA;

    if($DBA["LMHOST"] == $DBA["DBHOST"] OR $DBA["DBHOST"] == "127.0.0.1" OR $DBA["DBHOST"] == "localhost"){
        $bu["path"] = $DBA["DBPATH"];
    }else{
        $bu["path"] = "ssh ".$DBA["DBHOST"]." ".$DBA["DBPATH"];
    }

	$sys = $bu['path']."/dbmcli -n ".$DBA["DBHOST"]." -d ".$DBA["DBNAME"]." -u ".$DBA["DBCUSER"].",".$DBA["DBCPASS"]." medium_put ".$path["medname"]." ".$path["path"]." ".$path["type"]." $typ ".$path["size"]." 0 ".$path["over"];
	$out = `$sys`;
	$out = explode("\n",$out);
	if($out[0] == "OK"){return $path['medname'];}else{
		if(function_exists("fill_history")){
			fill_history($out,$path,$typ);
		}
		return false;
	}
}

# -------- delete medium --------
function delete_medium($medium,$typ){
	global $DBA;

    if($DBA["LMHOST"] == $DBA["DBHOST"] OR $DBA["DBHOST"] == "127.0.0.1" OR $DBA["DBHOST"] == "localhost"){
        $bu["path"] = $DBA["DBPATH"];
    }else{
        $bu["path"] = "ssh ".$DBA["DBHOST"]." ".$DBA["DBPATH"];
    }

	$sys = $bu["path"]."/dbmcli -n ".$DBA["DBHOST"]." -d ".$DBA["DBNAME"]." -u ".$DBA["DBCUSER"].",".$DBA["DBCPASS"]." medium_delete ".$medium;
	$out = `$sys`;
	$out = explode("\n",$out);
	if($out[0] == "OK"){return true;}else{
		if(function_exists("fill_history")){
			fill_history($out,$path,$typ);
		}
		return false;
	}
}

# -------- start backup --------
function backup_data($medium,$path,$typ){
	global $DBA;

    if($DBA["LMHOST"] == $DBA["DBHOST"] OR $DBA["DBHOST"] == "127.0.0.1" OR $DBA["DBHOST"] == "localhost"){
        $bu["path"] = $DBA["DBPATH"];
    }else{
        $bu["path"] = "ssh ".$DBA["DBHOST"]." ".$DBA["DBPATH"];
        $bu["sshpath"] = "ssh ".$DBA["DBHOST"];
    }

	$sys = $bu["path"]."/dbmcli -n ".$DBA["DBHOST"]." -d ".$DBA["DBNAME"]." -uUTL -u ".$DBA["DBCUSER"].",".$DBA["DBCPASS"]." backup_start $medium RECOVERY $typ";
	exec($sys,$out,$ret);
	
	if($out[0] == "OK"){

		foreach ($out as $key => $value){
			if($value){
				$det = explode(" ",$value);
				$outres[] = $det[lmb_count($det)-1];
			}
		}
			
		if($typ == "DATA"){
			$outres[7] = ($outres[7]*2);
		}elseif($typ == "PAGES"){
			$outres[7] = ($outres[7]/4);
		}

		# --- zippen ---
		$sys1 = trim($bu["sshpath"]." gzip ".$path["path"]);
		exec($sys1,$out1,$ret1);
		if(file_exists($bu["sshpath"].".gz")){
			$outres[] = "gzip ok";
		}else{
			$outres[] = "gzip false";
		}
		return $outres;
	}else{
		if(function_exists("fill_history")){
			fill_history($out,$path,$typ);
		}
		return false;
	}
}

?>
