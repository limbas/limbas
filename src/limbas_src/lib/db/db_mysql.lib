<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




# LMB_DBTYPE #
define("LMB_DBTYPE_CHAR","CHAR");
define("LMB_DBTYPE_VARCHAR","VARCHAR");
define("LMB_DBTYPE_INTEGER","INTEGER");
define("LMB_DBTYPE_SMALLINT","SMALLINT");
define("LMB_DBTYPE_BIGINT","BIGINT");
define("LMB_DBTYPE_FLOAT","FLOAT");
define("LMB_DBTYPE_FIXED","DECIMAL");
define("LMB_DBTYPE_NUMERIC","DECIMAL");
define("LMB_DBTYPE_DECIMAL","DECIMAL");
define("LMB_DBTYPE_BOOLEAN","BOOLEAN");
define("LMB_DBTYPE_DATE","DATE");
define("LMB_DBTYPE_TIME","TIME");
define("LMB_DBTYPE_TIMESTAMP","TIMESTAMP NULL");
define("LMB_DBTYPE_LONG","TEXT");
define("LMB_DBTYPE_ASCII","");
define("LMB_DBTYPE_BYTE","");
define("LMB_DBTYPE_SERIAL","");

 
#http://dev.mysql.com/doc/refman/5.1/de/ix01.html
define("LMB_DBDEF_TIME","CURTIME");
define("LMB_DBDEF_DATE","CURDATE");
define("LMB_DBDEF_TIMESTAMP","CURRENT_TIMESTAMP");
define("LMB_DBDEF_FALSE","0");
define("LMB_DBDEF_TRUE","1");
define("LMB_DBDEF_NULL","NULL");
#define("LMB_DBDEF_DTNULL","'NULL'");
define("LMB_DBDEF_DTNULL","NULL");

# LMB_DBRETYPE #
define("LMB_DBRETYPE_CHAR","CHAR");
define("LMB_DBRETYPE_VARCHAR","VARCHAR");
define("LMB_DBRETYPE_INT","INTEGER");
define("LMB_DBRETYPE_INTEGER","INTEGER");
define("LMB_DBRETYPE_BIGINT","INTEGER");
define("LMB_DBRETYPE_SMALLINT","SMALLINT");
define("LMB_DBRETYPE_FLOAT","FLOAT");
define("LMB_DBRETYPE_DECIMAL","FIXED");
define("LMB_DBRETYPE_BOOL","BOOLEAN");
define("LMB_DBRETYPE_DATE","DATE");
define("LMB_DBRETYPE_TIME","TIME");
define("LMB_DBRETYPE_DATETIME","DATETIME");
define("LMB_DBRETYPE_TIMESTAMP","TIMESTAMP");
define("LMB_DBRETYPE_CURRENT_TIMESTAMP","TIMESTAMP");
define("LMB_DBRETYPE_TEXT","LONG");
define("LMB_DBRETYPE_TINYINT","BOOLEAN");


# LMB_DBREDEF #
#'YYYY-MM-DD HH:MM:SS'
define("LMB_DBREDEF_NOW()","CURRENT_TIMESTAMP");
define("LMB_DBREDEF_CURRENT_TIMESTAMP","CURRENT_TIMESTAMP");
define("LMB_DBREDEF_CURRENT_TIMESTAMP()","CURRENT_TIMESTAMP");
define("LMB_DBREDEF_0","FALSE");
define("LMB_DBREDEF_1","TRUE");


# LMB_DBFUNC #
define("LMB_DBFUNC_ISNULL","IS NULL");
define("LMB_DBFUNC_PRIMARY_KEY","PRIMARY KEY");
define("LMB_DBFUNC_UNIQUE","UNIQUE");
define("LMB_DBFUNC_CONCAT","||");
define("LMB_DBFUNC_OFFSET_START",0);
define("LMB_DBFUNC_LIMIT","LIMIT");
define("LMB_DBFUNC_ROWNO","");
define("LMB_DBFUNC_SPLIT_TRIGGER","EXECUTE");
define("LMB_DBFUNC_ADD_COLUMN_FIRST","ADD");
define("LMB_DBFUNC_ADD_COLUMN_NEXT","ADD");
define("LMB_DBFUNC_DROP_COLUMN_FIRST","DROP");
define("LMB_DBFUNC_DROP_COLUMN_NEXT","DROP");
define("LMB_DBFUNC_DATE","DATE(");
define("LMB_DBFUNC_TIME","TIME(");
define("LMB_DBFUNC_YEAR","YEAR(");
define("LMB_DBFUNC_MONTH","MONTH(");
define("LMB_DBFUNC_DAY","DAYOFMONTH(");#DAYOFMONTH('2001-11-00')
define("LMB_DBFUNC_HOUR","HOUR(");
define("LMB_DBFUNC_MINUTE","MINUTE(");
define("LMB_DBFUNC_LONGHANDLE",0);#Long gibt es nicht in mysql
define("LMB_DBFUNC_PROCEDUREHANDLE",1);
define("LMB_DBFUNC_FKEYHANDLE",1);
define("LMB_DBFUNC_FLOATHANDLE",1);
define("LMB_DBFUNC_PREPAREHANDLE",1);
define("LMB_DBFUNC_TIMEHANDLE",1);
define("LMB_DBFUNC_NUMROWS",1);
define("LMB_DBFUNC_VIEWGALIAS",0);
define("LMB_DBFUNC_SEQUENCE",1);
define("LMB_DBFUNC_VIEWDEPENDENCY",0);
define("LMB_DBFUNC_UMASCB","\\\\");
define("LMB_DBFUNC_MAXFIELDNAMESIZE",50);
define("LMB_DBFUNC_MAXTABLENAMESIZE",30);
define("LMB_DBFUNC_TRANSACTION",1);
define("LMB_DBFUNC_TRANSACTION_WITH_SCHEMA",0);

# DBCURSOR #
define("LMB_DBCURSOR",0);
define("LMB_DBFUNC_WITH_RECURSIVE", 'WITH RECURSIVE');

# odbc connect:
function dbq_0($host,$database,$dbuser,$dbpass,$dbdriver=null,$port=null){
    global $DBA;
    $cur = null;

    #SQL_CUR_USE_ODBC
    #SQL_CUR_DEFAULT
    #SQL_CUR_USE_DRIVER

    if($dbdriver == 'PDO') {
        if($port){$port = ":$port";}
        $dsn = "mysql:host=$host$port;dbname=$database";
    }elseif($dbdriver) {
        $dsn = "Driver=$dbdriver;Server=$host;Database=$database;ReadOnly=No";
        $cur = SQL_CUR_USE_ODBC;
    }else{
	    $dsn = $database;
	    $cur = SQL_CUR_USE_ODBC;
	}

	if($DBA['VERSION'] AND $DBA['VERSION'] < 10) { # use for newer mariadb >= V10
        $cur = null;
    }

    $db = lmbdb_pconnect($dsn, $dbuser, $dbpass, $cur);

	if($db){return $db;}
	else{echo("<div class=\"alert alert-danger\"><h1>Database connection failed</h1><p>($dsn)<BR>".lmbdb_errormsg()."</p></div>"); return false;}
}

/**
 * convert stamp for db
 *
 * @param number $p
 * @return string
 */
function dbf_1($p,$t=0){
	
    if(!$p){$p=1;}
	if($t){
		if($p instanceof DateTime) {
			return $p->format("Y-m-d");
		} else {
			return date("Y-m-d",1);
		}
	}else{
		if($p instanceof DateTime) {
			return $p->format("Y-m-d H:i:s");
		} else {
			return date("Y-m-d H:i:s",1);
		}
	}
}

/**
 * convert date from db to stamp
 *
 * @param string $p
 * @return number
 */
function dbf_2($p){
	if(!$p){return false;}
	$db_date = lmb_substr($p,0,19);
	$db_date = preg_replace("/[^0-9]/",";",$db_date);
	$db_date = explode(";",$db_date);
	if(is_numeric($db_date[0])){
		$result_stamp = mktime($db_date[3],$db_date[4],$db_date[5],$db_date[1],$db_date[2],$db_date[0]);
	}else{$result_stamp = 0;}
	return $result_stamp;
}

/**
 * parse blob
 *
 * @param string $p
 * @return string
 */
function dbf_6($p){
    return dbf_7($p);
}

/**
 * parse string
 *
 * @param string $p
 * @return string
 */
function dbf_7($p){
	return str_replace("\\", LMB_DBFUNC_UMASCB, str_replace("'", "''", $p));
}


/**
 * get sequence
 *
 * @param array $p[0]=name
 */
function dbf_8($p){
	global $db;

	$rs = lmbdb_exec($db,"SELECT seq_nextval('".dbf_4($p)."') AS NEXTSEQ") or errorhandle(lmbdb_errormsg($db),$prepare_string,"get next sequence",$FILE,$LINE);
	return lmbdb_result($rs,"NEXTSEQ");
}

/**
 * case sensitive
 *
 * @param string $p
 * @return string
 */
function dbf_4($p){
	return lmb_strtoupper($p);
}
function dbf_4a($p){
	return strtoupper($p);
}

/**
 * timediff
 *
 * @param array $p
 * @return string
 */
function dbf_9($p){
	return "(".$p[1]."-".$p[0].")";
}

/**
 * datediff
 *
 * @param array $p
 * @return string
 */
function dbf_10($p){
	return "(".$p[1]."-".$p[0].")";
}
