<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */



############# Domain Tables ########################

$DBA["DOMAINTABLE"] = array("tables","views","columns","key_column_usage","constraint_table_usage","triggers","pg_constraint","pg_index","pg_indexes","pg_stats","pg_settings");
$DBA["DOMAINSCHEMA"] = array("information_schema","information_schema","information_schema","information_schema","information_schema","information_schema","pg_catalog","pg_catalog","pg_catalog","pg_catalog","pg_catalog");

# db version
function dbf_version($DBA=null){
	global $db;

	$sql = "SELECT SETTING FROM PG_SETTINGS WHERE NAME = 'server_version_num'";
	$rs = lmbdb_exec($db,$sql) or errorhandle(lmbdb_errormsg($db),$sql,"get DB Version",$FILE,$LINE);
	$version = lmbdb_result($rs,"SETTING");
	$version_[] = $version;
	$version_[] = $version;

	// encoding
    if($DBA) {
        $sql = "SHOW SERVER_ENCODING";
        $rs = lmbdb_exec($db, $sql) or errorhandle(lmbdb_errormsg($db), $sql, "get DB Version", $FILE, $LINE);
        $version_[] = lmbdb_result($rs, "server_encoding");
    }

	return $version_;
}

############# indexes ########################

/** existing indexes
 * 
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=indexname, [3]=no primary, [4]=fieldname
 * @return sql string
 */
function dbq_2($p){
	
	$sql = "SELECT
	indexname,
    t.tablename,
    foo.attname AS columnname,
    foo.indisunique AS is_unique,
    idx_scan AS index_used
FROM pg_tables t
LEFT OUTER JOIN pg_class c ON t.tablename=c.relname
LEFT OUTER JOIN
    ( SELECT c.relname AS ctablename, ipg.relname AS indexname, idx_scan, indexrelname,a.attname, x.indisprimary,x.indisunique FROM pg_index x
           JOIN pg_class c ON c.oid = x.indrelid
           JOIN pg_class ipg ON ipg.oid = x.indexrelid
           JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid 
           JOIN pg_attribute AS a ON a.attrelid = x.indexrelid
)
    AS foo
    ON t.tablename = foo.ctablename
    
WHERE t.schemaname='".$p[0]."'
";

	if($p[1]){
		$sql .= " AND LOWER(t.tablename) LIKE '".lmb_strtolower($p[1])."'";
	}
	if($p[2]){
		$sql .= " AND LOWER(indexname) LIKE '".lmb_strtolower($p[2])."'";
	}
	if($p[3]){
	 	$sql .= " AND foo.indisprimary = FALSE";
	}
	if($p[4]){
	 	$sql .= " AND LOWER(foo.attname) LIKE '".lmb_strtolower($p[4])."'";
	}

	$sql .= " ORDER BY 2, 3;";
	
	return $sql;
}


/*
function dbq_2($p){
	
	$sql = "SELECT c.oid,
    n.nspname,
    c.relname AS TABLENAME,
    c.relhasindex, c.relkind, c.relchecks, c.relhasrules, c.relhasoids, c.reltablespace,
    a.attname AS COLUMNNAME,
      pg_catalog.format_type(a.atttypid, a.atttypmod) AS TYPE,
    (SELECT substring(pg_catalog.pg_get_expr(d.adbin, d.adrelid) for 128)
        FROM pg_catalog.pg_attrdef as d
        WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef) as attrdef,
      a.attnotnull, a.attnum,
      i.indexrelid,
      i.indrelid,
      i.indisunique, i.indisprimary, i.indisclustered, i.indisvalid AS INDEX_VALID, i.indisready AS INDEX_USED,
      c1.relname AS INDEXNAME
FROM pg_catalog.pg_class as c
    LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace
    LEFT JOIN pg_catalog.pg_index AS i ON i.indrelid = c.oid
    LEFT JOIN pg_attribute AS a ON a.attrelid = i.indexrelid
    LEFT JOIN pg_catalog.pg_class as c1 ON i.indexrelid = c1.oid
WHERE c.relhasindex = true
    AND c.relname not like '%pg_%'
    AND a.attnum > 0 AND NOT a.attisdropped
    AND pg_catalog.pg_table_is_visible(c.oid)";

	if($p[1]){
		$sql .= " AND LOWER(c.relname) LIKE '".lmb_strtolower($p[1])."'";
	}
	if($p[2]){
		$sql .= " AND LOWER(information_schema.referential_constraints.constraint_name) LIKE '".lmb_strtolower($p[2])."'";
	}
	if($p[3]){
	 	$sql .= " AND i.indisprimary = FALSE";
	}
	if($p[4]){
	 	$sql .= " AND LOWER(a.attname) LIKE '".lmb_strtolower($p[4])."'";
	}

	$sql .= " ORDER BY 2, 3;";
	
	return $sql;
}
*/


/**
 * create index
 *
 * @param array $p [0]=schema, [1]=indexname, [2]=tablename, [3]=fieldname, [4]=unique
 * @return sql string
 */
function dbq_4($p){
	if($p[4]){$unique = 'UNIQUE';}
	return "CREATE $unique INDEX ".dbf_4($p[1])." ON ".dbf_4($p[2])."(".dbf_4($p[3]).")";
}

/**
 * drop index
 *
 * @param array $p [0]=schema, [1]=indexname, [2]=tablename
 * @return sql string
 */
function dbq_5($p){
	return "DROP INDEX ".$p[1];
}



############# constaints ########################

/**
 * get primary keys
 *
 * @param array $p [0]=schema, [1]=table, [2]=column
 * @return sql string
 */
function dbq_23($p=null){
	global $db;
	
	$sql = "SELECT
	    TC.CONSTRAINT_NAME, TC.TABLE_NAME, KCU.COLUMN_NAME, 
	    CCU.TABLE_NAME AS FOREIGN_TABLE_NAME,
	    CCU.COLUMN_NAME AS FOREIGN_COLUMN_NAME,
	    CONSTRAINT_TYPE 
	FROM 
	    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC 
	    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ON TC.CONSTRAINT_NAME = KCU.CONSTRAINT_NAME
	    JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS CCU ON CCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
	WHERE CONSTRAINT_TYPE = 'PRIMARY KEY' ORDER BY TC.TABLE_NAME,KCU.COLUMN_NAME";
	
	if($p[1]){$sql .= " AND TC.TABLE_NAME = '".dbf_4($p[1])."'";}
	if($p[2]){$sql .= " AND KCU.COLUMN_NAME = '".dbf_4($p[2])."'";}

	$rs = lmbdb_exec($db,$sql) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs)){
		$contraint["TABLE_NAME"][] = lmbdb_result($rs,"TABLE_NAME");
		$contraint["COLUMN_NAME"][] = lmbdb_result($rs,"COLUMN_NAME");
		$contraint["PK_NAME"][] = lmbdb_result($rs,"CONSTRAINT_NAME");
	}
	return  $contraint;
}


/**
 * get UNIQUE contraints
 *
 * @param array $p [0]=schema, [1]=table, [2]=column
 * @return sql string
 */
function dbq_26($p=null){
	global $db;
	
	$sql = "SELECT
	    TC.CONSTRAINT_NAME, TC.TABLE_NAME, KCU.COLUMN_NAME, 
	    CCU.TABLE_NAME AS FOREIGN_TABLE_NAME,
	    CCU.COLUMN_NAME AS FOREIGN_COLUMN_NAME,
	    CONSTRAINT_TYPE 
	FROM 
	    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC 
	    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ON TC.CONSTRAINT_NAME = KCU.CONSTRAINT_NAME
	    JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS CCU ON CCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
	WHERE CONSTRAINT_TYPE = 'UNIQUE'";
	
	if($p[1]){$sql .= " AND TC.TABLE_NAME = '".dbf_4($p[1])."'";}
	if($p[2]){$sql .= " AND KCU.COLUMN_NAME = '".dbf_4($p[2])."'";}

	$rs = lmbdb_exec($db,$sql) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs)){
		$contraint["TABLE_NAME"][] = lmbdb_result($rs,"TABLE_NAME");
		$contraint["COLUMN_NAME"][] = lmbdb_result($rs,"COLUMN_NAME");
		$contraint["PK_NAME"][] = lmbdb_result($rs,"CONSTRAINT_NAME");
	}
	return  $contraint;
}

/**
 * create primary key
 *
 * @param array $p [0]=table, [1]=field
 * @return sql string
 */
function dbq_17($p){
	return "ALTER TABLE ".$p[0]." ADD PRIMARY KEY (".$p[1].")";
}

/**
 * create constraint
 *
 * @param array $p [0]=table, [1]=field
 * @return sql string
 */
function dbq_24($p){
	return "ALTER TABLE ".dbf_4($p[0])." ADD CONSTRAINT ".dbf_4($p[2])." UNIQUE (".$p[1].")";
}

/**
 * drop primary key
 *
 * @param array $p [0]=table
 * @return sql string
 */
function dbq_18($p){
	return "ALTER TABLE ".dbf_4($p[0])." DROP CONSTRAINT ".dbf_4($p[0])."_pkey ";
}

/**
 * drop contraint
 *
 * @param array $p [0]=table
 * @return sql string
 */
function dbq_25($p){
	return "ALTER TABLE ".dbf_4($p[0])." DROP CONSTRAINT ".dbf_4($p[2]);
}

############# foreign keys ########################

/**
 * get details for foreign keys for specific table or keyname
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=keyname
 * @return sql string
 */
function dbq_3($p){
	global $db;
	
	$sql = "SELECT
	    TC.CONSTRAINT_NAME AS FKEYNAME, TC.TABLE_NAME AS TABLENAME, KCU.COLUMN_NAME AS COLUMNNAME, 
	    CCU.TABLE_NAME AS REFTABLENAME,
	    CCU.COLUMN_NAME AS REFCOLUMNNAME,
	    CONSTRAINT_TYPE 
	FROM 
	    INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC 
	    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ON TC.CONSTRAINT_NAME = KCU.CONSTRAINT_NAME
	    JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS CCU ON CCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
	WHERE CONSTRAINT_TYPE = 'FOREIGN KEY'";
	
	if($p[1]){$sql .= " AND TC.TABLE_NAME = '".dbf_4($p[1])."'";}
	if($p[2]){$sql .= " AND KCU.COLUMN_NAME = '".dbf_4($p[2])."'";}

	$sql .= " ORDER BY TC.TABLE_NAME, KCU.COLUMN_NAME";

	return  $sql;
}


/**
 * add foreign key
 *
 * @param array $p [0]=parent-tablename, [1]=parent-fieldname, [2]=child-tablename, [3]=child-fieldname, [4]=keyname
 * @return sql string
 */
function dbq_11($p){
    if(!$p[5]) {
        $p[5] = "RESTRICT";
    }

	return "ALTER TABLE ".$p[0]." 
		ADD CONSTRAINT ".$p[4]." FOREIGN KEY (".$p[1].") 
		REFERENCES ".$p[2]."(".$p[3].") 
		ON DELETE ".$p[5];
}


/**
 * drop foreign key
 *
 * @param array $p [0]=tablename, [1]=keyname
 * @return sql string
 */
function dbq_6($p){
	return " ALTER TABLE ".$p[0]." DROP CONSTRAINT ".$p[1]." CASCADE";
}


############# trigger ########################


/**
 * get information about database trigger
 *
 * @param array $p [0]=schema, [1]=triggername
 * @return array
 */
function dbf_3($p){
	global $db;	

	$sql = "SELECT TRIGGER_NAME AS TRIGGERNAME, ACTION_STATEMENT AS DEFINITION, EVENT_MANIPULATION AS EVENT, EVENT_OBJECT_TABLE AS TABLENAME
		FROM
		 	INFORMATION_SCHEMA.TRIGGERS
		WHERE TRIGGER_SCHEMA != 'pg_catalog'";
	if($p[1]){
		$sql .= " AND LOWER(TRIGGER_NAME) LIKE '".lmb_strtolower($p[1])."'";
	}
	
	$rs = lmbdb_exec($db,$sql);
	while(lmbdb_fetch_row($rs)){
		$res["triggername"][] = lmbdb_result($rs,"TRIGGERNAME");
		$res["definition"][] = lmbdb_result($rs,"DEFINITION");
		$res["event"][] = lmbdb_result($rs,"EVENT");
		$res["tablename"][] = lmbdb_result($rs,"TABLENAME");
	}
	
	return $res;
}


/**
 * drop database trigger
 *
 * @param array $p [0]=schema, [1]=triggername
 * @return sql string
 */
function dbq_10($p){
	return "DROP TRIGGER ".$p[0]." 
		ON ".$p[1];
}

/**
 * create trigger
 *
 * @param array $p [0]=schema, [1]=triggername, [2]=tablename, [3]=action, [4]=value, [5]=position
 * @return sql string
 */
function dbq_13($p){
    if(lmb_strpos($p[4], strtoupper('EXECUTE PROCEDURE'))) {
        $sql = "CREATE TRIGGER " . $p[1] . " " . $p[5] . " " . $p[3] . " ON " . dbf_4($p[2]) . " FOR EACH ROW " . $p[4];
    }else{
        $sql = "CREATE TRIGGER " . $p[1] . " " . $p[5] . " " . $p[3] . " ON " . dbf_4($p[2]) . " FOR EACH ROW EXECUTE PROCEDURE " . $p[4];
    }
	return $sql;
}

/**
 * limbas specific trigger function for limbas relation schema
 *
 * @param array $p [0]=schema, [1]=triggername, [2]=tablename, [3]=action, [4]=value
 * @return sql string
 */
function dbq_14($p){
    $p[7] = parse_db_int($p[7],1);
    if($p[6]) {
        return "lmb_vkn('" . $p[0] . '.' . $p[2] . "','" . $p[3] . "','" . $p[4] . "','" . $p[5] . "','" . $p[6] . "','" . $p[7] . "');";
    }else{
        return "lmb_vkn('" . $p[0] . '.' . $p[2] . "','" . $p[3] . "','" . $p[4] . "','" . $p[5] . "','','" . $p[7] . "');";
    }
}


/**
 * limbas specific trigger function for lastmodified
 *
 * @param array $p [0]=schema, [2]=tableid
 * @return sql string
 */
function dbq_27($p){
	return "lmb_lastmodified('".$p[1]."');";
}

############# view ########################


/**
 * get view definition
 *
 * @param array $p [1]=viewname
 * @return sql string
 */
function dbq_8($p){
	return "SELECT pg_get_viewdef('".$p[1]."', true) AS DEFINITION";
}

/**
 * existing views
 *
 * @param array $p [0]=schema, [1]=viewname
 * @return sql string
 */
function dbq_12($p){
	$qu = "SELECT view_name AS VIEWNAME, table_name AS TABLENAME 
		FROM 
			information_schema.view_table_usage 
		WHERE 
			view_schema = '".$p[0]."'";
	if($p[1]){
		$qu .= " AND lower(view_name) = '".lmb_strtolower($p[1])."'";
	}
	return $qu;
}

/**
 * create view
 *
 * @param array $p [0]=view name, [1]=definition
 * @return sql string
 */
function dbq_19($p){
	if(lmb_stripos($p[1],"CREATE VIEW") !== false){
		$qu = $p[1];
	}else{
		$qu = "CREATE OR REPLACE VIEW ".$p[0]." AS (".rtrim(trim($p[1]),";").")";
	}
	
	return $qu;
}

/**
 * drop view
 *
 * @param array $p [0]=view name
 * @return sql string
 */
function dbq_20($p){

	$qu = "DROP VIEW ".dbf_4($p[0]);

	return $qu;
}


/**
 * rename view
 *
 * @param array $p [0]=old tablename, [0]=new tablename
 * @return sql string
 */
function dbf_24($p){
	return "ALTER VIEW ".dbf_4($p[0])." RENAME TO ".dbf_4($p[1]);
}


/**
 * check view dependencies
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=fieldname
 * @return array
 */
function dbf_25($p){
    global $db;
    
    if($p[1]){$w = " AND source_table.relname = '".dbf_4($p[1])."'";}
    if($p[2]){$w .= " AND pg_attribute.attname = '".dbf_4($p[2])."'";}
    
    /*
     dependent_ns.nspname as dependent_schema,
     source_ns.nspname as source_schema,
     source_table.relname as source_table,
     pg_attribute.attname as column_name,
    */
    
    $qu = "SELECT DISTINCT 
    dependent_view.relname as dependent_view 
    FROM pg_depend 
    JOIN pg_rewrite ON pg_depend.objid = pg_rewrite.oid 
    JOIN pg_class as dependent_view ON pg_rewrite.ev_class = dependent_view.oid 
    JOIN pg_class as source_table ON pg_depend.refobjid = source_table.oid 
    JOIN pg_attribute ON pg_depend.refobjid = pg_attribute.attrelid 
    AND pg_depend.refobjsubid = pg_attribute.attnum 
    JOIN pg_namespace dependent_ns ON dependent_ns.oid = dependent_view.relnamespace
    JOIN pg_namespace source_ns ON source_ns.oid = source_table.relnamespace
    WHERE 
    source_ns.nspname = '".$p[0]."'
    AND pg_attribute.attnum > 0 
    $w";
    
    #error_log($qu);
    
    $dep = false;
	if($rs = lmbdb_exec($db,$qu)){
        while(lmbdb_fetch_row($rs)){
            $dep[] = lmbdb_result($rs,"dependent_view");
            #$dep["table"][] = lmbdb_result($rs,"source_table");
            #$dep["field"][] = lmbdb_result($rs,"column_name");
        }
	}
	
	return $dep;
}


############# tables ########################

/**
 * rename table
 *
 * @param array $p [0]=old tablename, [1]=new tablename
 * @return sql string
 */
function dbf_17($p){
	return "ALTER TABLE ".dbf_4($p[0])." RENAME TO ".dbf_4($p[1]);
}
	
/**
 * list of tables / views
 *
 * @param array $p [0]=schema, [1]=name, [2]=typ
 * @return sql array
 */
function dbf_20($p){
	global $db;

	$rs = lmbdb_tables($db,null,$p[0],dbf_4($p[1]),$p[2]);
	while(lmbdb_fetch_row($rs)){
		$odbc_table["table_name"][] = lmbdb_result($rs,"TABLE_NAME");
		$odbc_table["table_type"][] = lmbdb_result($rs,"TABLE_TYPE");
		$odbc_table["table_owner"][] = lmbdb_result($rs,"TABLE_OWNER");
	}

	if($odbc_table){
		return $odbc_table;
	}else{
		return false;
	}

}


/**
 * drop table
 *
 * @param array $p [0]=table name
 * @return sql string
 */
function dbq_28($p){

	$qu = "DROP TABLE ".dbf_4($p[0]);

	return $qu;
}

############# SEQUENCE ########################

/**
 * get all sequences
 *
 * @param array $p [0]=schema
 */
function dbf_26($p){
	global $db;

    $sequ = array();
	$rs = lmbdb_exec($db,"SELECT SEQUENCE_NAME FROM INFORMATION_SCHEMA.SEQUENCES WHERE SEQUENCE_SCHEMA = '".dbf_4($p[0])."' ORDER BY SEQUENCE_NAME");
	while(lmbdb_fetch_row($rs)) {
        $name = lmbdb_result($rs, "SEQUENCE_NAME");
        $name_ = explode('_',$name);
        if(!$p[1]){$p[1] = 'lmb';}
        if(strtolower($name_[0]) == strtolower($p[1])) {
            $sequ[] = lmbdb_result($rs, "SEQUENCE_NAME");
        }
    }

    return $sequ;
}


/**
 * create sequence
 *
 * @param array $p [0]=schema, [1]=name, [2]=start
 */
function dbf_21($p){
	global $db;
	
	#first drop sequence if exists
	dbf_22($p);
	
	if($p[2]){$start = " START ".$p[2];}
	if($rs = lmbdb_exec($db,"CREATE SEQUENCE ".dbf_4($p[1]).$start)){
		return true;
	}else{
		return false;
	}
}

/**
 * drop sequence
 *
 * @param array $p [0]=schema, [1]=name
 */
function dbf_22($p){
	global $db;

	$rs0 = lmbdb_exec($db,"SELECT RELNAME FROM PG_CLASS WHERE LOWER(RELNAME) = '".lmb_strtolower(($p[1]))."'");
	if(lmbdb_fetch_row($rs0) AND $rs = lmbdb_exec($db,"DROP SEQUENCE ".dbf_4($p[1])." CASCADE")){
		return true;
	}else{
		return false;
	}
}

############# columns ########################

/**
 * list of columns
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=fieldname, [3]=return $rs, [4]=get matview
 * @return sql string
 */
function dbf_5($p,$mode=null){
	global $db;

    /*
	if($p[2]){
		$rs = lmbdb_columns($db,null,$p[0],dbf_4($p[1]),dbf_4($p[2]));
	}else{
		$rs = lmbdb_columns($db,null,$p[0],dbf_4($p[1]));
	}*/

    // workaround for matviews
    if($p[4] AND LMB_DBFUNC_MATVIEWSHANDLE) {
        $odbctable = dbf_20(array($GLOBALS['DBA']["DBSCHEMA"], $p[1], "'TABLE','VIEW','MATVIEW'"));
        if($odbctable['table_type'][0] == 'MATVIEW' AND function_exists('lmbdb_psqlMatColumns')){
            $rs = lmbdb_psqlMatColumns ($db,null,$p[0],dbf_4($p[1]),dbf_4($p[2]));
            $mode = null;
        }
    }

    if(!isset($rs)) {
        $rs = lmbdb_columns($db, null, $p[0], dbf_4($p[1]), dbf_4($p[2]));
    }

	if($p[3]){return $rs;}

	while(lmbdb_fetch_row($rs)) {

		$col["tablename"][] = trim(lmbdb_result($rs, "TABLE_NAME"));
		$col["columnname"][] = trim(lmbdb_result($rs, "COLUMN_NAME"));
		$col["columnname_lower"][] = dbf_4(trim(lmbdb_result($rs, "COLUMN_NAME")));
		$col["datatype"][] = trim(lmbdb_result($rs, "TYPE_NAME"));
		$col["length"][] = trim(lmbdb_result($rs, "PRECISION"));
		$col["scale"][] = trim(lmbdb_result($rs, "SCALE"));
		$col["default"][] = trim(lmbdb_result($rs, "COLUMN_DEF"));
		
		#$sql = "SELECT scc.column_name as \"Field\", udt_name as \"UDT\", data_type as \"Type\", is_nullable as \"Is Nullable\",keys.key as \"Key\", column_default as \"Default\"
		
		if($mode){
			$sql = "SELECT keys.key as \"Key\"
	        FROM INFORMATION_SCHEMA.COLUMNS scc LEFT JOIN
	           (SELECT table_schema, table_name, column_name, (CASE WHEN (c.contype = 'c') THEN 'CHECK'
	               WHEN (c.contype = 'f') THEN 'FOREIGN KEY'
	               WHEN (c.contype = 'p') THEN 'PRIMARY KEY'
	               WHEN (c.contype = 'u') THEN 'UNIQUE'
	               ELSE NULL END)  as key
	           FROM information_schema.constraint_column_usage col, pg_constraint c
	           WHERE table_schema = '".$p[0]."' AND table_name = '".$p[1]."'
	               AND c.conname = col.constraint_name) as keys  ON scc.column_name = keys.column_name
	        WHERE scc.table_name = '".$p[1]."' AND scc.column_name = '".lmbdb_result($rs, "COLUMN_NAME")."'";
			if($rs1 = lmbdb_exec($db,$sql)){
				$col["mode"][] = lmbdb_result($rs1, "Key");
			}else{
				$col["mode"][] = "";
			}
		}
	}

	if($col){
		return $col;
	}else{
		return false;
	}
}

/**
 * modify column default
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname, [3]=value
 * @return sql string
 */
function dbq_9($p){
    if($p[3] OR $p[3] === 0) {
        return "ALTER TABLE " . dbf_4($p[1]) . " ALTER " . dbf_4($p[2]) . " SET DEFAULT " . $p[3];
    }else{
        return "ALTER TABLE " . dbf_4($p[1]) . " ALTER " . dbf_4($p[2]) . " DROP DEFAULT ";
    }
}

/**
 * rename column 
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=old columnname, [3]=new columnname
 * @return sql string
 */
function dbq_7($p){
	return "ALTER TABLE ".dbf_4($p[1])." RENAME ".dbf_4($p[2])." TO ".dbf_4($p[3]);
}

/**
 * modify column type 
 *
 * @param array $p [0]=schema, [1]=tablename, [2]=columnname, [3]=value
 * @return sql string
 */
function dbq_15($p){
	return "ALTER TABLE ".dbf_4($p[1])." ALTER ".dbf_4($p[2])." TYPE ".dbf_4($p[3]);
}

/**
 * drop column
 *
 * @param array $p [0]=tablename, [1]=columnname
 * @return sql string
 */
function dbq_22($p){

    if(is_array($p[1])){
        foreach($p[1] as $key => $field){
            $qu[] = LMB_DBFUNC_DROP_COLUMN_FIRST.' '.dbf_4($field);
        }
    }else{
        $qu[] = LMB_DBFUNC_DROP_COLUMN_FIRST.' '.dbf_4($p[1]);
    }

	return 'ALTER TABLE '.dbf_4($p[0]).' '.implode(',',$qu);
}

/**
 * add column
 *
 * @param array $p [0]=schema,[1]=tablename, [2]=columnname, [3]=fieldtype, [4]=default
 * @return sql string
 */
function dbq_29($p){

    if(is_array($p[2])){
        foreach($p[2] as $key => $field){
            $qu = LMB_DBFUNC_ADD_COLUMN_FIRST.' '.dbf_4($field).' '.$p[3][$key];
            if($p[4][$key]){$qu .= ' DEFAULT '.$p[4][$key];}
            $adf[] = $qu;
        }
    }else{
        $qu = LMB_DBFUNC_ADD_COLUMN_FIRST.' '.dbf_4($p[2]).' '.$p[3];
        if($p[4]){$qu .= ' DEFAULT '.$p[4];}
        $adf[] = $qu;
    }

	return "ALTER TABLE ".dbf_4($p[1])." ".implode(',',$adf);
}


############# stored procedures ########################


/**
 * limbas based lmb_vkn procedure 
 *
 * @param
 * @return sql string
 */
function dbq_16($p=null){
	global $db;

	$sqlquery = "
CREATE OR REPLACE FUNCTION lmb_vkn() RETURNS trigger AS
$$

DECLARE

statement VARCHAR(1000);
nid INTEGER;

BEGIN


IF TG_ARGV[2] = '+' THEN
     nid = new.id;
END IF;
IF TG_ARGV[2] = '-' THEN
    nid = old.id;
END IF;

statement = 'update ' || TG_ARGV[0] || ' set ' || TG_ARGV[1] || ' = (select count(*) from ' || TG_RELNAME || ' where id = ' || nid || ') where id = ' || nid;
IF TG_ARGV[5] = '2' THEN
statement = 'update ' || TG_ARGV[0] || ' set ' || TG_ARGV[1] || ' = (select count(*) from ' || TG_RELNAME || ',' || TG_ARGV[3] || ' where ' || TG_RELNAME || '.id = ' || nid || ' and ' || TG_ARGV[3] || '.id = ' || TG_RELNAME || '.verkn_id and ' || TG_ARGV[3] || '.del = false) where id = ' || nid;
END IF;

EXECUTE statement;

IF TG_ARGV[4] = '' THEN
    return new;
END IF;

IF TG_ARGV[2] = '+' THEN
     nid = new.verkn_id;
END IF;
IF TG_ARGV[2] = '-' THEN
    nid = old.verkn_id;
END IF;


statement = 'update ' || TG_ARGV[3] || ' set ' || TG_ARGV[4] || ' = (select count(*) from ' || TG_RELNAME || ' where verkn_id = ' || nid || ') where id = ' || nid;
IF TG_ARGV[5] = '2' THEN
statement = 'update ' || TG_ARGV[3] || ' set ' || TG_ARGV[4] || ' = (select count(*) from ' || TG_RELNAME || ',' || TG_ARGV[0] || ' where ' || TG_RELNAME || '.verkn_id = ' || nid || ' and ' || TG_ARGV[0] || '.id = ' || TG_RELNAME || '.id and ' || TG_ARGV[0] || '.del = false) where id = ' || nid;
END IF;

EXECUTE statement;


return new;

END;
$$ 
LANGUAGE 'plpgsql';
";

	//RAISE EXCEPTION '!LMB%', statement;

    //IF TG_ARGV[2] = '0' THEN
    //    nid = new.TG_ARGV[4];
    //    statement = 'update ' || TG_ARGV[0] || ' set ' || TG_ARGV[1] || ' = (select count(*) from ' || TG_RELNAME || ' where ' || TG_ARGV[4] || ' = ' || nid || ') where id = ' || nid;
    //    return new;
    //END IF;

	
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_vkn",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}
	
	$sqlquery = "
CREATE OR REPLACE FUNCTION lmb_lastmodified() RETURNS trigger AS '
DECLARE

statement VARCHAR(200);

BEGIN

statement = ''UPDATE LMB_CONF_TABLES SET LASTMODIFIED = CURRENT_TIMESTAMP WHERE TAB_ID = '' || TG_ARGV[0];
EXECUTE statement;

return new;

END; '  LANGUAGE 'plpgsql';
	";

	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_lastmodified",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}


	$sqlquery = "
CREATE OR REPLACE FUNCTION YEAR(val TIMESTAMP) RETURNS smallint AS $$
BEGIN

RETURN extract(year from val);

END; $$

LANGUAGE PLPGSQL;
	";

	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_lastmodified",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}


	$sqlquery = "
CREATE OR REPLACE FUNCTION MONTH(val TIMESTAMP) RETURNS smallint AS $$
BEGIN

RETURN extract(month from val);

END; $$

LANGUAGE PLPGSQL;
	";

	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_lastmodified",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}

	$sqlquery = "
CREATE OR REPLACE FUNCTION DAY(val TIMESTAMP) RETURNS smallint AS $$
BEGIN

RETURN extract(day from val);

END; $$

LANGUAGE PLPGSQL;
	";

	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure lmb_lastmodified",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}




$sqlquery = "

CREATE OR REPLACE FUNCTION LMB_CONVERT_NUM(val VARCHAR) RETURNS NUMERIC AS $$

DECLARE x NUMERIC;
BEGIN
    x = $1::NUMERIC;
    RETURN x;
EXCEPTION WHEN others THEN
    RETURN NULL;
END;
$$
LANGUAGE PLPGSQL;

";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure LMB_CONVERT_NUM",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}


$sqlquery = "
CREATE OR REPLACE FUNCTION LMB_CONVERT_CHAR(val NUMERIC) RETURNS VARCHAR AS $$

DECLARE x VARCHAR;
BEGIN
    x = $1::VARCHAR;
    RETURN x;
EXCEPTION WHEN others THEN
    RETURN NULL;
END;
$$
LANGUAGE PLPGSQL;
";

    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure LMB_CONVERT_CHAR",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}

$sqlquery = "
CREATE
OR REPLACE FUNCTION LMB_TRY_QUERY (query VARCHAR) RETURNS BOOLEAN AS $$

BEGIN
  BEGIN
  EXECUTE query;
  return true;

  EXCEPTION WHEN OTHERS 
  THEN
  return false;
  END;

END; $$
LANGUAGE PLPGSQL;
";

    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"create procedure LMB_TRY_QUERY",__FILE__,__LINE__);
    if(!$rs){
		return false;
	}




	return true;

}

/**
 * drop limbas based lmb_vkn procedure 
 *
 * @param
 * @return bool
 */
function dbq_21($p){
	global $db;
	
	$sqlquery = "drop function lmb_vkn()";
	$rs = lmbdb_exec($db,$sqlquery);
}

/**
 * pretty print table size
 *
 * @param array $p [0]=schema, [1]=tablename
 * @return array table size, order size
 */
function dbq_30(array $p): array{
	global $db;


	$sqlQuery = "SELECT pg_size_pretty(pg_table_size('{$p[1]}')) AS table_size, pg_table_size('{$p[1]}') AS order_size";
	$rs = lmbdb_exec($db, $sqlQuery);
	return [lmbdb_result($rs, "table_size"), lmbdb_result($rs, "order_size")];
}




/*
## show Postgresql stored procedure
SELECT  *
FROM    pg_catalog.pg_namespace n
JOIN    pg_catalog.pg_proc p
ON      pronamespace = n.oid
WHERE   nspname = 'public'
*/


################# BACKUP #################



# -------- create Medium --------
function create_medium($path,$typ){
	return true;
}

# -------- delete medium --------
function delete_medium($medium,$typ){
	return true;
}

# -------- start backup --------
function backup_data($medium,$path,$typ){
	global $DBA;
	global $db;

    $host = '';
    if($DBA['DBHOST'] AND $DBA['DBHOST'] != 'localhost'){
        $host = '-h '.$DBA['DBHOST'];
    }

    if($DBA['PORT']){
        $port = '-p '.$DBA['PORT'];
    }

	$sys = "pg_dump $host $port ".$DBA["DBCNAME"]." -U ".$DBA["DBCUSER"]." | gzip > ".$path["path"].".gz";
	exec($sys,$res,$ret);

	if(!$ret){
		clearstatcache();
		if(file_exists($path["path"].".gz")){
			$out[7] = filesize($path["path"].".gz");
		}
		if($out[7] > 1000){
			$out[0] = "OK";
			$out[10] = $path["medname"];
			return $out;
		}else{
			$out[0] = 'FALSE';
			return $out;
		}
	}else{
		$out[0] = 'FALSE';
		return $out;
	}
}

?>
