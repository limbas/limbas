<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

use Limbas\extra\form\TinyMce;
use Limbas\extra\mail\LmbMail;
use Limbas\extra\mail\MailAccount;
use Limbas\lib\auth\Session;


# --- Zeitmessung ---------------------------------------------------
function gettime(){
	list($usec, $sec) = explode(" ",microtime());
	return ((float)$usec + (float)$sec);
}


# remove directories recursiv
function rmdirr($dir,$recursiv=1,$onlyfile=0,$self=0) {
	if(!$recursiv AND $self){return;}
	if ($handle = opendir($dir)) {
		while ($file = readdir($handle)) {
			if ($file != "." && $file != ".." AND lmb_stristr($dir."/".$file,$GLOBALS["umgvar"]["pfad"])) {
				$filepath = $dir."/".$file;
				is_dir($filepath)? rmdirr($filepath,$recursiv,$onlyfile,1) : unlink($filepath);
			}
		}
		if($self AND !$onlyfile){
			rmdir($dir);
		}
	}
}


# ------ Verzeichnis Inhalte -------
function read_dir($path,$rec=null,&$arr=array()){

	if(lmb_substr($path,lmb_strlen($path)-1,1) != "/"){$path = $path."/";}
    if(!is_dir($path)){return array();}
	$handle=opendir($path);
	while ($file = readdir($handle)) {
		if (lmb_substr($file,0,1) != "." && is_dir($path.$file)) {
			$sub_dir = $path . $file . "/" ;
			$arr["path"][] = $sub_dir;
			$arr["name"][] = $file;
			$arr["typ"][] = "dir";
			$arr["isdir"][] = 1;
			$arr["ext"][] = null;
			$carr = $arr["path"];
			end($carr);
			$arr["group"][$sub_dir][] = key($carr);
			if($rec){read_dir($sub_dir,$rec++,$arr);}
		}elseif(is_file($path.$file)){
			$ext = explode(".",$file);
			$arr["path"][] = $path;
			$arr["name"][] = $file;
			$arr["typ"][] = "file";
			$arr["isfile"][] = 1;
			$arr["ext"][] = $ext[lmb_count($ext)-1];
			$carr = $arr["path"];
			end($carr);
			$arr["group"][$path][] = key($carr);
		}
	}
	closedir($handle);
	return $arr;
}


function lmb_alert($add_alert, $isError=false){
    global $alert;
    global $action;
    global $umgvar;
    global $session;
    global $lang;

    if($umgvar['debug_messages']){
        $logpath = TEMPPATH . 'log/messages.log';
        $value = date("Y-m-d H:i:s")."\t".$session["username"]."\t".$action."\t".str_replace("\\n"," ",$add_alert)."\n";
        $rf = fopen($logpath,"a");
        fputs($rf,$value);
        fclose($rf);
    }

    if (!$alert) {
        $alert = array();
    } else if (!is_array($alert)) {
        $alert = array($alert);
    }
    if ($isError) {
        $alert[] = $lang[56];
    }
    $alert = array_unique($alert);
    $alert[] = str_replace(chr(10), '\n', str_replace('\'', ' ', $add_alert));
}


// eval function with error parsing
function lmb_eval( $code ) {

    try {
        return eval($code);
    } catch (Throwable $t) {
        error_log($t);
    }

}

function colorHexToDecArray($color){
	$red = hexdec(lmb_substr($color,0,2));
	$green = hexdec(lmb_substr($$color,2,2));
	$blue = hexdec(lmb_substr($color,4,2));
	$colorArray["red"] = $red;
	$colorArray["green"] = $green;
	$colorArray["blue"] = $blue;
	return $colorArray;
}


function colorDecArrayToHex($colorArray){
	$color = dechex($colorArray["red"]);
	$color .= dechex($colorArray["green"]);
	$color .= dechex($colorArray["blue"]);
	return $color;
}


/**
*	Function that make an average of an array of color
*	used for instance to set the color of a cell that should have more than one color
* 	@param color_array 	an array of String that hold the list of color in hexadecimal format (for instance: {"FFFFFF","FCF345"}
*	@return return the color in hexadecimal format
*/
function average_color($color_array)
{
	if(!$color_array)
		return "";

	$avg_red=0;
	$avg_green=0;
	$avg_blue=0;

	foreach ($color_array as $cur_color)
	{
		$avg_red += hexdec(lmb_substr($cur_color,0,2));
		$avg_green += hexdec(lmb_substr($cur_color,2,2));
		$avg_blue += hexdec(lmb_substr($cur_color,4,2));
	}

	$avg_red /= lmb_count($color_array);
	$avg_green /= lmb_count($color_array);
	$avg_blue /= lmb_count($color_array);

	return "#".sprintf("%02s",dechex($avg_red)).sprintf("%02s",dechex($avg_green)).sprintf("%02s",dechex($avg_blue));
}



function parse_db_string($value,$length=null){
	if($length){
		return dbf_7(lmb_substr($value,0,$length));
	}
	return dbf_7($value);
}

function parse_db_blob($value){
	return dbf_6($value);
}

function parse_db_int($value, $length=100) {
	if(!$value OR lmb_strlen($value) > $length OR !is_numeric($value)){
        return 0;
    }else{
        return str_replace(",",".",$value);
    }
}

function parse_db_float($value,$length=100,$scale=0) {
	if($value) {
        $value = lmb_strtoupper(str_replace(",",".",$value));
        $value = str_replace(" ", "", $value);
    } else {
        return 0;
    }
	# more than one .
	if(lmb_substr_count($value,".") > 1){
		$pos = lmb_strrpos($value,".");
		$value = str_replace(".", "", substr($value,0,$pos)).".".lmb_substr($value,$pos+1,20);
	}
	if(!$value){return 0;}
	$part = explode('.',$value);
    $part[1] = explode('E', $part[1])[0];
	# with scale
	if($scale){
		if(lmb_strlen($part[0]) > ($length-$scale)){return 0;}
		if(lmb_strlen($part[1]) > $scale){
			$value = str_replace(",",".",round($value,$scale));
		}
	}else{
		if(lmb_strlen($part[0])+lmb_strlen($part[1]) > $length){return "0";}
	}
	if(!preg_match("/[0-9.-]/",$value)){
        return 0;
    }

	return $value;
}


function parse_db_bool($value){
	$value = trim($value);
	if(lmb_strtoupper($value) == 'NULL'){return LMB_DBDEF_NULL;}
	elseif(lmb_strtoupper($value) == 'TRUE' OR lmb_strtoupper($value) == 'ON' OR $value == 1){return LMB_DBDEF_TRUE;}
	elseif(lmb_strtoupper($value) == 'FALSE' OR lmb_strtoupper($value) == 'OFF' OR $value == 0 OR !$value){return LMB_DBDEF_FALSE;}
	else{return LMB_DBDEF_TRUE;}
}

function parse_bool($value){

    $value = parse_db_bool($value);
    if($value == LMB_DBDEF_TRUE){
        return 1;
    }else{
        return 0;
    }

}

function convert_Checkbox($value){
	if($value == 'true'){return true;}else{return false;}
}

function convert_NumberFormat($value,$format){
    if (!$value) {
        $value = 0;
    }
	if(!$format){
        return $value;
    }
    $value = parse_db_float($value);
    if (!is_numeric($value)) {
        return $value;
    }
    $format_arr = splitFormat($format);

    if($format_arr) {
        if($format_arr[0] == 'locale') {
            return convert_NumberFormatLocale($value);
        }
        if(count($format_arr) == 1) {
            return number_format($value,
                $format_arr[0]);
        }
        elseif(count($format_arr) == 3) {
            return number_format($value,
                $format_arr[0],
                $format_arr[1],
                $format_arr[2]
            );
        }
    }
    return $value;
}

function splitFormat($format) : array {
    $formatvals = explode(',', $format, 2);
    if (isset($formatvals[0])) {
        if($formatvals[0] == 'locale') {
            return ["locale"];
        }
        if (isset($formatvals[1]) && is_numeric($decimals = $formatvals[0])) {
            $separators = explode('\'', $formatvals[1]);
            if (count($separators) == 5) {
                $decimal_separator = $separators[1];
                $thousands_separator = $separators[3];
                return [$decimals, $decimal_separator, $thousands_separator];
            }
        }
        return [$decimals];
    }
    return [];
}

function convert_NumberFormatLocale($value) {
    global $session;
    $value = parse_db_float($value);
    if (!$value) {
        $value = 0;
    }
    if (!is_numeric($value)) {
        return $value;
    }
    $locale = $session['setlocale'];

    //todo add NumberFormatter to composer.json
    /*
    $numberFormatter = NumberFormatter::create($locale, NumberFormatter::DECIMAL);
    $formattedNumber = $numberFormatter->format($value);
    */
    $formattedNumber = $value;
    return $formattedNumber;
}

function parse_db_status($status){
	if($status == 'archive'){
        return 1;
    }elseif($status == 'trash'){
        return 2;
    }else{
        return 0;
    }
}


function convert_FloatToScientific($value, $dec=0, $format=null){
	$value = str_replace(",",".",$value);
	if(lmb_strpos($value,"E")){return strval($value);}
	if(lmb_strlen($value) <= $dec OR !$dec){
        return convert_NumberFormat($value, $format);
    }
	$value = sprintf("%.10E",$value);
	$value = preg_replace("/\.[0]{1,}E/","E",$value);
	$value = preg_replace("/[0]{1,}E/","E",$value);
    if($format) {
        $value_arr = explode('E', $value);
        $format_arr = explode(',', $format, 2);
        $format_arr[0] = strlen(explode('.', $value_arr[0])[1]);
        $format = implode(',', $format_arr);
        $value_arr[0] = convert_NumberFormat($value_arr[0], $format);
        $value = implode('E', $value_arr);
        return $value;
    }
	if(is_numeric($value)){return $value;}else{return 0;}
}

# not used
function convert_ScientificToFloat($value,$dec){
	$value = sprintf("%.".$dec."F",$value);
	$value = preg_replace("/[0]{1,}$/","",$value);
	if(is_numeric($value)){return $value;}else{return 0;}
}

function convert_FloatRound($value){
	if(!$value OR LMB_DBFUNC_FLOATHANDLE){return $value;}
	
	if($pos = lmb_strpos(lmb_strtoupper($value),"E")){
		$epart = lmb_substr($value,$pos);
		$value = lmb_substr($value,0,$pos);
	}
	
	$value = parse_db_float($value);
	$value .= lmb_strpos($value,".") === false ? "." : "";
	$value = sprintf("%-018s",$value);
	$value = floatval(lmb_substr($value,0,lmb_strlen($value)-2));   # depends on php localization
    $value =  str_replace(',', '.', $value);
	$value = $value.$epart;
	
	return $value;
}

/**
 * Get the next available ID for table
 *
 * @param string	$tab	the tablename
 * @return string	$field	the fieldname
 */
function next_db_id($tab,$field="ID",$sequence=null,$filter=null){
	global $db;
	global $umgvar;

    // get next key from extension
    if(function_exists('lmb_next_db_id_'.strtolower($tab))){
        $fc = 'lmb_next_db_id_'.strtolower($tab);
        return $fc($tab,$field);
    }

	if(!$tab){return false;}
	if($GLOBALS['lmb_useSequence'] === false){$lmb_useSequence = 0;}

	if(is_numeric($tab) AND is_numeric($field)){
	    $field = $GLOBALS['gfield'][$tab]['field_name'][$field];
	    $tab = $GLOBALS['gtab']['table'][$tab];
    }

	if(LMB_DBFUNC_SEQUENCE AND $sequence){
		return dbf_8("LMB_".$tab."_".$field);
	}else{
		#if(LMB_DBFUNC_MAXHANDLE){$isnn = " WHERE $field IS NOT NULL";}
		$sqlquery = "SELECT MAX($field) AS NEXTID FROM ".dbf_4($tab);
		if($filter){$sqlquery .= " WHERE $filter";}
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
		$NEXTID = (lmbdb_result($rs,"NEXTID")+1);

        if($NEXTID <= 0){
			return 1;
		}
        return $NEXTID;

	}
	
	return false;
}

/**
 * Get the next available ID with namespace
 *
 * @param string	$tab	the tablename
 * @return string	$field	the fieldname
 */
function next_conf_id($tab,$field="ID",$ext=null,$allocate=null){
	global $db;
	global $umgvar;

	if($umgvar["allocate_namespace"] AND !$allocate){
		$range = explode("-",$umgvar["allocate_namespace"]);
		$from = parse_db_int($range[0]);
		$to = parse_db_int($range[1]);
	}else{
		$from = 1;
		$to = 9999+$allocate;
	}

	if($from AND $to){
		if($umgvar["allocate_freeid"] AND !$allocate){
			$sqlquery = "SELECT $field FROM $tab WHERE $field <= $to AND $field >= $from $ext ORDER BY $field";
			$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

			if(lmbdb_result($rs, $field) > $from){
				$NEXTID = $from;
			}else{
				$kid_ = 0;
				while(lmbdb_fetch_row($rs)){
					$kid = lmbdb_result($rs, $field);
					if(($kid-$kid_) > 1 AND $kid_){
						$NEXTID = $kid_+1;
						break;
					}
					$kid_ = $kid;
				}
			}
		}

		if(!$NEXTID){

			$sqlquery = "SELECT MAX($field) AS NEXTID FROM $tab WHERE $field <= $to AND $field >= $from $ext";
			$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
			$NEXTID = lmbdb_result($rs,"NEXTID")+1;

			if($allocate AND $NEXTID < $allocate){
				$NEXTID = $NEXTID+$allocate;
			}
			

		}

		if($NEXTID == 1){
			$NEXTID = $from;
		}elseif($NEXTID > $to){
			lmb_alert("no namespace ID left!");
			return next_db_id($tab,$field);
		}

		if($NEXTID){return $NEXTID;}

	}
	

	return next_db_id($tab,$field);
}


/**
 * get rowcount
 *
 * @param unknown_type $rs
 * @param unknown_type $query
 * @param unknown_type $counttype  0=select-count, 1=fetch-rows, 2=NOcount
 * @return unknown
 */
function lmb_num_rows($rs,&$query=null,$counttype=null) {
	global $db;
	global $umgvar;
	$ct = 0;
	
	$count = -1;
	if(defined(LMB_DBFUNC_NUMROWS) AND !defined(LMB_DBFUNC_OFFSET)){
		$count = lmbdb_num_rows($rs);
	}

	# ---------------- Anzahl Ergebnisse neu berechnen -------------
	if($count <= 0){
		if($counttype == 2){
			return $umgvar["resultspace"];
		}elseif($counttype == 1){
			while(lmbdb_fetch_row($rs)){
				$ct++;
			}
			$count = $ct;
		}elseif($query){
			$rs1 = lmbdb_exec($db,$query) or errorhandle(lmbdb_errormsg($db),$query,'count_query',__FILE__,__LINE__);
			$count =  lmbdb_result($rs1, "RESULT");
	   		lmbdb_free_result($rs1);
		}
	}
    return $count;
}

/**
 * SQL - prepare
 *
 * @param $prepare_string string
 * @param $bindvalue array of values with which to replace ?s in prepare_string
 * @param $FILE string __FILE__
 * @param $LINE string __LINE__
 * @return PDOStatement|resource|false
 */
function lmb_PrepareSQL($prepare_string,$bindvalue,$FILE=null,$LINE=null) {
	global $db;

	if(LMB_DBFUNC_PREPAREHANDLE){
		$sql_prep = lmbdb_prepare($db,$prepare_string);
		$rs = lmbdb_execute($sql_prep,$bindvalue) or errorhandle(lmbdb_errormsg($db),$prepare_string,'odbc_prepare',$FILE,$LINE);
	}else{
		$prepsplit = explode("?",$prepare_string);
		foreach ($prepsplit as $key => $value){
			if($key + 1 === lmb_count($prepsplit)) { // last part
                $sqlquery .= $value;
            } else {
                $sqlquery .= $value . "'" . parse_db_string($bindvalue[$key]) . "'";
            }
		}
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,"odbc_prepare",$FILE,$LINE);
	}

	if(!$rs){return false;}
	if($sql_prep) {
	    return $sql_prep; // return statement s.t. you can fetch later on
    }
    return $rs; // fallback if !LMB_DBFUNC_PREPAREHANDLE
}

/**
 * calculate Checksum from dataset
 *
 * @param $gtabid
 * @param $ID
 * @return bool
 */
function lmb_calculateChecksum($gtabid,$ID=null){
    global $db;
    global $gtab;
    global $gfield;
    global $umgvar;

    $keyfield = 'ID';
    if($umgvar['sync_mode'] != 1 && $gtab['datasync'][$gtabid] == 1){
        $keyfield = 'LMB_SYNC_ID';
    }

    // default ID
    $qu[] = dbf_12($keyfield,1);

    foreach($gfield[$gtabid]['checksum'] as $fieldid => $value){
        $qu[] = dbf_12($gfield[$gtabid]['field_name'][$fieldid],$gfield[$gtabid]['parse_type'][$fieldid]);
    }

    $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET LMB_CHECKSUM = MD5(".implode(' || ',$qu).")  ".($ID ? "WHERE ID = $ID" : '');
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    #error_log($sqlquery);
    if(!$rs){
        return false;
    }

    /*
    select
    sum(('x' || substring(LMB_CHECKSUM, 1, 8))::bit(32)::bigint) as ZAHL
    from ebene1
     */

    return true;

}

/**
 * array merge with replace also keys
 *
 * @param unknown_type $arr1
 * @param unknown_type $arr2
 * @return unknown
 */
function lmb_array_merge($arr1, $arr2){
	foreach ($arr2 as $key => $value){
		$arr1[$key] = $value;
	}
	return $arr1;
}


function lmb_array_sum($arr){

	if(!$arr){return false;}
	
	foreach ($arr as $key => $val){
		$sum += parse_db_float($val);
	}

	return $sum;
}

function lmb_getGElementTabID(&$haystack,$id){

    foreach ($haystack as $tabid => $value) {
        if($value['id']){
        foreach ($value['id'] as $skey => $svalue) {
            if($svalue == $id){
                return $tabid;
            }
        }}
    }

}


/* ---- Javascript Sonderzeichen-Behandlung ----------------------- */
function htmljs($value) {
	$value = str_replace("\"","\\\"",$value);
	$value = str_replace("'","\'",$value);
	$value = str_replace("\r\n","\\n",$value);
	$value = str_replace("\n","\\n",$value);
	$value = str_replace("\r","\\n",$value);
	return $value;
}

/* ---- own serialize for hidden form values ----------------------- */
function seriamize($value) {
	return base64_encode(gzcompress(serialize($value)));
}

function unseriamize($value) {
	return unserialize(@gzuncompress(base64_decode($value)));
}


/**
 * limbas error reporting
 *
 * @param string $value
 */
function lmb_error_log($source,$error,&$verbose=null,$alert=null){
    global $session;
    global $gtab;
    global $gfield;
    global $lang;
    
    $verbose[$source][] = $error;
    
    if($session['debug']){
	   error_log(local_date(0).'\t'.$source.'\t'.print_r($error,1));
    }
    
    if($alert){
        
        if($error['field']){$error['field'] = $gfield[$error['table']]['spelling'][$error['field']];}
        if($error['table']){$error['table'] = $gtab['table'][$error['table']];}
        
        $msg = $lang[56].'\n\n';
        $msg .= 'action:\t'.$source.'\n';
        foreach($error as $key => $value){
            $msg .= $key.':\t'.$value.'\n';
        }
        
        
        lmb_alert($msg);
    }
}

/**
 * limbas sql error reporting
 *
 * @param string $FEHLER
 * @param string $QUERY
 * @param string $ACTION
 * @param string $FILE
 * @param int $LINE
 */
function errorhandle($FEHLER,$QUERY,$ACTION,$FILE,$LINE)
{
    global $session;
    global $umgvar;

    if ($ACTION == 'result_query') {
        if (function_exists("filter_reset")) {
            filter_reset();
        }
        $ACTION = 'gtab_erg';
    }
    if (!$ACTION) {
        $ACTION = $GLOBALS["action"];
    }

    $logpath = TEMPPATH . 'log/sql_error.log';
    $value = date("Y-m-d H:i:s") . "\t" . $session["username"] . "\t" . $ACTION . "\t" . $FILE . "\t" . $LINE . "\t" . str_replace("\n", " ", $FEHLER) . "\t" . str_replace("\n", " ", $QUERY) . "\n";
    $rf = fopen($logpath, "a");
    if ($rf) {
        fputs($rf, $value);
        fclose($rf);
    }

    if(!defined('LMB_SYNC_PROC')) {
        if ($session["debug"] OR $umgvar['admin_mode']) {
            lmb_alert($value);

            // userdefined error from database function "lmb_isnull()"
        } elseif ($umgvar['db-custerrors']){
            $ep = lmb_strpos($FEHLER,'<LMB');
            if ($ep !== FALSE){
                $FEHLER = substr($FEHLER,$ep+4,lmb_strpos($FEHLER,'LMB>')-$ep-4);
                lmb_alert($FEHLER);
            }
        }
    }
}

// --- Fehlermeldungen -----
function error_showalert(&$alert)
{
    if (is_array($alert)) {
        echo "<script language=\"JavaScript\">";
        if ($alert and !is_array($alert)) {
            $alert = array(
                $alert
            );
        }

        if($GLOBALS['session']['debug']){
            $alert[] = str_replace("\n","\\n",lmb_log::getLogMessage(true));
        }

        $alert = array_unique($alert);

        echo "showAlert('" . implode("\\n", $alert) . "');\n";
        echo "</script>";
    }
}

# ------------- Dateigröße anzeigen -------------
function file_size($size) {
	if(!$size){return;}
	$sizes = Array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB');
	$ext = $sizes[0];
	for ($i=1; (($i < lmb_count($sizes)) && ($size >= 1024)); $i++) {
		$size = $size / 1024;
		$ext  = $sizes[$i];
	}
	
	return number_format($size,2,'.','')." ".$ext;
}

# ------------- Dateigröße berechnen -------------
function file_size_convert($size) {

	$fl = parse_db_float($size);
	if(lmb_stripos($size,"k") OR lmb_stripos($size,"kb") OR lmb_stripos($size,"kilobyte")){$size = ($fl * 1024);}
	elseif(lmb_stripos($size,"m") OR lmb_stripos($size,"mb") OR lmb_stripos($size,"megabyte")){$size = ($fl * 1024 * 1024);}
	elseif(lmb_stripos($size,"g") OR lmb_stripos($size,"gb") OR lmb_stripos($size,"gigabyte")){$size = ($fl * 1024 * 1024 * 1024);}
	elseif(lmb_stripos($size,"t") OR lmb_stripos($size,"tb") OR lmb_stripos($size,"terrabyte")){$size = ($fl * 1024 * 1024 * 1024 * 1024);}
	elseif(lmb_stripos($size,"p") OR lmb_stripos($size,"pb")){$size = ($fl * 1024 * 1024 * 1024 * 1024 * 1024);}
	elseif(lmb_stripos($size,"b") OR lmb_stripos($size,"byte")){$size = ($fl);}
	$size = sprintf("%.0f",$size);

	if(is_numeric($size)){return $size;}else{return 0;}
}


# ------------- Downloadzeiten in Minuten -------------
function dltime($size, $speed){
	$zeit = $size / 1024;
	$zeit = $zeit * 8;
	$zeit = $zeit / $speed;
	$zeit = $zeit / 60;
	$zeit = number_format($zeit,2,'.','');
	return $zeit;
}

# ------------- Mimetype -------------
if (!function_exists ("mime_content_type")) {
	function mime_content_type ($file) {
		return exec ("file -bi " . escapeshellcmd($file));
	}
}

function lmb_getDownloadHash($path,$name,$mimetype,$disposition=null,$permanent=null){

    $download['name'] = $name;
    $download['path'] = $path.($name ? '/'.$name : '');
    $download['mimetype'] = $mimetype;
    $download['disposition'] = $disposition;
    $download['permanent'] = $permanent;
    $hash = bin2hex(random_bytes(8));
    $_SESSION['session']['download'][$hash] = $download;
    $GLOBALS['session']['download'][$hash] = $download;
    $url = "main.php?action=download&hash=$hash";

    #error_log(print_r($GLOBALS['session']['download'],1));

    return $url;
}

/**
 * Create a GdImage from a path
 * @param string $filePath path to jpeg, png, gif or pdf file
 * @return GdImage|false the created GdImage or false if the file could not be loaded
 */
function lmb_gdGetFromFile(string $filePath): GdImage|false {
    return match (pathinfo($filePath, PATHINFO_EXTENSION)) {
        'jpg', 'jpeg' => imagecreatefromjpeg($filePath),
        'png' => imagecreatefrompng($filePath),
        'gif' => imagecreatefromgif($filePath),
        'pdf' => ($jpegPath = lmb_createJpegFromPdf($filePath)) ? imagecreatefromjpeg($jpegPath) : false,
        default => false
    };
}

/**
 * Create a jpeg from a pdf file
 * @param string $filePath the path to the pdf file
 * @return string|false the path to the created jpeg file, or false if conversion failed
 */
function lmb_createJpegFromPdf(string $filePath): string|false {
    global $session;

    [
        'extension' => $extension,
        'filename' => $fileName
    ] = pathinfo($filePath);

    if ($extension !== 'pdf') {
        return false;
    }

    $tempPathDir = USERPATH . $session['user_id'] . '/temp/';
    $filePathNew = $tempPathDir . $fileName;

    // convert first page to jpeg
    $cmd = "pdftoppm -f 1 -l 1 -jpeg -r 72 $filePath $filePathNew";
    exec($cmd);

    // remove page number from jpeg
    $tempDir = new DirectoryIterator($tempPathDir);
    foreach ($tempDir as $fileinfo) {
        $tempFileName = $fileinfo->getFileName();
        if (preg_match("/^$fileName-0*1\.jpg$/", $tempFileName)) {
            rename($tempPathDir . $tempFileName, $filePathNew . '.jpg');
            return $filePathNew . '.jpg';
        }
    }

    return false;
}

function lmb_gdImageScaleProportional(GdImage $image, int $width, int $height): GdImage {
    $imageWidth = imagesx($image);
    $imageHeight = imagesy($image);

    $scale = min($width / $imageWidth, $height / $imageHeight);

    $newWidth = (int)($imageWidth * $scale);
    $newHeight = (int)($imageHeight * $scale);

    $scaledImage = imagecreatetruecolor($newWidth, $newHeight);

    imagealphablending($scaledImage, false);
    imagesavealpha($scaledImage, true);

    $transparentColor = imagecolorallocatealpha($scaledImage, 0, 0, 0, 127);
    imagefill($scaledImage, 0, 0, $transparentColor);

    imagecopyresampled($scaledImage, $image, 0, 0, 0, 0, $newWidth, $newHeight, $imageWidth, $imageHeight);

    return $scaledImage;
}

/**
 * Extend the image to the given dimensions and center it
 * @param GdImage $image
 * @param int $newWidth
 * @param int $newHeight
 * @return GdImage
 */
function lmb_gdCenterAndExtent(GdImage $image, int $newWidth, int $newHeight): GdImage {
    $imageWidth = imagesx($image);
    $imageHeight = imagesy($image);

    $newImage = imagecreatetruecolor($newWidth, $newHeight);

    $backgroundColor = imagecolorallocate($newImage, 255, 255, 255);

    imagefill($newImage, 0, 0, $backgroundColor);

    $x = ($newWidth - $imageWidth) / 2;
    $y = ($newHeight - $imageHeight) / 2;

    imagecopy($newImage, $image, $x, $y, 0, 0, $imageWidth, $imageHeight);

    return $newImage;
}


/**
 * ImageMagick convert thumbs
 *
 * @param unknown_type $file optional file_id or array of fileinfos (id,name,mimetype,thum_ok)
 * @param unknown_type $file_path optional path of source file
 * @param unknown_type $dest_path optional path of destination
 * @param unknown_type $dest_format optional format to convert
 * @param unknown_type $width optional widh to convert
 * @param unknown_type $height optional height to convert
 * @param unknown_type $prop optional force proportion with white overflow
 * @param unknown_type $watermark optional use watermark (file_id of image or Text)
 * @param unknown_type $rebuild optional force to rebuild thumpnail
 * @return unknown
 * @throws ImagickException
 */


function lmb_getThumbnail($file,$width=null,$height=null,$prop=null,$dest_format=null,$dest_path=null,$watermark=null,$rebuild=null,$getpath=null,$geturl=null){
	global $umgvar;
	global $session;
	global $db;
	global $gmimetypes;
	global $filestruct;
    global $gtab;


	# proportional
	if($prop){
		if(!$width){$width = "";$width=$height;}
		if(!$height){$height = "";$height=$width;}
		$nameext .= "p";
	}

	# watermark
	if($watermark){
		if(is_numeric($watermark)){$w = $watermark;}else{$w = lmb_substr(md5($watermark),0,6);}
		$nameext .= "w_$w";
	}

	# size
	if($width AND $height){$size = $width."x".$height;}
	elseif($width){$size = $width."x";}
	elseif($height){$size = "x".$height;}

	# $dest_format
	if(!$dest_format){
		$dest_format = $umgvar["thumbnail_type"];
	}

	# file from id or array
	if(is_numeric($file) OR is_array($file)){

	    require_once(COREPATH . 'extra/explorer/filestructure.lib');
	    if(!$filestruct){get_filestructure();}

		if(is_numeric($file)){
			if($GLOBALS['gtab']['multitenant'][$GLOBALS['gtab']['argresult_id']['LDMS_FILES']]){$selmid = ',LMB_MID';}
			$sqlquery = "SELECT ID,SECNAME,MIMETYPE,THUMB_OK,LEVEL $selmid FROM LDMS_FILES WHERE ID = $file AND THUMB_OK = ".LMB_DBDEF_TRUE;
			$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
			if(!lmbdb_result($rs, "SECNAME")){return false;}
			$file_id = lmbdb_result($rs, "ID");
			$secname = lmbdb_result($rs, "SECNAME");
			$mimeid = lmbdb_result($rs, "MIMETYPE");
			$thumb_ok = lmbdb_result($rs, "THUMB_OK");
			$level = lmbdb_result($rs, "LEVEL");
			$mid = lmbdb_result($rs, "LMB_MID");
		}elseif(is_array($file)){
			$file_id = $file[0];
			$secname = $file[1];
			$mimeid = $file[2];
			$thumb_ok = $file[3];
			$level = $file[4];
			$mid = $file[5];
		}

        // check for thumbnail prevention
        if($filestruct['prevent_thumbs'][$level]){
            return false;
        }

		#$mid = $GLOBALS['lmmultitenants']['translate'][$mid];

		#if(!$thumb_ok AND !$rebuild){return false;}
		if(!$mimetype = $gmimetypes["mimetype"][$mimeid] AND $file_id){
			IMACK_NoSuccess($file_id);
			return false;
		}
		$ext = $gmimetypes["ext"][$mimeid];
		$file_path = lmb_getFilePath($file_id,$level,$secname,$ext,$mid);
        $dest_name = $secname.$size.$nameext;
        $dest_path = lmb_getFilePath($file_id,$level,$dest_name,$dest_format,$mid,2);
        $dest_url = ltrim(str_replace(DEPENDENTPATH,"",$dest_path),"/");

	# file from path / reports & forms
	}elseif(is_string($file)){

	    $file_path = $file;
		if (lmb_substr($file,0,1) != "/") {
			$file_path = DEPENDENTPATH."/".$file;
		}
		if (lmb_substr($dest_path,0,1) != "/") {
			$dest_path = DEPENDENTPATH."/".$dest_path;
		}

		# file name
		$filename = explode('/',$file_path);
		$filename = end($filename);
		# mime type
        $secname = lmb_substr($filename,0,lmb_strrpos($filename,'.'));
        $ext = lmb_substr($filename,lmb_strrpos($filename,'.')+1);
		$mimetype = $gmimetypes["resolve"][$ext];
		$dest_name = $secname.$size.$nameext;
        $dest_url = ltrim(str_replace(DEPENDENTPATH,"",$dest_path),"/");

	}else{
		return false;
	}

    $thumbnail['name'] = $dest_name.'.'.$dest_format;
    $thumbnail['path'] = $dest_path;
    $thumbnail['mimetype'] = $dest_format;

    #mimetype
    if(!$gmimetypes["resolve"][$ext] OR !is_file($file_path)){
        return false;
    }
	$mime = explode("/",trim($mimetype));

	$img = 0;
	if(!file_exists($dest_path) OR $rebuild){

		$out = 1;
		if($mime[0] == "image" OR $mime[1] == "pdf"){
            if ($umgvar["image_processing"] == 'Imagick') {
                if ($mime[1] == "pdf") {
                    $file_path = lmb_createJpegFromPdf($file_path);
                    if (!$file_path) {
                        return false;
                    }
                }

                try {
                    $image = new Imagick($file_path);
                } catch (Exception $e) {
                    return false;
                }

                if ($prop && $size) {
                    $image->autoOrient();
                    $image->thumbnailImage($width, $height, true);
                    $image->setImageBackgroundColor('white');
                    $image->setGravity(Imagick::GRAVITY_CENTER);
                    $image->extentImage(
                        $width,
                        $height,
                        ($image->getImageWidth() - $width) / 2,
                        ($image->getImageHeight() - $height) / 2,
                    );
                } elseif ($size) {
                    $image->resizeImage($width, $height, Imagick::FILTER_LANCZOS, 1);
                }

                if ($dest_format == 'png') {
                    $image->setImageFormat('png');
                } else {
                    $image->setImageFormat('jpeg');
                }
                $image->writeImage($dest_path);
                $image->clear();

            } else {
                $gdImage = lmb_gdGetFromFile($file_path);

                if (!$gdImage) {
                    return false;
                }

                if ($prop && $size) {
                    $gdImage = lmb_gdImageScaleProportional($gdImage, $width, $height);
                    $gdImage = lmb_gdCenterAndExtent($gdImage, $width, $height);
                } elseif ($size) {
                    $gdImage = imagescale($gdImage, $width, $height);
                }

                if ($dest_format == 'png') {
                    imagepng($gdImage, $dest_path);
                } else {
                    imagejpeg($gdImage, $dest_path);
                }
            }

			# watermark
			if($watermark){
				IMACK_Watermark($dest_path,$watermark);
			}

			if(file_exists($dest_path)){
                if($getpath){return $dest_path;}
                if($geturl){return $dest_url;}
                return lmb_getDownloadHash($thumbnail['path'],null,$thumbnail['mimetype']);

                return 'main.php?action=download&thumbnail='.$hash;
			}elseif($file_id){
				IMACK_NoSuccess($file_id);
				return false;
			}
		}else{
			if($file_id){
				IMACK_NoSuccess($file_id);
				return false;
			}
		}
		return false;
	}else{
        if($getpath){return $dest_path;}
        if($geturl){return $dest_url;}
        return lmb_getDownloadHash($thumbnail['path'],null,$thumbnail['mimetype']);
	}

	return false;
}


function IMACK_NoSuccess($file_id){
	global $db;
	
	if(is_numeric($file_id)){
		$sqlquery = "UPDATE LDMS_FILES SET THUMB_OK = ".LMB_DBDEF_FALSE." WHERE ID = $file_id";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
	}
				
}


# ImageMagick create watermark
function IMACK_Watermark($dest,$watermark){
	global $umgvar;
	global $session;
	global $db;
	global $gmimetypes;
	global $filestruct;

	if(file_exists($dest)){
	    
	   if(!$filestruct){get_filestructure();}
	    
		if(is_numeric($watermark)){
		    $level = lmbdb_result($rs1, "SECNAME");
			$sqlquery1 = "SELECT SECNAME,MIMETYPE,LEVEL FROM LDMS_FILES WHERE ID = $watermark";
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
			if(lmbdb_result($rs1, "SECNAME")){
				#$wmark = $umgvar["upload_pfad"].$filestruct['path'][$level].lmbdb_result($rs1, "SECNAME").".".$gmimetypes["ext"][lmbdb_result($rs1, "MIMETYPE")];
                $wmark = lmb_getFilePath($watermark,$level,lmbdb_result($rs1, "SECNAME"),$gmimetypes["ext"][lmbdb_result($rs1, "MIMETYPE")]);
				$cmd = $umgvar["imagemagick"]."/composite -dissolve 25% -gravity northeast $wmark $dest $dest";
				system($cmd,$out);
			}
		}else{
			$cmd = $umgvar["imagemagick"]."/convert $dest -font Arial -pointsize 20 -draw \"gravity northeast fill black  text 0,12 '$watermark' fill white  text 1,11 '$watermark'\"  $dest";
			system($cmd,$out);
		}
	}
}

# ------------- Bildinformationen -------------
function image_info(&$inf){
	unset($picinf);
	for($i=0;$i<=50;$i++){
		$info = explode(": ",$inf[$i]);
		$picinf[lmb_strtolower(trim($info[0]))] = trim($info[1]);
	}
	return $picinf;
}


# suggest font color
function lmbSuggestColor($color,$wc="FFFFFF",$bc="000000"){
	if(!$color){return '';}

	$color = ltrim($color,'#');
    $o = round(((hexdec(lmb_substr($color, 0, 2)) * 299) + (hexdec(lmb_substr($color, 2, 2)) * 587) + (hexdec(lmb_substr($color, 4, 2)) * 114)) / 1000);

    if($o > 125) {
        return "#$bc";
    }else{ 
        return"#$wc";
    }

}


/**
 * recursive List of Groups
 *
 * @param unknown_type $groupid
 * @param unknown_type $direction
 * @param array $grplist
 * @return array
 */
function lmbUserGroupTree($groupid,$direction=1,&$grplist=[]) {
	global $groupdat;

	if($groupid==0) return [];
    
	$grplist[] = $groupid;
	
	foreach($groupdat["name"] as $key => $value){
		$level = intval($groupdat["level"][$key]);
		if($direction==0){# parents
			if($key == $groupid) lmbUserGroupTree($level,$direction,$grplist);
		}elseif($direction==1){# children
			if($level == $groupid) lmbUserGroupTree($key,$direction,$grplist);
		}
	}

	return $grplist;
}








# --- History List ---------
function lhist($lhist){
	foreach($lhist["linkid"] as $key => $value){
		# --- History-Eintrag (history_action) ---------
		$actionid = history_action($lhist["gtabid"][$key][0],$lhist["datid"][$key][0],$key,$lhist["level"][$key][0]);
		if($actionid){
			foreach($lhist['val'][$key] as $key1 => $value1){
				$com = history_update($lhist["gtabid"][$key][0],$lhist["fieldid"][$key][0],$lhist["datid"][$key][0],$actionid,$value1,0);
			}
		}
	}
}

/* --- History-Eintrag (LMB_HISTORY_ACTION) ---------------------------------------- */
function history_action($tabid,$datid,$link_id,$level){
	global $db;
	global $session;
	global $lwf_id;
	global $lwf_inid;
	global $lwf_prid;
	
	if($link_id){
	
		# workflow hack for new instances
		if($lwf_inid == -1){$lwf_inid = $datid;}
		
		if(!$tabid){$tabid = 0;}
		if(!$datid){$datid = 0;}
		$level = parse_db_int($level,1);
		$NEXTID = next_db_id('LMB_HISTORY_ACTION','ID',1);
		$sqlquery1 = "INSERT INTO LMB_HISTORY_ACTION (ID,USERID,TAB,DATAID,ACTION,LOGLEVEL,LWF_ID,LWF_PRID,LWF_INID) VALUES ($NEXTID,".$session["user_id"].",".parse_db_int($tabid,5).",".parse_db_int($datid,16).",".parse_db_int($link_id,5).",".parse_db_int($level,5).",".parse_db_int($lwf_id,2).",".parse_db_int($lwf_prid,2).",".parse_db_int($lwf_inid,16).")";
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
		$GLOBALS["ltmp"]["history_action"] = 1;

		return $NEXTID;
	}else{
		return false;
	}
}

/* --- History-Eintrag (LMB_HISTORY_UPDATE) ---------------------------------------- */
function history_update($tabid,$fieldid,$datid,$actionid,$value,$oldvalue){
	global $db;
	global $session;
	global $umgvar;
	global $lang;
	global $groupdat;
	global $userdat;
	global $gfield;
	global $lwf_id;
	global $lwf_inid;
	global $lwf_prid;

	$data_typ = $gfield[$tabid]["data_type"][$fieldid];
	$field_typ = $gfield[$tabid]["field_type"][$fieldid];

	# --- wysiwyg ----
	if($gfield[$tabid]["wysiwyg"][$fieldid]){
		# html2text
		if($umgvar["use_html2text"]){
			# new value
			$sourceapth = USERPATH.$session["user_id"]."/temp/html2text_n.html";
			$destpath = USERPATH.$session["user_id"]."/temp/html2text_n.txt";
			$rf = fopen($sourceapth,"w");
			fputs($rf,$value);
			fclose($rf);
			if(file_exists($sourceapth)){
				# -style pretty 
				$sys = "html2text -o ".$destpath." ".$sourceapth;
				$out = `$sys`;
				if(file_exists($destpath)){
					$value = file_get_contents($destpath);
				}
			}
			
			# old value
			$sourceapth = USERPATH.$session["user_id"]."/temp/html2text_o.html";
			$destpath = USERPATH.$session["user_id"]."/temp/html2text_o.txt";
			$rf = fopen($sourceapth,"w");
			fputs($rf,$oldvalue);
			fclose($rf);
			if(file_exists($sourceapth)){
				# -style pretty 
				$sys = "html2text -o ".$destpath." ".$sourceapth;
				$out = `$sys`;
				if(file_exists($destpath)){
					$oldvalue = file_get_contents($destpath);
				}
			}
		# strip_tags
		}else{
			$tobr = array("<br />","</tr>","</p>","<br>");
			$value = str_replace($tobr,"\n",$value);
			$oldvalue = str_replace($tobr,"\n",$oldvalue);
			$value = html_entity_decode  (strip_tags($value));
			$oldvalue = html_entity_decode  (strip_tags($oldvalue));
		}
	# --- plain text ----
	}elseif($field_typ == 3){
		$tobr = array(".","!","?");
		$value = str_replace($tobr,"\n",$value);
		$oldvalue = str_replace($tobr,"\n",$oldvalue);
	}

	$value = str_replace("\r\n","\n",$value);
	$oldvalue = str_replace("\r\n","\n",$oldvalue);

	

	// relation
	if($field_typ == 11){
		
	}
	// textarea
	elseif($field_typ == 3){
		$value = textDiff($value,$oldvalue,"short");
	}
	// boolean
	elseif($data_typ == 20){
		if($value){$value = $lang[1506];}else{$value = $lang[1507];}
	}
	// user/Group
	elseif($data_typ == 38){
		$guid = lmb_substr($value,1,6);
		if(lmb_substr($value,0,1) == "u"){
			$guname = "U:".$userdat["bezeichnung"][$guid];
			$value = $userdat['bezeichnung'][$guid];
		}elseif(lmb_substr($value,0,1) == "g"){
			$guname = "G:".$groupdat["beschreibung"][$guid];
			$value = $groupdat['name'][$guid];
		}
    }
    // Validity
    elseif(is_array($value) && $data_typ == 53) {
        if ($value[0] or $value[1]) {
            $value = $value[0] . ' > ' . $value[1];
        }else{
            $value = '';
        }
    }
    // multiselect
	elseif(is_array($value) && ($data_typ == 31 OR $data_typ == 32 OR $data_typ == 18 OR $data_typ == 46)) {
		$value_ = array();
		foreach($value as $key => $val){
			if($val)
			$value_[] = $val;
		}
        if (is_array($value_)) {
		$value = implode("\n",$value_);
        } else {
            $value = '';
        }
    }
    // is Array
	elseif(is_array($value)){
		foreach($value as $key => $val){
			if($val)
			$value_[] = "> ".$val;
		}
        if(is_array($value_)) {
		$value = implode("\n",$value_);
        }else{
            $value = '';
	}
	}


    if(!is_string($value)){
        $value = '';
    }


	# --- History-Eintrag (LMB_HISTORY_UPDATE) --------------
	$NEXTID = next_db_id('LMB_HISTORY_UPDATE','ID',1);
	# ---------- Max länge auf 250 Zeichen reduzieren -----------
	if(lmb_strlen($value) > 990){$value = $value."...";}
	$value = parse_db_string($value,990);
	$sqlquery1 = "INSERT INTO LMB_HISTORY_UPDATE (ID,USERID,TAB,DATAID,FIELD,FIELDVALUE,ACTION_ID,LWF_ID,LWF_PRID,LWF_INID,LMB_MID) VALUES ($NEXTID,".$session["user_id"].",".parse_db_int($tabid,5).",".parse_db_int($datid,18).",".parse_db_int($fieldid,5).",'".$value."',".parse_db_int($actionid,16).",".parse_db_int($lwf_id,2).",".parse_db_int($lwf_prid,2).",".parse_db_int($lwf_inid,16).",".parse_db_int($GLOBALS['lmmultitenants']['mid'][$session['mid']],16).")";
	$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
	if(!$rs1) {return false;}

	return true;


}


/**
 * create side by side diff using gnu sdiff
 * 
 * @param string $value
 * @param string $oldvalue
 * @param number $format - 1 show all - 2 show changed
 * @return string
 */
function gnuDiff($value,$oldvalue,$format=1){
	global $umgvar;
	global $session;

	$path = USERPATH.$session["user_id"]."/temp/";

	$diff1 = fopen($path."diffn","w+");
	fputs($diff1,$value);
	fclose($diff1);
	$diff2 = fopen($path."diffo","w+");
	fputs($diff2,$oldvalue);
	fclose($diff2);
	if($format == 1){
		//$cmd = "diff -EbBaty ".$path."diffo ".$path."diffn";
	    $cmd = "sdiff ".$path."diffo ".$path."diffn";
	}elseif($format == 2){
		$cmd = "sdiff --suppress-common-lines ".$path."diffo ".$path."diffn";
		//$cmd = "diff -EbBaty --suppress-common-lines ".$path."diffo ".$path."diffn";
	}

	$diff = trim(`$cmd`);

	return $diff;
	
}


/**
 * shows diff in table
 * 
 * @param string $target1
 * @param string $target2
 * @param string $name
 * @param string $vcount1
 * @param string $vcount2
 * @param number $format - 1 show all - 2 show changed
 * @param number $coloring - 1 using textDiff
 * @return html
 */
function tableDiff($target1,$target2,$name=null,$vcount1=null,$vcount2=null,$format=1,$coloring=0){
	global $umgvar;
	global $session;
	global $lang;
	global $farbschema;

	//$tobr = array(".","!","?","\r\n"); ?????
	$target1 = str_replace($tobr,"\n",$target1);
	$target2 = str_replace($tobr,"\n",$target2);
	$diff = gnuDiff($target1,$target2,$format);
	if($diff){
		$diffrows = explode("\n",$diff);
		if($diff){
			foreach($diffrows as $key => $value){
				$value = preg_replace("/[ ]{1,}/"," ",$value);
				$value_ = '';
				
				if(lmb_strpos($value,"|")){
				    $value_ = explode('|', $value);
				}elseif(lmb_strpos($value,"\\") !== false){
				    $value_ = explode('\\', $value);
				}elseif(lmb_strpos($value,"/") !== false){
				    $value_ = explode('/', $value);
				}elseif(lmb_strpos($value,">") !== false){
				    $value_ = explode('>', $value);
				}elseif(lmb_strpos($value,"<") !== false){
				    $value_ = explode('<', $value);
				}
				
				$value_[0] = trim($value_[0]);
				$value_[1] = trim($value_[1]);
				
				if($coloring){
				    if($diff = textDiff($value_[0],$value_[1])){
				        $out .= "<TR><TD STYLE=\"border:1px solid #CCCCCC\">".textDiff($value_[0],$value_[1])."</td></tr>";
				    }
				}else{
				    if($vcount1){$out .= "<TR BGCOLOR=\"{$farbschema['WEB7']}\"><TD STYLE=\"border:1px solid #CCCCCC;color:blue;\">$lang[1784] <B>$vcount2</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD STYLE=\"border:1px solid #CCCCCC;color:blue;\">$lang[1784] <B>$vcount1</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD></tr>";}
				    $out .= "<TR><TD STYLE=\"border:1px solid #CCCCCC\">".htmlentities($value_[0],ENT_QUOTES,$umgvar["charset"])."</TD><TD STYLE=\"border:1px solid #CCCCCC\">".htmlentities($value_[1])."</td></tr>";
				}
				
			}
            if ($out) {
                if ($name) {
                    $outh = "<B>" . $name . "</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<SPAN STYLE=\"color:blue\">" . $lang[1784] . "<B> " . $vcount1 . "</B> -> " . $lang[1784] . "<B> " . $vcount2 . "</B></SPAN><BR><hr>";
                }
                $out = $outh."<TABLE BORDER=\"0\" cellspacing=\"0\" cellpadding=\"2\" STYLE=\"border-collapse:collapse;width:100%\">".$outh.$out."</TABLE>\n";
			}
		}
		
		return $out;
	}

}


/**
 *  create colored diff in html format from text
 * 
 * @param string $result1
 * @param string $result2
 * @param string $format
 * @return html
 */
function textDiff($result1,$result2,$format=null){
	global $umgvar;

    include_once LEGACYPATH . 'pear/Text/Diff.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Renderer.php';
    #include_once LEGACYPATH . 'pear/Text/Diff/Renderer/Unified.php';
    #include_once LEGACYPATH . 'pear/Text/Diff/Renderer/Context.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Renderer/Inline.php';
    #include_once LEGACYPATH . 'pear/Text/Diff/Renderer/Unified/Colored.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Util/Util.php';

    require_once LEGACYPATH . 'pear/Text/Diff/Engine/Native.php';
    #require_once LEGACYPATH . 'pear/Text/Diff/Engine/Shell.php';
    #require_once LEGACYPATH . 'pear/Text/Diff/Engine/String.php';
    #require_once LEGACYPATH . 'pear/Text/Diff/Engine/Xdiff.php';

    include_once LEGACYPATH . 'pear/Text/Diff/Op/Base.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Op/Delete.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Op/Add.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Op/Change.php';
    include_once LEGACYPATH . 'pear/Text/Diff/Op/Copy.php';

    $nl = '#**#';

	$hlines1 = explode(" ", str_replace("\n"," ".$nl,$result1));
	$hlines2 = explode(" ", str_replace("\n"," ".$nl,$result2));

	// create the diff object
	$diff = new Horde_Text_Diff('Native', array($hlines1, $hlines2));

	// get the diff in unified format
	// you can add 4 other parameters, which will be the ins/del prefix/suffix tags
	$renderer = new Horde_Text_Diff_Renderer_Inline();
    $output = $renderer->render($diff);

    if(!$output){return false;}

    if($format == "short"){
        $part = preg_replace("%.{0,}(<del.*del>).{0,}%msi","$1",$output);
        if($part !== $output){
            $out[] = $part;
        }
        $part = preg_replace("%.{0,}(<ins.*ins>).{0,}%msi","$1",$output);
        if($part !== $output){
            $out[] = $part;
        }

        if($out){
            return str_replace($nl,"<br>",implode(" ",$out));
        }

    }else{
        $output = str_replace($nl,"<br>",$output);
        return $output;
    }
}


/**
 * create colored diff in html format from array
 * 
 * @param array $result1
 * @param array $result2
 * @return html
 */
function arrayDiff($result1,$result2){

	if(!$result1){$result1 = array();}
	if(!$result2){$result2 = array();}

	if($del = array_diff($result1,$result2)){
		$output = "<del class=\"bg-danger-subtle p-1 mx-1\">".implode("</del><br><del class=\"bg-danger-subtle p-1 mx-1\">",$del)."</del> ";
	}

	if($add = array_diff($result2,$result1)){
		$output .= "<ins class=\"bg-success-subtle p-1 mx-1\">".implode("</ins><br><ins class=\"bg-success-subtle p-1 mx-1\">",$add)."</ins> ";
	}
	
	if($del AND $add){$output .= "<br>";}

	return $output;
}





function historyGetEdituser($gtabid,$fieldid,$datid){
	global $userdat;
	global $db;

	if(!$gtabid OR !$fieldid OR !$datid){return false;}

    // multitenant
    if($umgvar['multitenant'] AND $GLOBALS['lmmultitenants']['mid'][$session['mid']]) {
        $where = " LMB_MID = ".$GLOBALS['lmmultitenants']['mid'][$session['mid']];
    }

	if(LMB_DBFUNC_LIMIT){$limit = LMB_DBFUNC_LIMIT." 2";}
	if(LMB_DBFUNC_ROWNO){$where .= "AND ".LMB_DBFUNC_ROWNO." < 2";}

	$sqlquery = "SELECT USERID FROM LMB_HISTORY_UPDATE WHERE TAB = ".parse_db_int($gtabid,5)." AND FIELD = ".parse_db_int($fieldid,5)." AND DATAID = ".parse_db_int($datid,10)." $where ORDER BY ERSTDATUM DESC $limit";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

	if(lmbdb_fetch_row($rs)){
		$uid = lmbdb_result($rs,"USERID");
		return $userdat["bezeichnung"][$uid];
	}else{
		return false;
	}
}


function get_currency_symbol($currency){
    if($currency == 'EUR'){
        return '€';
	}elseif($currency == 'USD'){
        return '$';
	}
	return false;
}


function fgrep_text($file,$searchval,$m,$w,$i){
	if($searchval){
		foreach ($searchval as $key => $value) {
			$gval[] = preg_quote(lmb_substr($value,0,50));
		}
		if($w){$w = "";}else{$w = "-w";}
		if($i){$i = "";}else{$i = "-i";}
		$gval = implode("\n",$gval);
		$sys = "fgrep -h $i $w -m$m \"$gval\" $file";
		$out = `$sys`;
	}
	return $out;
}

/**
* Dateikonvertierung der Formate: text|word|pdf in reinen Text
* @global umgvar Array Umgebungvariablen
* @global session Array Session
* @param file Dateiname
* @param ext Dateiendung
* @param mimetyp Mimetype
* @return textvalue Ausgabe in plain text
* @internal benötigte externe Scripts:
* EXTENSION - ext_convert2Text() für eigene Erweiterungen
* 
* 
*/
function convert_to_text($file,$ext,$mimetype,$fid,$split,$getstream,$renew,$level,$mid=null){
	global $umgvar;
	global $session;
	global $filestruct;

        if(!$filestruct){get_filestructure();}
        
    	# File-Header
    	if($umgvar["indize_header"] AND $fid){
    		if($meta = getmeta_from_db($fid,1)){
    			$meta = trim(implode("\n",$meta));
    		}
    	}
        
        // build in functions
        if (! $mime = explode('/', $mimetype)) {
            return false;
        }

        # Temporärer txt Pfad
        $resultpath = TEMPPATH . 'txt/'.$file.'.txt';
        $resultpath = lmb_getFilePath($fid,$level, $file,'txt',$mid,3);

        # temporäre Textdatei erneuern
        if($renew){
                if(file_exists($resultpath)){
                        unlink($resultpath);
                }
        }

        # prüfen ob Textdatei schon vorhanden
        if(file_exists($resultpath)){
                if($getstream){return strip_tags(implode("",file($resultpath)));}else{return true;}
        }

        # file to convert to text
        #$inputfile = $umgvar["upload_pfad"].$filestruct['path'][$level].$file.".".$ext;
        $inputfile = lmb_getFilePath($fid,$level,$file,$ext);

        # set output encoding to limbas encoding
        if(lmb_strtoupper($umgvar['charset']) == 'UTF-8') {
            $encoding = 'UTF-8';
        } else {
            $encoding = 'Latin1';
        }

        # apply filters to output
        $filter1 = "tr '\011' ' '";     # tab to one space
        $filter2 = "tr -s ' '";         # multiple spaces to one
        $filter3 = "tr -s '\012\015'";  # multiple newlines to one
        
        # --- PDF ---
        if($mime[1] == "pdf"){

                $sys = "pdftotext -enc \"$encoding\" \"$inputfile\" \"$resultpath\" | $filter1 | $filter2 | $filter3";
                $out = `$sys`;
                
        # --- TEXT/HTML/XML ---
        }elseif($mime[0] == "text"){

                if($umgvar["use_html2text"]){
                        $sys = "html2text -o \"$resultpath\" \"$inputfile\" | $filter1 | $filter2 | $filter3";
                        $out = `$sys`;
                }else{
                        $handle = fopen($inputfile,"r");
                        $rf = fopen($resultpath,"w");
                        while($line = fgets($handle, 100000)){
                                $line = preg_replace("/^[ ]{1,}$/"," ",$line);
                                $textres .= html_entity_decode(strip_tags($line."\n"));
                        }
                        fputs($rf,$textres);
                        fclose($handle);
                        fclose($rf);
                }
        # --- ANYTHING WITH TIKA ENABLED ---
        }elseif($umgvar['indize_tika']){
            # location of the tika jar
            $jarlocation = "/opt/tika/tika.jar";
            
            static $tikaInstalled = false;
            if($tikaInstalled || file_exists($jarlocation)) {         
                $tikaInstalled = true;
                
                # generate command
                $sys = "java -jar $jarlocation --encoding=\"$encoding\" --text \"$inputfile\" | $filter1 | $filter2 | $filter3 > $resultpath";

                # execute
                $out = `$sys`;
            } else {
                error_log("'tika.jar' not found in '/opt/tika/'! Please put it there or deactivate indize_tika in the LIMBAS environment variables!");
            }
        }
        # include extensions
        #if(function_exists('ext_convert2Text')){
        #    if(!$out = ext_convert2Text($fid,$file,$ext,$mimetype,$resultpath)){
        #        return false;
        #    }      


	# --- Text Datei lesen ----------------------------------
	if(file_exists($resultpath)){

		# erfolgreiche konvertierung
		if(!$split){if($getstream){return strip_tags(implode("",file($resultpath)));}else{return true;}}

		# zusätzlich lange Texte splitten
		$maxlen = 100;
		$stream = file($resultpath);
		foreach ($stream as $key => $value){
			if(lmb_strlen($value) > $maxlen){
				$line = explode(" ",$value);
				$part = array_chunk($line,10);
				foreach ($part as $key1 => $value1){
					$partstream[] = implode(" ",$value1);
				}
			}else{
				$partstream[] = $value;
			}
		}
		if($partstream){
			$tf = fopen($resultpath,"w");
			# Metadaten am Anfang einfügen
			if($meta){fputs($tf,$meta."\n");}
			fputs($tf,implode("\n",$partstream));
			fclose($tf);
			if($getstream){return strip_tags(implode("",file($resultpath)));}else{return true;}
		}
	# falls nur Metadaten vorhanden
	}elseif($meta){
		$tf = fopen($resultpath,"w");
		fputs($tf,$meta);
		fclose($tf);
		if($getstream){return strip_tags(implode("",file($resultpath)));}else{return 2;}
	}
	return false;
}

# --- path to URL -----------
function pathToURL($path){

	global $umgvar;

	if($path){
		$url = explode($umgvar["pfad"],$path);
		$url = lmb_substr($url[1],1,100);
	}

	return $url;
}

function mimetype($file)
{
	$fp = popen("file -bin $file","r");

	if(!$fp)
	{
		$mimetype="application/octet-stream";
	}
	else
	{
		while($string=fgets($fp, 1024))
		{
			$mimetype .= $string;
		}
		pclose($fp);
	}
	return $mimetype;
}


/**
 * set date format
 *
 * @param number $format
 * @param number $cl 0=date, 1=DateClass, 2=Datepicker, 3=DateTime/Export
 * @return string format
 */
function setDateFormat($format,$cl=0,$country=null){

	if(!$country) {
        $country = $GLOBALS['session']["dateformat"];
    }

    $format = intval($format);
    $cl = intval($cl);
    $country = intval($country);

    return match ($country) {
        // DE
        1 => match ($format) {
            1 => match ($cl) {
                1 => "d.m.Y",
                2 => "dd.mm.yy",
                default => "%d.%m.%Y",
            },
            2 => match ($cl) {
                1 => "l - j F Y",
                2 => "DD - m MM yy",
                default => "%A - %e %B %Y",
            },
            3 => match ($cl) {
                1 => "l d.m.y H:i",
                2 => "DD - dd.mm.y HH:mm",
                default => "%A %d.%m.%y %H:%M",
            },
            4 => match ($cl) {
                1 => "d.m.Y H:i",
                2 => "dd.mm.yy HH:mm",
                default => "%d.%m.%Y %H:%M",
            },
            default => match ($cl) {
                1 => "d.m.Y H:i:s",
                2 => "dd.mm.yy HH:mm:ss",
                default => "%d.%m.%Y %H:%M:%S",
            },
        },
        // US
        2 => match ($format) {
            1 => match ($cl) {
                1 => "Y-m-d",
                2 => "yy-mm-dd",
                default => "%Y-%m-%d",
            },
            2 => match ($cl) {
                1 => "l - Y F j",
                2 => "DD - yy MM d",
                default => "%A - %Y %B %e",
            },
            3 => match ($cl) {
                1 => "l y-m-d H:i",
                2 => "DD y-mm-dd HH:mm",
                default => "%A %y-%m-%d %H:%M",
            },
            4 => match ($cl) {
                1 => "Y-m-d H:i",
                2 => "yy-mm-dd HH:mm",
                default => "%Y-%m-%d %H:%M",
            },
            default => match ($cl) {
                1 => "Y-m-d H:i:s",
                2 => "yy-mm-dd HH:mm:ss",
                default => "%Y-%m-%d %H:%M:%S",
            },
        },
        //FRA
        3 => match ($format) {
            1 => match ($cl) {
                1 => "m-d-Y",
                2 => "mm-dd-yy",
                default => "%m-%d-%Y",
            },
            2 => match ($cl) {
                1 => "l - F j Y",
                2 => "DD - MM d yy",
                default => "%A - %B %e %Y",
            },
            3 => match ($cl) {
                1 => "l m-d-y H:i",
                2 => "DD mm-dd-y HH:mm",
                default => "%A %m-%d-%y %H:%M",
            },
            4 => match ($cl) {
                1 => "m-d-Y H:i",
                2 => "mm-dd-yy HH:mm",
                default => "%m-%d-%Y %H:%M",
            },
            default => match ($cl) {
                1 => "m-d-Y H:i:s",
                2 => "mm-dd-yy HH:mm:ss",
                default => "%m-%d-%Y %H:%M:%S",
            },
        },
    };
}

function add_oneday($stamp){
    return mktime(0,0,0,date('m',$stamp),date('d',$stamp) + 1,date('Y',$stamp));
}
function drop_oneday($stamp){
    return mktime(0,0,0,date('m',$stamp),date('d',$stamp) - 1,date('Y',$stamp));
}

function dateStringToDatepicker($dateString)
{
	$pattern = array(

	//day
	'd',	//day of the month
	'j',	//3 letter name of the day
	'l',	//full name of the day
	'z',	//day of the year

	//month
	'F',	//Month name full
	'M',	//Month name short
	'n',	//numeric month no leading zeros
	'm',	//numeric month leading zeros

	//year
	'Y', //full numeric year
	'y',	//numeric year: 2 digit
	
	//Time
	'H', 
	'i',
	's'
	);
	$replace = array(
	'dd','d','DD','o',
	'MM','M','m','mm',
	'yy','y','HH','mm','ss'
	);
	foreach($pattern as &$p)
	{
		$p = '/'.$p.'/';
	}
	return preg_replace($pattern,$replace,$dateString);
}

/**
 * Encodes string to UTF-8
 *
 * @param string $value
 * @return string
 */
function lmb_utf8_encode($value){
    return iconv($GLOBALS["umgvar"]["charset"],"UTF-8//IGNORE",$value);
}

/**
 * Decode string to charset
 *
 * @param string $value
 * @return string
 */

/*
function lmb_utf8_decode($value){
    return iconv("UTF-8",$GLOBALS["umgvar"]["charset"].'//IGNORE',$value);
}
*/

/*
function lmb_arrayDecode(array $array,$toISO=null) {
	if($GLOBALS["umgvar"]["charset"] == "UTF-8"){return $array;}
	$convertedArray = array();
	foreach($array as $key => $value) {
		if(is_array($value)){
			$value = lmb_arrayDecode($value,$toISO);
		}else{
			if(!is_numeric($value)){
				if($toISO){
					$value = iconv("UTF-8",$GLOBALS["umgvar"]["charset"],$value);
				}else{
					$value = lmb_utf8_encode($value);
				}
			}
		}
		$convertedArray[$key] = $value;
	}
	return $convertedArray;
}
*/

# check if UTF-8
function lmb_utf8_check($value) {
    return (iconv('UTF-8', 'UTF-8', $value) == $value);
}


/**
 * Encodes utf8 to unicode
 *
 * @param string $value
 * @return string
 */
/*
function utf8ToUnicode ($source) {
   // array used to figure what number to decrement from character order value
   // according to number of characters used to map unicode to ascii by utf-8
   $decrement[4] = 240;
   $decrement[3] = 224;
   $decrement[2] = 192;
   $decrement[1] = 0;

   // the number of bits to shift each charNum by
   $shift[1][0] = 0;
   $shift[2][0] = 6;
   $shift[2][1] = 0;
   $shift[3][0] = 12;
   $shift[3][1] = 6;
   $shift[3][2] = 0;
   $shift[4][0] = 18;
   $shift[4][1] = 12;
   $shift[4][2] = 6;
   $shift[4][3] = 0;

   $pos = 0;
   $len = lmb_strlen ($source);
   $encodedString = '';
   while ($pos < $len) {
       $asciiPos = ord (substr ($source, $pos, 1));
       if (($asciiPos >= 240) && ($asciiPos <= 255)) {
           // 4 chars representing one unicode character
           $thisLetter = substr ($source, $pos, 4);
           $pos += 4;
       }
       else if (($asciiPos >= 224) && ($asciiPos <= 239)) {
           // 3 chars representing one unicode character
           $thisLetter = substr ($source, $pos, 3);
           $pos += 3;
       }
       else if (($asciiPos >= 192) && ($asciiPos <= 223)) {
           // 2 chars representing one unicode character
           $thisLetter = substr ($source, $pos, 2);
           $pos += 2;
       }
       else {
           // 1 char (lower ascii)
           $thisLetter = substr ($source, $pos, 1);
           $pos += 1;
       }

       // process the string representing the letter to a unicode entity
       $thisLen = lmb_strlen ($thisLetter);
       $thisPos = 0;
       $decimalCode = 0;
       while ($thisPos < $thisLen) {
           $thisCharOrd = ord (substr ($thisLetter, $thisPos, 1));
           if ($thisPos == 0) {
               $charNum = intval ($thisCharOrd - $decrement[$thisLen]);
               $decimalCode += ($charNum << $shift[$thisLen][$thisPos]);
           }
           else {
               $charNum = intval ($thisCharOrd - 128);
               $decimalCode += ($charNum << $shift[$thisLen][$thisPos]);
           }

           $thisPos++;
       }

       if ($thisLen == 1)
           $encodedLetter = "&#". str_pad($decimalCode, 3, "0", STR_PAD_LEFT) . ';';
       else
           $encodedLetter = "&#". str_pad($decimalCode, 5, "0", STR_PAD_LEFT) . ';';

       $encodedString .= $encodedLetter;
   }

   return $encodedString;
}
*/



/**
 * display a string with a specified maximum lenght
 * for example: "my string" and 5 will display "my st..."
 *
 * @param unknown_type $string the string to display
 * @param unknown_type $size the size of the string to dispay
 * @return unknown hte string cut if needed
 */
function string_dispSubstr($string,$size)
{
	if(lmb_strlen($string)>$size)
		return lmb_substr($string,0,$size)."...";
	else
		return $string;
}

/**
 * Return the number of record for a specified snapshot
 *
 *
 * @param unknown_type $snapid the snapshot id that we want to have the count
 */
function getCountForSnapshot($snapid){
	global $gsr;
	$null = null;

	require_once(COREPATH . 'extra/snapshot/snapshot.lib');
	require_once(COREPATH . 'gtab/gtab.lib');

	$snapdetail = SNAP_getParam($snapid);
	$tabid = $snapdetail["tabid"];

	$filter = unserialize($snapdetail["filter"]);

	$mygsr[$tabid] = $filter["gsr"];

	$gresult = get_gresult($gtabid,1,$null,$mygsr,$null);

	return $gresult[$tabid]["res_count"];
}

/**
 * get an array of ids in a snapshot
 *
 * @param unknown_type $snapid
 */
function getAllIdFromSnapshot($snapid){
	global $gsr;
	$null = null;

	require_once(COREPATH . 'extra/snapshot/snapshot.lib');
	require_once(COREPATH . 'gtab/gtab.lib');

	$snapdetail = SNAP_getParam($snapid);
	$tabid = $snapdetail["tabid"];

	$filter = unserialize($snapdetail["filter"]);

	$mygsr[$tabid] = $filter["gsr"];

	$gresult = get_gresult($gtabid,1,$null,$mygsr,$null);


	return $gresult[$tabid]["id"];
}


/**
 * get the user id of the user that has created the record
 *
 * @param unknown_type $tabid
 * @param unknown_type $recordid
 * @return unknown the ID of the user
 */
function getFirstUserForRecord($tabid,$recid){
	global $db;
	global $action;
	global $gtab;

	$tabname = $gtab["table"][$tabid];

	$sqlquery = "select ERSTUSER from $tabname where ID = $recid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(lmbdb_fetch_row($rs)){
		return lmbdb_result($rs,"ERSTUSER");
	}
}


function USER_getDisplay($userid){


	global $action;
	global $db;

	if($userid){
		$sqlquery = "select VORNAME,NAME from LMB_USERDB where USER_ID = $userid";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(lmbdb_fetch_row($rs)){
			return lmbdb_result($rs,"VORNAME") . " " . lmbdb_result($rs,"NAME");
		}
	}
}

function USER_display($userList,$carriageReturn = "<BR>"){


	$userList = explode(";",$userList);

	if($userList){
		foreach ($userList as $key => $id) {
			if($id){
				$id = lmb_substr($id,1);
				$result[] = USER_getDisplay($id);
			}
		}
		return implode($carriageReturn,$result);
	}
}

# Transaktion Start
function lmb_StartTransaction($has_schema=null){

    if(!LMB_DBFUNC_TRANSACTION){return true;}

    // mysql / oracle not support transactions with editing schemas
    if($has_schema AND !LMB_DBFUNC_TRANSACTION_WITH_SCHEMA){
        $GLOBALS["lmb_transaction"] = 100;
        return true;
    }

	global $db;
	
	if($GLOBALS["lmb_transaction"]){
		$GLOBALS["lmb_transaction"]++;
		return false;
	}else{
		$GLOBALS["lmb_transaction"]++;
	}

	lmbdb_autocommit($db, 0);
	return true;
}

# Transaktion Ende
function lmb_EndTransaction($success,$message=null, $showAlerts = true){
	global $db;
	global $lang;
	global $alert;

    if(!LMB_DBFUNC_TRANSACTION){return true;}

	$GLOBALS["lmb_transaction"]--;

	if($GLOBALS["lmb_transaction"]){
		return false;
	}

	if($success){
		lmbdb_commit($db);
		if($message AND $message != 'none') {
            lmb_alert($message);
        }
	} else {
		lmbdb_rollback($db);
        if($message != 'none') {
            if(!$alert){
				lmb_alert($lang[56]);
				lmb_alert($lang[115]);
			}
			if($message){
                lmb_alert($message);
            }
		}
	}
	lmbdb_autocommit($db, 1);
}


# simple odbc tablelist
function ODBCResourceToHTML($res, $sTable, $sRow, $numrows=100){
	$cFields = lmbdb_num_fields($res);
	if ($cFields == 0) {
	    return '';
    }

	$bzm = 1;
	while(lmbdb_fetch_row($res)){

	    if($bzm == 1) {
            $strTable = "<table $sTable ><thead><tr><th>nr</th>";
            for ($n = 1; $n <= $cFields; $n++) {
                $strTable .= "<th nowrap $sRow>" . str_replace("_", " ", lmbdb_field_name($res, $n)) . "</th>";
            }
            $strTable .= "</tr></thead><tbody>";
        }

		$strTable .= "<tr><td>$bzm</td>";
		for ($n=1; $n<=$cFields; $n++) {
		    $cell = htmlentities(lmbdb_result($res, $n),ENT_QUOTES,$GLOBALS["umgvar"]["charset"]);
		    if ($cell=='') {$strTable .= "<td $sRow>&nbsp;</td>";}
		    else {$strTable .= "<td $sRow>". $cell . "</td>";}
		}
		$strTable .= "</tr>";
		$bzm++;
		if($bzm > $numrows){break;}
	}
	$strTable .= "<tbody></table>";
	return $strTable;
}


/**
 * @param string $elementId ID of the base textarea/element for the wysiwyg
 * @param int|null $height
 * @param int|null $tabId
 * @param string|null $changeEvent
 * @param TinyMce|null $tinyMce
 * @return string
 */
function lmbInitTinyMce(string $elementId, ?int $height = null, ?int $tabId = null, ?string $changeEvent = null, ?TinyMce $tinyMce = null): string
{
    if(empty($tinyMce)) {
        $tinyMce = new TinyMce($elementId, $tabId);    
    }
    
    if(!empty($height)) {
        $tinyMce->setHeight($height);
    }

    if(!empty($changeEvent)) {
        $tinyMce->setOnChangeEvent($changeEvent);
    }

    return $tinyMce->getConfigurationScript();
}

/**
 * @deprecated Use lmbInitTinyMce or TinyMce class instead.
 * 
 * @param string $elementId ID of the base textarea/element for the wysiwyg
 * @param string $params deprecated string of PHP that returns user-specified params
 * @param string|null $changeEvent JS to be executed on change
 * @param int|array $advanced deprecated, 1 for more advanced controls, array overwites $params (?)
 * @param int|null $height
 * @param int|null $tabId
 * @return string JS initializing the wysiwyg editor
 *
 */
function lmb_ini_wysiwyg(string $elementId, $params=null, ?string $changeEvent = null, $advanced=null, int $height = null, int $tabId = null): string
{
    trigger_error('Method ' . __METHOD__ . ' is deprecated. Use lmbInitTinyMce or TinyMce class instead.', E_USER_DEPRECATED);
    
    $tinyMce = new TinyMce($elementId, $tabId);

    if(!empty($height)) {
        $tinyMce->setHeight($height);
    }

    if(!empty($changeEvent)) {
        $tinyMce->setOnChangeEvent($changeEvent);
    }

    return lmbInitTinyMce($elementId, $height, $tabId, $changeEvent);
}


/**
 * log entry
 *
 * @param unknown_type $logfile
 * @param unknown_type $msg
 * @param int $time
 */
function lmb_loghandle($logfile,$msg,$time=null){
	global $umgvar;
    
    //error_log(print_r($umgvar,1));
	
	# open Logfiles
	if(!$logfile){
		$logfile = 'limbas.log';
	}
    
    $logfile = TEMPPATH . "log/$logfile";
    if(is_writable($logfile)) {
        $log = fopen($logfile,'a');
        if($time){
            $time_now = gettime();
            $time = number_format((($time_now - $time)/60),1,'.','')." min. : ";
        }
        if ($log) {
            fputs($log,date('Y-m-d H:i:s').' : '.$time.$msg."\n");
            fclose($log);
        }        
    }
	
    
}


function lmb_getRowColor(){
	static $bzm;
	global $farbschema;
	
	$bzm++;
	
	if ($bzm&1){return $farbschema['WEB13'];}else{return $farbschema['WEB14'];}
}


# ---------- Spaltenbreiten ----------------
function lmbGetGtabWidth($gtabid,&$filter){
	global $gfield;
	
	$difhc = $gfield[$gtabid]["rowsize"][0]+2;
	foreach ($gfield[$gtabid]["sort"] as $key => $value){
		if($filter[$key] OR $gfield[$gtabid]["field_type"] >= 100){continue;}
		$difhc += $gfield[$gtabid]["rowsize"][$key]+4;
	}
	$filter[0] = $difhc;
	return $difhc;
}

function lmbGetMenuSetting(){
	global $db;
	global $session;
	
	$sqlquery = "SELECT M_SETTING FROM LMB_USERDB WHERE USER_ID = ".$session["user_id"];
	if($rs = lmbdb_exec($db,$sqlquery)){
		return unserialize(lmbdb_result($rs, "M_SETTING"));
	}
}


/**
 * @param $to
 * @param $from
 * @param $subject
 * @param $message
 * @param $attachment
 * @param $IsHTML
 * @param $SMTP
 * @return void
 * @deprecated use LmbMail->send instead
 */
function lmb_PHPMailer($to, $from, $subject, $message, $attachment=null, $IsHTML=null, $SMTP=null): void
{
    trigger_error('Method ' . __METHOD__ . ' is deprecated. Use LmbMail->send instead.', E_USER_DEPRECATED);
}


/** send Mail with attachment
 * @param string $to
 * @param string $from
 * @param string $subject
 * @param string $message
 * @param $attachment / array $attachment
 * @param string $cc / array $cc
 * @param string $bcc / array $bcc
 * @deprecated use LmbMail->send instead
 */
function lmb_sendMail($to,$from,$subject,$message,$attachment=null,$cc=null,$bcc=null): void
{
    trigger_error('Method ' . __METHOD__ . ' is deprecated. Use LmbMail->send instead.', E_USER_DEPRECATED);

    $lmbMail = new LmbMail();    
    $fromAccount = new MailAccount('',$from, MailAccount::TRANSPORT_SENDMAIL);
    $lmbMail->send($fromAccount, $to, $subject,$message, $attachment,$cc, $bcc);
}


// download progres status
function lmb_ajaxProgresStatus($total,$progress){
	static $buffer;
	static $lastprogr;
	
	# flush buffer
	if(!$buffer){
		ob_end_clean();
		ob_end_clean();
		ob_implicit_flush(true);
		header('Content-Length: 100');
	}
	
	
	$p = round(($progress/$total)*100);
	
	if($p > $lastprogr){
		$buffer = $p - $lastprogr;
		$lastprogr = $p;
		
		# in bytes
		for($i=1;$i<=$buffer;$i++){
			$out = $out.'1';
		}
		
		echo $out;
	}

}

/**
 * Generates and stores a unique auth token for the current user
 * @param int $lifespan the number of times the token may be used
 * @return bool|string the token or false on failure
 */
function lmbGenerateAuthToken($lifespan=1) {
    global $session;
    global $db;
    global $action;

    $token = bin2hex(openssl_random_pseudo_bytes(32));
    $userID = parse_db_int($session['user_id']);
    $lifespan = parse_db_int($lifespan);
    $expireStamp = dbf_1(time() + 60 * 5 /* expires in 5 minutes */);

    # delete expired auth tokens
    $sqlquery = 'DELETE FROM LMB_AUTH_TOKEN WHERE EXPIRESTAMP < ' . LMB_DBDEF_TIMESTAMP;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

    # insert new token
    $sqlquery = "INSERT INTO LMB_AUTH_TOKEN (TOKEN, USER_ID, LIFESPAN, EXPIRESTAMP) VALUES ('$token', $userID, $lifespan, '$expireStamp')";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

    if ($rs) {
        return $token;
    } else {
        return false;
    }
}

/**
 * Checks if the given auth token is valid and, if it is, returns the corresponding user id
 * @param $auth_token string auth token generated by lmbGenerateAuthToken
 * @return int|false the limbas user_id or false on error
 * @see lmbGenerateAuthToken
 */
function lmbGetAuthTokenUser($auth_token) {
    global $db;
    global $action;

    # check token exists
    $sqlquery = "SELECT USER_ID, EXPIRESTAMP, LIFESPAN FROM LMB_AUTH_TOKEN WHERE TOKEN = '$auth_token'";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    if (!lmbdb_fetch_row($rs)) {
        return false;
    }

    # check token not expired
    $expireStamp = lmbdb_result($rs, 'EXPIRESTAMP');
    $lifespan = lmbdb_result($rs, 'LIFESPAN');
    if ((strtotime($expireStamp) - time()) <= 0 OR $lifespan < 1) {
        $sqlquery = "DELETE FROM LMB_AUTH_TOKEN WHERE TOKEN='$auth_token'";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        return false;
    }

    # decrease lifespan
    if ($lifespan == 1) {
        $sqlquery = "DELETE FROM LMB_AUTH_TOKEN WHERE TOKEN='$auth_token'";
        lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    } else {
        $sqlquery = "UPDATE LMB_AUTH_TOKEN SET LIFESPAN=LIFESPAN-1 WHERE TOKEN = '$auth_token'";
        lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    }
    if ($user_id = lmbdb_result($rs, 'USER_ID')) {
        return $user_id;
    }
    return false;
}



/**
 * Prints a file on the specified printer
 *
 * @param $printerID int ID from LMB_PRINTER
 * @param $file string full path to a file
 * @return bool success
 */
function lmbPrint($printerID, $file = null, $fileID = false, bool $forcePrint = false, array $printerOptions = []): bool
{
    global $gprinter;
    global $umgvar;

    require_once(COREPATH.'extra/explorer/filestructure.lib');

    if(!$GLOBALS['LINK'][304]){
        lmb_log::error('permission deny for printing documents');
        return false;
    }

    # check if printer in session
    if (!array_key_exists($printerID, $gprinter)) {
        lmb_log::error("Printer $printerID not valid!");
        return false;
    }

    // get filepath from ID and check permission
    if($forcePrint AND is_numeric($fileID)) {
        $file = file_download($fileID)['path'];
        if (!$file) {
            lmb_log::error("File has no permission!");
            return false;
        }
    }

    # check if file exists
    if (!file_exists($file)) {
        lmb_log::error("File does not exist!");
        return false;
    }

    // send to printer cache
    if(!$forcePrint && $fileID && $umgvar['printer_cache']){
        return lmb_printToCache($fileID,$printerID);
    }

    # no config?
    $config = $gprinter[$printerID]['config'];
    if (!$config) {
        $config = '';
    }

    // Standard Printing Options
    if($printerOptions){
        foreach($printerOptions as $option => $value){
            // num-copies
            if($option == 'pageCount' && is_numeric($value) && $value > 1){
                $config .= " -n $value -o collate=true";
            }
        }
    }

    # print
    exec('lp ' . strval($umgvar['lp_params']) . " -d {$gprinter[$printerID]['sysName']} {$config} '$file'", $outputLines, $exitCode);
    #exec('lp ' . strval($umgvar['lp_params']) . " -d test123 {$config} '$file'", $outputLines, $exitCode);

    if(is_array($outputLines) AND count($outputLines)){
        $outputLines = print_r($outputLines, true);
    }else{
        $outputLines = '';
    }

    # handle errors
    if ($exitCode != 0) {
        lmb_log::error("Could not print on printer {$printerID}: Exit code {$exitCode}, Output: " . print_r($outputLines, true));
        return false;
    }

    return true;
}

class lmb_log
{
    /**
     * @var array   $log    Holds information about the last logged errors
     */
    private static $log = array();

    /**
     * Instantiation not allowed
     */
    private function __construct() {
        throw new Exception("Instantiation not allowed");
    }

    /**
     * Logs an error:
     * - into $log array,
     * - to error_log (if $session['debug'] is true)
     * - and shows the user (if $userMessage is set)
     * @param string    $errorMessage   The message to log
     * @param string    $userMessage    Is shown to the user, if set
     * @param number    $tabid          Id of current table
     * @param number    $fieldid        Id of current field
     * @param number    $datid          Id of current dataset
     * @param number    $level          level - 3 = no error_log
     */
    public static function error($errorMessage, $userMessage=null, $tabid=null, $fieldid=null, $datid=null, int $level=E_ERROR) {
        global $session;
        global $lang;
        global $gtab;
        global $gfield;
        global $umgvar;

        // error log
        if ($session['debug']) {
            try {
                throw new Exception();
            } catch (Exception $e) {
                $trace = str_replace(str_replace("/dependent", "", rtrim($umgvar['path'], "/")), "", $e->getTraceAsString());
                error_log(/*local_date(0) .*/"$errorMessage (tabid: $tabid, fieldid: $fieldid, datid: $datid), at:\n$trace");
            }
        }

        $error = false;
        if($level === E_ERROR) {
            // collect log messages as array
            self::$log[] = array(
                'message' => $errorMessage,
                'tabid' => $tabid,
                'fieldid' => $fieldid,
                'datid' => $datid
            );
            $error = 1;
        }

        // user alert
        if ($userMessage AND !defined('IS_SOAP') AND !defined('IS_CRON') AND !defined('LMB_SYNC_PROC')) {
            // add table name
            if ($tabid) {
                if(is_numeric($tabid)) {
                    $tabname = $gtab['table'][$tabid];
                    $userMessage .= "\n - " . $lang[164] . ": " . $tabname;
                }
                if(is_numeric($fieldid)) {
                    $fieldname = $gfield[$tabid]['spelling'][$fieldid];
                    $userMessage .= "\n - " . $lang[168] . ": " . $fieldname;
                }
              
                // add datid
                if ($datid) {
                    $userMessage .= "\n - " . $lang[722] . ": " . $datid;
                }
                $userMessage .= "\n";
            }
              
            lmb_alert($userMessage,$error);
        }
    }

    /**
     * Returns the $log array
     * @param bool $clearLog    Clear the log afterwards
     * @return array            [{'message', 'tabid', 'fieldid', 'datid'}]
     */
    public static function getLog($clearLog=false) {
        $l = self::$log;
        if ($clearLog) {
            self::$log = array();
        }
        return $l;
    }

    /**
     * Returns only the connected message of all log enties
     * @param bool $clearLog
     * @param string $delimiter
     * @return string
     */
    public static function getLogMessage($clearLog=false,$delimiter="\n") {
        $message = '';
        foreach (self::$log as $entry){
            $message .= $entry['message'].$delimiter;
        }
        if ($clearLog) {
            self::$log = array();
        }
        return $message;
    }



    /**
     * Clears the $log array
     */
    public static function clearLog() {
        self::$log = array();
    }

}

/**
 * Helper for defining getters whose value should be cached in the session
 * @param string $key the key under which the value should be stored -> $session[$key]
 * @param callable $getter returns the value which is stored in the session
 * @return mixed the cached value
 */
function cachedSessionProperty($key, $getter) {
    global $session;
    if (!array_key_exists($key, $session)) {
        $session[$key] = $getter();
    }
    return $session[$key];
}


/**
 * encrypts given string
 *
 * @param $string
 * @return string
 */
function lmb_encrypt($string) {
    global $umgvar;

    $iv  = bin2hex(openssl_random_pseudo_bytes(openssl_cipher_iv_length($umgvar['enc_cipher'])));
    $key = hex2bin(hash('sha256', LMB_ENC_KEY));

    return $iv.base64_encode(openssl_encrypt($string, $umgvar['enc_cipher'], $key, 0, $iv));
}

/**
 * decrypts given string
 *
 * @param $string
 * @return string
 */
function lmb_decrypt($string) {
    global $umgvar;

    $ivlen     = openssl_cipher_iv_length('AES-256-CBC')*2;
    $iv        = substr($string,0,$ivlen);
    $encrypted = substr($string,$ivlen);

    $key = hex2bin(hash('sha256', LMB_ENC_KEY));

    return openssl_decrypt(base64_decode($encrypted), $umgvar['enc_cipher'], $key, 0, $iv);
}

/**
 * Creates where clause filtering the specified postgres tsvector field for the search words
 * @param $searchWords array of string
 * @param $mode string 'and', 'or' or 'phrase'
 * @param $langField string identifier of regconfig field that specifies the lang
 * @return string where clause
 * @see postgresAddFtsFields()
 */
function postgresGetFtsQuery($searchWords, $mode, $langField) {
    global $umgvar;

    $searchWords = array_map('parse_db_string', $searchWords);
    if (!$mode) {
        $mode = 'and';
    }
    switch ($mode) {
        case 'and':
            $search = implode('&', $searchWords);
            $func = 'to_tsquery';
            break;
        case 'or':
            $search = implode('|', $searchWords);
            $func = 'to_tsquery';
            break;
        case 'phrase':
            $search = implode(' ', $searchWords);
            $func = 'phraseto_tsquery';
            break;
    }

    if (postgresFtsLangColNeeded()) {
        $indizeLang = "{$langField}::REGCONFIG";
    } else {
        $indizeLang = "'{$umgvar['postgres_indize_lang']}'";
    }

    return "{$func}({$indizeLang}, '{$search}')";
}


/**
 * Determines whether a fts_lang field is needed to determine the indexed vector's language
 * Returns true if $umgvar['postgres_indize_lang'] is 'all' or a list of languges (e.g. 'german,english')
 * @return bool
 */
function postgresFtsLangColNeeded() {
    global $umgvar;
    static $needed = null;

    if ($needed === null) {
        $lang = array_key_exists('postgres_indize_lang', $_SESSION['umgvar']) ? $_SESSION['umgvar']['postgres_indize_lang'] : $umgvar['postgres_indize_lang'];
        $needed = lmb_strpos($lang, ',') !== false || trim($lang) === 'all';
    }
    return $needed;
}


# --- User Verzeichnis hinzufügen -------
function create_user_folder($ID){
    global $umgvar;

	if(!file_exists(USERPATH . $ID)){
		$sys1 = mkdir(USERPATH . $ID,0777);
		$sys1 = mkdir(USERPATH."$ID/temp",0777);
		$sys1 = mkdir(USERPATH."$ID/settings",0777);
    }
    
	if(!file_exists(USERPATH."$ID/temp")){
		$sys1 = mkdir(USERPATH."$ID/temp",0777);
	}
	if(!file_exists(USERPATH."$ID/settings")){
		$sys1 = mkdir(USERPATH."$ID/settings",0777);
	}

	return file_exists(USERPATH."$ID");
}

/**
 * Returns the session language in 2 letters (e.g. de/en)
 * @return string
 */
function getLangShort() {
    global $session;
    switch ($session['language']) {
        case 1: return 'de';
        case 2: return 'en';
        case 3: return 'es';
        case 4: return 'fr';
        default: return 'en';
    }
}

/**
 * Returns whether the user has selected a dark layout
 * @return bool
 */
function lmbIsDarkLayout() {
    global $farbschema;
    return lmb_strpos($farbschema['NAME'], 'dark') !== false;
}

/**
 * Counts all elements in an array, or something in an object
 * @return int
 */
function lmb_count($value) {
    $count = 0;
    if (is_array($value) || is_countable($value)) {
        $count = count($value);
    }
    return $count;
}


if (! function_exists('e')) {
    /**
     * Encode HTML special characters in a string.
     *
     * @param string|null $value
     * @return string
     */
    function e(?string $value)
    {
        return htmlentities($value ?? '', encoding: 'UTF-8');
    }
}

if (!function_exists('getenv_docker')) {

    /**
     * get an environment variable
     * @param $env
     * @param $default
     * @return array|false|mixed|string
     */
    function getenv_docker($env, $default) {
        if ($fileEnv = getenv($env . '_FILE')) {
            return rtrim(file_get_contents($fileEnv), "\r\n");
        }
        else if (($val = getenv($env)) !== false) {
            return $val;
        }
        else {
            return $default;
        }
    }
}
