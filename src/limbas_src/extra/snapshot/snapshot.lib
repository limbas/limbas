<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */






/**
 * Invalidate the snapshot in the session in order to be reloaded
 *
 */
function SNAP_invalidate(){
	global $db;
	global $action;

	$sqlquery = "UPDATE LMB_SESSION SET SNAP_CHANGED = ".LMB_DBDEF_TRUE;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
}


function filter_reset($gtabid=null){
	#$GLOBALS['filter'] = null;
	if($gtabid){
    	$GLOBALS['popc'][$gtabid] = null;
    	$GLOBALS['popg'][$gtabid] = null;
    	$GLOBALS['gs'][$gtabid] = null;
    	$GLOBALS['gsr'][$gtabid] = null;
    	$GLOBALS["filter"]["hidecols"][$gtabid] = null;
    	$GLOBALS["filter"]["order"][$gtabid] = null;
	}else{
    	$GLOBALS['popc'] = null;
    	$GLOBALS['popg'] = null;
    	$GLOBALS['gs']= null;
    	$GLOBALS['gsr'] = null;
    	$GLOBALS["filter"]["hidecols"] = null;
    	$GLOBALS["filter"]["order"] = null;
	}
	$GLOBALS['filter']['reminder_from'] = null;
	$GLOBALS['filter']['reminder_to'] = null;
	$GLOBALS['filter']['reminder_create'] = null;
	$GLOBALS['view_version_status'] = null;
}


# already done in gtab_array.lib (SNAP_loadInSession)

/**
 * validate snapshot fields against existing fields
 *
 * @return snapshot
 */
/*
function SNAP_revalidate($snapshot,$gtabid,$snapid){
	global $db;
	global $gfield;
	global $session;
	global $gsnap;
	
	
	if(!$owner = $gsnap[$gtabid]["owner"][$snapid] AND $session["user_group"] != 1){return false;}

	$snap = unserialize($snapshot);

	# filter order (delete not existing order field)
	if($snap["order"]){
		$order = explode("&",$snap["order"]);
		if(!$gfield[$order[0]]["sort"][$order[1]]){
			#unset($snap["hidecols"]);
			$update = 1;
		}
	}

	# filter sort (add new field if not exist)

	if($snap["sort"]){
		$maxval = max($snap["sort"]);
		foreach ($gfield[$gtabid]["sort"] as $key => $value){
			$maxval++;
			if(!$snap["sort"][$key]){
				$snap["sort"][$key] = $maxval;
				$snap["hidecols"][$key] = 1;
				$update = 1;
			}
		}

	# other filter must come!!
	
	$snapshot = serialize($snap);

	if($update){
		$prepare_string = "UPDATE LMB_SNAP SET FILTER = ? WHERE ID = ".$snapid." AND USER_ID = " . $session["user_id"];
		if(!lmb_PrepareSQL($prepare_string,array($snapshot),__FILE__,__LINE__)){$commit = 1;}
	}

	return $snapshot;
}
*/

/**
 * validate snapshot fields against existing fields
 *
 * @return snapshot
 */
/*
function SNAP_validate($gtabid,&$snapfilter){
	global $db;
	global $gfield;
	global $session;
	global $gsnap;

	#$GLOBALS["gfield"][$gtabid]["sort"] = $snapfilter["sort"];
	# filter order (delete not existing order field)
	if($snapfilter["sort"]){
		foreach ($snapfilter["sort"] as $key => $value){
			if(!$gfield[$gtabid]["sort"][$key]){
				unset($snapfilter["sort"][$key]);
			}
		}
	}
	
	#lmbGetGtabWidth($gtabid,$snapfilter["hidecols"]);
}
*/


/**
 * Load the snapshot in session in order to accelarate
 *
 * @return unknown the gsnap array that contains the description of the snapshots
 */
function SNAP_loadInSession($snap_changed=null,$admin=null){

	global $session;
	global $db;
	global $action;
	global $gfield;
    global $gsnapgroup;

	$sqlquery = "SELECT 
					LMB_SNAP.ID,
					LMB_SNAP.USER_ID,
					LMB_SNAP.TABID,
					LMB_SNAP.NAME,
					LMB_SNAP.SNAPGROUP,
					LMB_SNAP.GLOBAL,
					LMB_SNAP.FILTER,
					LMB_SNAP.EXT,
					LMB_SNAP.TYPE,
					LMB_SNAP_SHARED.ENTITY_TYPE,
					LMB_SNAP_SHARED.ENTITY_ID,
					LMB_SNAP_SHARED.EDIT,
					LMB_SNAP_SHARED.DEL
					";
	
	if($admin == 1){
				$sqlquery .= "FROM LMB_SNAP, LMB_SNAP_SHARED
				WHERE LMB_SNAP.ID = LMB_SNAP_SHARED.SNAPSHOT_ID ORDER BY LMB_SNAP.USER_ID,LMB_SNAP.NAME";
	}elseif($admin == 2){
				$sqlquery .= "FROM LMB_SNAP LEFT OUTER JOIN LMB_SNAP_SHARED ON(LMB_SNAP.ID = LMB_SNAP_SHARED.SNAPSHOT_ID)
				ORDER BY LMB_SNAP.USER_ID,LMB_SNAP.NAME";
	}else{
				$sqlquery .= "FROM LMB_SNAP left outer join LMB_SNAP_SHARED ON LMB_SNAP.ID = LMB_SNAP_SHARED.SNAPSHOT_ID
				WHERE LMB_SNAP.USER_ID = " . $session["user_id"] ."
				OR (LMB_SNAP_SHARED.entity_type = 'U' AND LMB_SNAP_SHARED.entity_id = ".$session["user_id"].")
				OR GLOBAL = ".LMB_DBDEF_TRUE;
				foreach ($session["subgroup"] as $key => $groupid) {
					$sqlquery = $sqlquery . " OR (LMB_SNAP_SHARED.entity_type = 'G' AND LMB_SNAP_SHARED.entity_id = ".$groupid.")";
				}
				$sqlquery .= "ORDER BY LMB_SNAP.SNAPGROUP,LMB_SNAP.NAME";
	}

	$rs1 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

	while(lmbdb_fetch_row($rs1)){
		$resort = 0;
		$snaptabid = lmbdb_result($rs1,"TABID");
        if(!$snaptabid){$snaptabid = 0;}
		$snapid = lmbdb_result($rs1,"ID");
		$gsnap[$snaptabid]["filter"][$snapid] = unserialize(lmbdb_result($rs1,"FILTER"));
		#SNAP_validate($snaptabid,$gsnap[$snaptabid]["filter"][$snapid]);


        //$gsnap[$snaptabid]["gsr_md5"][$snapid] = md5(serialize($gsnap[$snaptabid]["filter"][$snapid]['gsr']));


		$gsnap[$snaptabid]["id"][$snapid] = $snapid;
		$gsnap[$snaptabid]["user_id"][$snapid] = lmbdb_result($rs1,"USER_ID");
		$gsnap[$snaptabid]["name"][$snapid] = lmbdb_result($rs1,"NAME");
        $gsnap[$snaptabid]["group"][$snapid] = lmbdb_result($rs1,"SNAPGROUP");
		$gsnap[$snaptabid]["glob"][$snapid] = lmbdb_result($rs1,"GLOBAL");
		$gsnap[$snaptabid]["del"][$snapid] = lmbdb_result($rs1,"DEL");
		$gsnap[$snaptabid]["edit"][$snapid] = lmbdb_result($rs1,"EDIT");
        $gsnap[$snaptabid]["type"][$snapid] = lmbdb_result($rs1,"TYPE");
        $gsnap["argresult_id"][$snapid] = $snaptabid;

        $vtabid = $gtab['argresult_id'][$md5_tab];

        if($gsnap[$snaptabid]["group"][$snapid]) {
            $gsnap[-1][ $gsnap[$snaptabid]["group"][$snapid] ][$snapid] = $snapid;
        }
		
		###### check for changes/permissions #######
		
		# drop missing fields
        if($gsnap[$snaptabid]["filter"][$snapid]['sort']){
		foreach ($gsnap[$snaptabid]["filter"][$snapid]['sort'] as $key => $value){
			if(!$gfield[$snaptabid]['sort'][$key]){
				unset($gsnap[$snaptabid]["filter"][$snapid]['sort'][$key]);
				unset($gsnap[$snaptabid]["filter"][$snapid]['hidecols'][$key]);
				unset($gsnap[$snaptabid]["filter"][$snapid]["gsr"][$key]);
			}
		}}

		# add new fields as hidden
        if($gfield[$snaptabid]['sort']){
		foreach ($gfield[$snaptabid]['sort'] as $key => $value){
			if(!$gsnap[$snaptabid]["filter"][$snapid]['sort'][$key]){
				$gsnap[$snaptabid]["filter"][$snapid]['hidecols'][$key] = 1;
				$gsnap[$snaptabid]["filter"][$snapid]['sort'][$key] = $value;
				$resort = 1;
			}
		}}
		
		# resort if needed
		if($resort){
			asort($gsnap[$snaptabid]["filter"][$snapid]['sort']);
		}


		# Extension
		#$e2xt = lmbdb_result($rs1,"EXT");
		#if($ext){
		#	eval($ext);
		#	$gsnap[$snaptabid]["ext"][$snapid] = $extension;
		#
		$gsnap[$snaptabid]["ext"][$snapid] = lmbdb_result($rs1,"EXT");
		#}
		
		#$gsnap["tab"][$snapid] = $snaptabid;
		if(lmbdb_result($rs1,"USER_ID") == $session["user_id"]){
			$gsnap[$snaptabid]["owner"][$snapid] = 1;
		}
		if(lmbdb_result($rs1,"ENTITY_TYPE")){
			$gsnap[$snaptabid]["shared"][$snapid] = 1;
		}
	}

	if($snap_changed){
		$sqlquery = "UPDATE LMB_SESSION SET SNAP_CHANGED = ".LMB_DBDEF_FALSE." WHERE USER_ID = " . $session["user_id"];
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	}
	
	return $gsnap;
}

/**
 * Share a snapshot with a user or group
 *
 * @param unknown_type $destUser the user whom the snapshot will shared to
 * @param unknown_type $snapshotId the snapshot id
 */
function SNAP_share($destUser,$snapshotId,$del,$edit,$drop){
	global $action;
	global $db;
	global $LINK;
	global $session;
	global $gsnap;

	$uid = explode("_",$destUser);
	if(!$uid[0] OR !$uid[1]){return false;}
	
	$sqlquery = "SELECT ID,ENTITY_ID,EDIT,DEL FROM LMB_SNAP_SHARED WHERE ENTITY_ID=".$uid[0]." AND ENTITY_TYPE='".lmb_strtoupper($uid[1])."' AND SNAPSHOT_ID=".$snapshotId;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$entity_id = lmbdb_result($rs,"ENTITY_ID");
	$can_del = lmbdb_result($rs,"DEL");
	$can_edit = lmbdb_result($rs,"EDIT");
	
	$sqlquery = "SELECT TABID FROM LMB_SNAP WHERE ID=".$snapshotId;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$snaptabid = lmbdb_result($rs,"TABID");
	
	if(!$LINK[225] AND !$gsnap[$snaptabid]["owner"][$snapshotId]){lmb_alert("you have no permission to share this snapshot!");return false;}
	
	if($drop AND $entity_id){
		$sqlquery = "DELETE FROM LMB_SNAP_SHARED WHERE ENTITY_ID=".$uid[0]." AND ENTITY_TYPE='".lmb_strtoupper($uid[1])."' AND SNAPSHOT_ID=".$snapshotId;
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
	}elseif($edit AND $entity_id){
		if($can_edit){$bool = LMB_DBDEF_FALSE;
		}else{$bool = LMB_DBDEF_TRUE;}
		$sqlquery = "UPDATE LMB_SNAP_SHARED SET EDIT = ".$bool." WHERE ENTITY_ID=".$uid[0]." AND ENTITY_TYPE='".lmb_strtoupper($uid[1])."' AND SNAPSHOT_ID=".$snapshotId;
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
	}elseif($del AND $entity_id){
		if($can_del){$bool = LMB_DBDEF_FALSE;
		}else{$bool = LMB_DBDEF_TRUE;}
		$sqlquery = "UPDATE LMB_SNAP_SHARED SET DEL = ".$bool." WHERE ENTITY_ID=".$uid[0]." AND ENTITY_TYPE='".lmb_strtoupper($uid[1])."' AND SNAPSHOT_ID=".$snapshotId;
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
	}elseif(!$entity_id AND $session["user_id"] != $uid[0]){
		lmb_StartTransaction();
		$nextId = next_db_id("LMB_SNAP_SHARED");
		$sqlquery = "INSERT INTO LMB_SNAP_SHARED(ID,ENTITY_TYPE,ENTITY_ID,SNAPSHOT_ID) VALUES ($nextId,'".lmb_strtoupper($uid[1])."',".$uid[0].",$snapshotId)";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		lmb_EndTransaction(!$commit);
	}

	if(!$commit){SNAP_invalidate();return true;}else{return false;}
}

function SNAP_getParam($id)
{
	global $db;
	global $action;

	$result = array();

	$sqlquery = "SELECT * FROM LMB_SNAP WHERE ID=$id";

	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}

	if(lmbdb_fetch_row($rs))
	{
		$result["name"] = lmbdb_result($rs,"NAME");
		$result["id"] = lmbdb_result($rs,"ID");
		$result["tabid"] = lmbdb_result($rs,"TABID");
		$result["global"] = lmbdb_result($rs,"GLOBAL");
		$result["filter"] = lmbdb_result($rs,"FILTER");
		$result["owner"] = lmbdb_result($rs,"USER_ID");
        $result["type"] = lmbdb_result($rs,"TYPE");
	}

	return $result;
}

/**
	 * delete a snapshot
	 *
	 * @param unknown_type $id if of the snapshot
	 * @return unknown
	 */
function SNAP_delete($id,$gtabid){
    global $db;
    global $session;
    global $gsnap;
    global $LINK;

    if (!$LINK[225] OR !is_numeric($id) OR (!$gsnap[$gtabid]["owner"][$id] && !$gsnap[$gtabid]["edit"][$id] && $session['group_id'] != 1)) {
        lmb_alert("you have no permission to edit this snapshot!");
        return false;
    }

    if ($id > 0) {
        $sqlquery = "DELETE FROM LMB_SNAP WHERE ID = " . $id;
        $rs1 = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }
        $sqlquery = "DELETE FROM LMB_SNAP_SHARED WHERE SNAPSHOT_ID = " . $id;
        $rs1 = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }
        unset($gsnap[$gtabid]["id"][$id]);
        unset($gsnap[$gtabid]["name"][$id]);
        return true;
    } else {
        return false;
    }

    return false;
}


//from gtab_erg.dao
# --------Schnapschuß eintragen ------------
function SNAP_save($gtabid,$name,$id,$snapf = "null",$type=1,$snapgroup=null){
	global $db;
	global $session;
	global $filter;
	global $gsr;
	global $gfield;
	global $gsnap;
	global $LINK;

	$name = trim($name);

    if (!$LINK[225] OR ($id && (!$gsnap[$gtabid]["owner"][$id] && !$gsnap[$gtabid]["edit"][$id] && $session['group_id'] != 1))) {
        lmb_alert("you have no permission to edit this snapshot!");
        return false;
    }

	if($snapf == "null"){
        $snapfilter["order"] = $filter["order"][$gtabid]; //[$gtabid]
        $snapfilter["popups"] = $filter["popups"][$gtabid];
        $snapfilter["status"] = $filter["status"][$gtabid];
        $snapfilter["hidecols"] = $filter["hidecols"][$gtabid];
        $snapfilter["form"] = $filter["form"][$gtabid];
        $snapfilter["gsr"] = $gsr[$gtabid];
        $snapfilter["sort"] = $gfield[$gtabid]["sort"];
        $snapfilter["rowsize"] = $gfield[$gtabid]["rowsize"];
		$snapf = serialize($snapfilter);
	}else{
        $snapf = serialize($snapf);
    }

	// update the snapshot
	if($id>0)
	{
		$prepare_string = "UPDATE LMB_SNAP SET FILTER = ? WHERE ID = ".$id;
		if(!lmb_PrepareSQL($prepare_string,array($snapf),__FILE__,__LINE__)){$commit = 1;}
        $NEXTID = $id;
		# invalidate Session for other users
		SNAP_invalidate();
	}

	// save a new snapshot for a user
	elseif ($name){
		#$_SESSION["gsnap"] = null;

		$sqlquery = "SELECT ID FROM LMB_SNAP WHERE NAME = '".parse_db_string(str_replace(";",",",$name),50)."' AND TABID = $gtabid AND USER_ID = " .$session["user_id"];
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		if(lmbdb_fetch_row($rs)){
			$prepare_string = "UPDATE LMB_SNAP SET FILTER = ? WHERE ID = ".lmbdb_result($rs,"ID");
			if(!lmb_PrepareSQL($prepare_string,array($snapf),__FILE__,__LINE__)){$commit = 1;}

		}else{
			lmb_StartTransaction();
			$NEXTID = next_db_id("LMB_SNAP");
			$sqlquery1 = "INSERT INTO LMB_SNAP (ID,USER_ID,TABID,NAME,TYPE,SNAPGROUP) VALUES ($NEXTID,".$session["user_id"] . ",$gtabid,'".parse_db_string(str_replace(";",",",$name),50)."',$type,".parse_db_int($snapgroup).")";
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
			if(!$rs1) {$commit = 1;}
			$prepare_string = "UPDATE LMB_SNAP SET FILTER = ? WHERE ID = ".$NEXTID;
			if(!lmb_PrepareSQL($prepare_string,array($snapf),__FILE__,__LINE__)){$commit = 1;}
			lmb_EndTransaction(!$commit);
		}

		# save snapshot in session
		$gsnap[$gtabid]["id"][$NEXTID] = $NEXTID;
		$gsnap[$gtabid]["user_id"][$NEXTID] = $session["user_id"];
		$gsnap[$gtabid]["name"][$NEXTID] = $name;
		$gsnap[$gtabid]["filter"][$NEXTID] = $snapf;
		$gsnap[$gtabid]["glob"][$NEXTID] = 0;
		$gsnap[$gtabid]["owner"][$NEXTID] = 1;
		$gsnap[$gtabid]["shared"][$NEXTID] = 0;
		# invalidate Session for other users
		SNAP_invalidate();
	}

	// if no Id and no name then this is a new system snapshot
	else
	{
		lmb_StartTransaction();
		$NEXTID = next_db_id("LMB_SNAP");
		$sqlquery1 = "INSERT INTO LMB_SNAP (ID,USER_ID,TABID,GLOBAL,SNAPGROUP) VALUES ($NEXTID,0,$gtabid,true,".parse_db_int($snapgroup).")";
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
		$prepare_string = "UPDATE LMB_SNAP SET FILTER = ? WHERE ID = ".$NEXTID;
		if(!lmb_PrepareSQL($prepare_string,array($snapf),__FILE__,__LINE__)){$commit = 1;}
		lmb_EndTransaction(!$commit);
	}

	if(!$commit){
		return $NEXTID;
	}

}


# get_snapshot_filter
function SNAP_get_filter($snap_id,$gtabid){

	global $gsnap;
	#global $filter;
    #global $gsr;

	//get filter from snapshot
    $snapfilter = $gsnap[$gtabid]["filter"][$snap_id];

    // searchselect
    if($gsnap[$gtabid]["type"][$snap_id] == 2){
        $GLOBALS["gsr"][$gtabid] = $snapfilter["gsr"];
        $GLOBALS["filter"]["snapid"][$gtabid] = $snap_id;
    // filter
    }else {
        $GLOBALS["filter"]["snapisset"][$snap_id] = $snap_id;
        $GLOBALS["filter"]["snapid"][$gtabid] = $snap_id;
        $GLOBALS["filter"]["order"][$gtabid] = $snapfilter["order"];
        $GLOBALS["filter"]["popups"][$gtabid] = $snapfilter["popups"];
        $GLOBALS["filter"]["status"][$gtabid] = $snapfilter["status"];
        $GLOBALS["filter"]["hidecols"][$gtabid] = $snapfilter["hidecols"];
        $GLOBALS["filter"]["form"][$gtabid] = $snapfilter["form"];
        $GLOBALS["gfield"][$gtabid]["sort"] = $snapfilter["sort"];
        if ($snapfilter["rowsize"]) {
            $GLOBALS["gfield"][$gtabid]["rowsize"] = $snapfilter["rowsize"];
        }
        $GLOBALS["gsr"][$gtabid] = $snapfilter["gsr"];
        if($gsnap[$gtabid]["ext"][$snap_id]){
            eval($gsnap[$gtabid]["ext"][$snap_id]);
            $GLOBALS["filter"]["extension"][$gtabid] = $extension;
            $GLOBALS["gsr"][$gtabid] = $gsr[$gtabid];
        }else{
            $GLOBALS["filter"]["extension"][$gtabid] = '';
        }
    }

    $gsnap[$gtabid]["gsr_md5"][$snap_id] = md5(serialize($snapfilter["gsr"]));

	//speichern der filter und gsr in session
}

function SNAP_get_filtergroup($gtabid=null,$groupid=null,int $type=1, $showall=false ){
    global $gsnap;
    global $gsnapgroup;

    // group based filter without table
    if($groupid) {
        foreach ($gsnap[-1][$groupid] as $snapid => $value) {
            $snaptabid = $gsnap["argresult_id"][$snapid];

            // skip if intern snapshot
            if($gsnapgroup['intern'][ $gsnap[$snaptabid]['group'][$snapid] ] && !$showall){
                continue;
            }

            if($type !== intval($gsnap[$snaptabid]["type"][$snapid])){
                continue;
            }

            $filterlist[$snapid] = $gsnap[$snaptabid]["name"][$snapid];
        }
    // table based filter
    }elseif($gtabid){

        foreach ($gsnap[$gtabid]['name'] as $snapid => $value) {

            // skip if intern snapshot
            if($gsnapgroup['intern'][ $gsnap[$gtabid]['group'][$snapid] ] && !$showall){
                continue;
            }

            if($type !== intval($gsnap[$gtabid]["type"][$snapid])){
                continue;
            }
            $filterlist[$snapid] = $gsnap[$gtabid]["name"][$snapid];
        }
    }

    return $filterlist;
}

# remember original table filter
function SNAP_set_reminder($gtabid){

	$filter["order"] = $GLOBALS["filter"]["order"][$gtabid];
	$filter["popups"] = $GLOBALS["filter"]["popups"][$gtabid];
	$filter["status"] = $GLOBALS["filter"]["status"][$gtabid];
	$filter["hidecols"] = $GLOBALS["filter"]["hidecols"][$gtabid];
	$filter["form"] = $GLOBALS["filter"]["form"][$gtabid];
	$filter["sort"] = $GLOBALS["gfield"][$gtabid]["sort"];
    $filter["rowsize"] = $GLOBALS["gfield"][$gtabid]["rowsize"];
	$filter["gsr"] = $GLOBALS["gsr"][$gtabid];
	
	$GLOBALS["session"]["snapreminder"][$gtabid] = $filter;
}

# restore original table filter
function SNAP_get_reminder($gtabid){

	if($GLOBALS["session"]["snapreminder"][$gtabid]){
		$GLOBALS["filter"]["order"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["order"];
		$GLOBALS["filter"]["popups"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["popups"];
		$GLOBALS["filter"]["status"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["status"];
		$GLOBALS["filter"]["hidecols"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["hidecols"];
		$GLOBALS["filter"]["form"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["form"];
		$GLOBALS["gfield"][$gtabid]["sort"] = $GLOBALS["session"]["snapreminder"][$gtabid]["sort"];
        $GLOBALS["gfield"][$gtabid]["rowsize"] = $GLOBALS["session"]["snapreminder"][$gtabid]["rowsize"];
		$GLOBALS["gsr"][$gtabid] = $GLOBALS["session"]["snapreminder"][$gtabid]["gsr"];
		$GLOBALS["filter"]["extension"][$gtabid] = null;
	}
	
	$GLOBALS["session"]["snapreminder"][$gtabid] = null;
}

function SNAP_td_size_global($rowsize,$gtabid){
    global $db;
    global $umgvar;

	$rsize = explode(";",$rowsize);

	foreach ($rsize as $bzm => $value){
		$element = explode(",",$rsize[$bzm]);

        $field_id = $element[0];
        $width = parse_db_int($element[1]);
        if(!$width OR $width < 10){$width = $umgvar["default_fieldwidth"];}

		$sqlquery = "UPDATE LMB_CONF_FIELDS SET ROW_SIZE = $width WHERE FIELD_ID = $field_id AND TAB_ID = $gtabid";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

	}
}

function lmb_register_snapshot($gtabid,$snap_id,$filter_reset=null){
    global $gsnap;
    global $filter;

    if($snap_id AND $gsnap[$gtabid]["id"][$snap_id]){
        if(!$filter_reset AND (!$filter["snapisset"][$snap_id] OR $filter["snapid"][$gtabid] != $snap_id)){
            if(!$filter["snapid"][$gtabid]){
                SNAP_set_reminder($gtabid);
            }
            SNAP_get_filter($snap_id,$gtabid);
        }elseif($filter_reset){
            filter_reset($gtabid);
            SNAP_get_filter($snap_id,$gtabid);
        }
    }else{
        if($filter["snapid"][$gtabid]){
            filter_reset($gtabid);
            SNAP_get_reminder($gtabid);
        }
        $filter["snapid"][$gtabid] = 0;
    }

}

function SNAP_get_group(){
    global $gsnap;
    global $db;

    $sqlquery = "SELECT ID,NAME,INTERN FROM LMB_SNAP_GROUP ORDER BY NAME";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    if(!$rs) {return false;}

    $snapgroup = array();
	while(lmbdb_fetch_row($rs)) {
        $snapgroup['name'][lmbdb_result($rs, 'ID')] = lmbdb_result($rs, "NAME");
        $snapgroup['intern'][lmbdb_result($rs, 'ID')] = lmbdb_result($rs, "INTERN");
    }

    return $snapgroup;
}

function SNAP_print_select($gtabid,$snap_id,$filterlist=null){
    global $gsnap;
    global $gsnapgroup;

    if(!$filterlist) {
        $filterlist = SNAP_get_filtergroup($gtabid);
    }
    foreach($filterlist as $key => $value){
        $sg = $gsnap[$gtabid]['group'][$key];
        $sgname = $gsnapgroup['name'][$sg];
        if($sgp != $sg){
            echo '<optgroup label="'.$sgname.'">';
        }
        $sgp = $sg;
        echo "<option value=\"$key\" ".($key == $snap_id ? 'selected' : '').">".$value;
    }
}


?>