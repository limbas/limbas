<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

# Deprecated

#------------------- reminder --------------------------------

use Limbas\extra\reminder\Reminder;
use Limbas\extra\reminder\ReminderController;

function lmb_reminderFilter(&$sql,$category=null,$gtabid=null,$ID=null,$valid=null){
    $reminder = Reminder::getReminderWhereFilter($category,$gtabid,$ID,$valid);
    $sql = array_merge($sql, $reminder);
}



/**
 * function adds a reminder (in table lmb_reminder)
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param timestamp $gfrist field frist (date of the reminder)
 * @param varchar $gfrist_desc field description
 * @param int2 $gtabid field tabid
 * @param numeric $ID field dat_id
 * @param string $to Default null; _u if the reminder is of a user, _g if the reminder is of a group
 * @param int2 $category Default 0; a reminder of a customer has the possibility to set a category: acquisition = 1 nothing = 0
 * @param numeric $wfl_inst (workflow instance) Default null; if it is a reminder of a customer and the customer has an acquisition
 *                this field is set when the first workflow item is set.
 * @param string $fielddesc Default null; field content
 * @return $out[] (USER_ID if you have a userlist or GROUP_ID if you have a grouplist)
 *
 */
function lmb_addReminder($gfrist,$gfrist_desc,$gtabid,$ID,$to=null,$category=0,$wfl_inst=null,$fielddesc=null,$sendmail=null,$form_id=null){

    $deadline = new DateTime();
    if ($gfrist !== null) {
        $deadline->setTimestamp((int) $gfrist);
    }

    $reminder = new Reminder(
            0, $gtabid, $ID, $deadline, $gfrist_desc, null, $fielddesc, $category, $wfl_inst, $form_id
    );

    $userOrGroupArray = Reminder::convertLegacyUsergroupArray($to);

    return $reminder->save(
        $userOrGroupArray,
        $sendmail
    );
}

/**
 * function drops a reminder (in table lmb_reminder)
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param numeric $rem_id ID of the table lmb_reminder
 * @param int2 $gtabid field tabid
 * @param int2 $category Default 0; a reminder of a customer has the possibility to set a category: acquisition = 1 nothing = 0
 * @param numeric $ID field dat_id
 * @param numeric $wfl_inst (workflow instance) Default null; if it is a reminder of a customer and the customer has an acquisition
 *                this field is set when the first workflow item is set.
 * @param unknown_type $active Default null; if active is not null a where clause is set in which FRIST < timestamp
 * @param string $extension Default null; if extenstion is not null a where clause with this extension is set else a where clause with the active user_id or the active subgroup is set
 * @return bool true if the reminder is deleted, false if there is an error.
 *
 */
function lmb_dropReminder($rem_id,$gtabid=null,$category=null,$ID=null,$wfl_inst=null,$valid=null){
    return Reminder::deleteByFilter($rem_id, $gtabid, $category, $ID, $wfl_inst, $valid);
}

/**
 * function changes datetime and description of a reminder (in table lmb_reminder)
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param numeric $rem_id ID of the table lmb_reminder
 * @param timestamp $gfrist field frist (date of the reminder)
 * @param varchar $gfrist_desc field description
 * @return bool true if the reminder is changed, false if there is an error.
 *
 */
function lmb_changeReminder($rem_id, $gfrist,$gfrist_desc){
    if($gfrist){$gfrist = convert_date($gfrist);}
    if(!$gfrist){$gfrist = convert_stamp(time());}

    $deadline = new DateTime();
    $deadline->setTimestamp($gfrist);

    $reminder = Reminder::get($rem_id);
    if (!$reminder) {
        return false;
    }

    $reminder->deadline = $deadline;
    $reminder->description = $gfrist_desc;

    return $reminder->save();
}


/**
 * getter function for the active default reminder count
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param int2 $category
 * @return $gresult resultset
 */
function lmb_getReminderCount($category){
    $category = intval($category);

    return Reminder::countPerCategory($category);
}

/**
 * getter function for a reminder
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param int2 $gtabid field tabid
 * @param numeric $ID field dat_id
 * @param int2 $category Default 0; a reminder of a customer has the possibility to set a category: acquisition = 1 nothing = 0
 * @param numeric $wfl_inst (workflow instance) Default null; if it is a reminder of a customer and the customer has an acquisition
 *                this field is set when the first workflow item is set.
 * @param unknown_type $active Default null; if active is not null a where clause is set in which FRIST < timestamp
 * @param string $extension Default null; if extenstion is not null a where clause with this extension is set else a where clause with the active user_id or the active subgroup is set
 * @return $gresult resultset or false
 */
function lmb_getReminder($gtabid=null,$ID=null,$category=null,$wfl_inst=null,$valid=null){
    return Reminder::allLegacy($category, $gtabid, $ID, $wfl_inst, $valid);
}

#################### main_dyns.php - ajax #####################

# todo echoes
/**
 * Manage the reminder add from xml HTTP request
 * @deprecated Use new instance of Reminder class instead.
 *
 * @param unknown_type $params
 */
function lmb_showReminder(array $params){
    $reminderController = new ReminderController();
    $reminderController->showReminder($params);
}


# todo echoes
/**
 * write the preview of the reminder for the multiframe menu
 * @deprecated Use function in ReminderController instead
 */
function reminderPreview($params)
{
    ReminderController::previewReminderLegacy($params);
}



?>