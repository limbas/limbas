<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

# ------- soap-Funktion --------
use Limbas\admin\tools\datasync\DatasyncClientProcess;
use Limbas\admin\tools\update\Updater;

function runlmb($lmpar){
    if($GLOBALS['umgvar']['soap_base64']) {
        $lmpar = unserialize(base64_decode($lmpar));
    }else{
        $lmpar = unserialize($lmpar);
    }
	if($lmpar['use_noids']){
		$GLOBALS['lmpar']['use_noids'] = $lmpar['use_noids'];
		$lmpar = translateAssoziativeArray($lmpar);
	}
	if($lmb = parse_action($lmpar)){
	    if($GLOBALS['umgvar']['soap_base64']) {
            return base64_encode(serialize($lmb));
        }else{
	        return serialize($lmb);
        }
	}else{
		return array();
	}
}

function translateArrayRecursive(&$arr){
	global $gtab;
	global $gfield;

	foreach ($arr as $key => $value){
		$oldkey = $key;
		if(lmb_substr($key,0,1) == "#"){
			if($key = $gtab['argresult_id'][lmb_substr($key,1,90)] AND is_array($value)){
				foreach ($value as $key1 => $value1){
					if(lmb_substr($key1,0,1) == "*"){
						$oldfkey = $key1;
						if($key1 = $gfield[$key]['argresult_name'][lmb_substr($key1,1,90)]){
							$arr[$key][$key1] = $value1;
						}
					}else{
						$arr[$key][$key1] = $value1;
					}
				}
				unset($arr[$oldkey]);
			}
		}

		if(is_array($arr[$key])){
			$arr[$key] = translateArrayRecursive($arr[$key]);
		}
	}

	return $arr;
}


function translateAssoziativeArray($arr){
	# lmpar
	$arr = translateArrayRecursive($arr);


	return $arr;
}

function translateAssoziativeField($gtabid,$field){
	global $gfield;

	if(!is_numeric($field) AND lmb_substr($field,0,1) == "*"){
		return $gfield[$gtabid]['argresult_name'][lmb_substr($field,1,90)];
	}

	return $field;
}

function translateShowFields($gtabid,$fields){
	foreach ($fields as $key => $value){
		$fieldids[] = translateAssoziativeField($gtabid,$value);
	}
	return $fieldids;
}

function get_gselect(){
	global $db;
	global $gfield;
	global $umgvar;

	
	// multilang
    $sql_s = array();
	if($umgvar['multi_language']){
		foreach($umgvar['multi_language'] as $lkey => $lval){
		   $sql_s[] = 'LANG'.$lval.'_WERT';
		}
	}
	                    
	foreach ($gfield as $stab => $stabvalue){
		if($gfield[$stab]['sort']){
			foreach ($gfield[$stab]['sort'] as $sfield => $sfieldvalue){
				if($gfield[$stab]['field_type'][$sfield] == 4 AND $gfield[$stab]['select_pool'][$sfield]){
					$sqlquery = "SELECT ID,WERT".($gfield[$stab]['select_sort'][$sfield] ? ','.$gfield[$stab]['select_sort'][$sfield] : '').",".implode(',',$sql_s).",KEYWORDS FROM LMB_SELECT_W WHERE POOL = ".$gfield[$stab]['select_pool'][$sfield]." AND HIDE = ".LMB_DBDEF_FALSE." ORDER BY ".$gfield[$stab]['select_sort'][$sfield];
					$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
					while(lmbdb_fetch_row($rs)) {
						$gselect[$stab][$sfield]['id'][] = lmbdb_result($rs, "ID");
						$gselect[$stab][$sfield]['val'][] = lmbdb_result($rs, "WERT");
						$gselect[$stab][$sfield]['keywords'][] = lmbdb_result($rs, "KEYWORDS");
						
						// multilang
						if($umgvar['multi_language']){
					    foreach($umgvar['multi_language'] as $lkey => $lval){
	                       $gselect[$stab][$sfield]["val_$lval"][] = lmbdb_result($rs, 'LANG'.$lval.'_WERT');
	                    }}
					}
				}
			}
		}
	}

	return $gselect;
}


# ------- limbas-Funktionen --------
function parse_action($lmpar){

	global $session;
	global $gtab;
	global $gfield;
	global $umgvar;
	global $filter;
	global $LINK;
	global $db;

	$lmb = array();

	require_once(COREPATH . 'gtab/gtab.lib');
	require_once(COREPATH . 'gtab/gtab_type.lib');
    require_once(COREPATH . 'gtab/gtab_type_erg.lib');

    # ------- Limbas Session --------
    $lmb["session"]["s_name"] = $session['s_name'];
    $lmb["session"]["s_id"] = $session['s_id'];

	# ------- Limbas Session Variablen --------
	if(!$lmpar['lmbs']){
		if(is_array($lmpar[0]['getvars'])){
			if(in_array("gtab",$lmpar[0]['getvars'])){$lmb['gtab'] = $gtab;}
			if(in_array("gfield",$lmpar[0]['getvars'])){$lmb['gfield'] = $gfield;}
			if(in_array("umgvar",$lmpar[0]['getvars'])){$lmb['umgvar'] = $umgvar;}
			if(in_array("gselect",$lmpar[0]['getvars'])){$lmb['gselect'] = get_gselect();}
			if(in_array("userdat",$lmpar[0]['getvars'])){$lmb['userdat'] = $GLOBALS['userdat'];}
			if(in_array("groupdat",$lmpar[0]['getvars'])){$lmb['groupdat'] = $GLOBALS['groupdat'];}
			if(in_array("gmimetypes",$lmpar[0]['getvars'])){$lmb['gmimetypes'] = $GLOBALS['gmimetypes'];}
			if(in_array("greminder",$lmpar[0]['getvars'])){$lmb['greminder'] = $GLOBALS['greminder'];}
			if(in_array("workflow",$lmpar[0]['getvars'])){$lmb['workflow'] = $GLOBALS['gwfl'];}
		    if(in_array("perms",$lmpar[0]['getvars'])){$lmb['perms'] = $GLOBALS['LINK'];}
			# Ordnerstruktur
			if(in_array("filestruct",$lmpar[0]['getvars'])){
				require_once(COREPATH . 'extra/explorer/filestructure.lib');
				get_filestructure();
				$lmb['filestruct'] = $GLOBALS['filestruct'];
			}
			
		}
		$lmb['session'] = $session;
	}

	# --- Aktionen ---
	foreach($lmpar as $action => $lmpart) {
		if(is_numeric($action)){

			# translate tablename
			if(!is_numeric($lmpart['gtabid']) AND $lmpart['gtabid']){
				$lmpart['gtabid'] = $gtab['argresult_id'][lmb_substr($lmpart['gtabid'],1,90)];
			}

			# --- Select Liste (Auswahl Pools) ---
			if($lmpart['action'] == "get_select"){
				require_once(COREPATH . 'gtab/sql/add_select.dao');
				$lmb[$action] = pool_select_list($lmpart['gtabid'],$lmpart['fieldid'],null,null,null,$lmpart['count'],$lmpart['res_next']);

			# --- neuer Datensatz ---
			}elseif($lmpart['action'] == "gtab_new" AND $lmpart['gtabid']){
				actionGtabAdd($lmpart,$lmb,$action);
			# --- Datensatz ändern ---
            }elseif($lmpart['action'] == "gtab_change" AND $gtab['edit'][$lmpart['gtabid']]){
				if($lmpart['gup']){
					$success = true;
					if(!update_data($lmpart['gup'],3,0)){$success = false;}
				}
				# Vernüpfung ändern
				if($lmpart['gnup']['verknpf']){
					foreach ($lmpart['gnup']['verknpf'] as $idverkn => $val) {
						if(lmb_substr($lmpart['gnup']['verkn_ID'][$idverkn],0,3) == 'new'){
							$acid = lmb_substr($lmpart['gnup']['verkn_ID'][$idverkn],4,2);
							$lmpart['gnup']['verkn_ID'][$idverkn] = $lmb[$acid];
						}
						if(!is_array($lmpart['gnup']['verkn_add_ID'][$idverkn]) AND lmb_substr($lmpart['gnup']['verkn_add_ID'][$idverkn],0,3) == 'new'){
							$acid = lmb_substr($lmpart['gnup']['verkn_add_ID'][$idverkn],4,2);
							$lmpart['gnup']['verkn_add_ID'][$idverkn] = $lmb[$acid];
						}

						$verkn = set_verknpf($lmpart['gnup']['verkn_tabid'][$idverkn],$lmpart['gnup']['verkn_fieldid'][$idverkn],$lmpart['gnup']['verkn_ID'][$idverkn],$lmpart['gnup']['verkn_add_ID'][$idverkn],$lmpart['gnup']['verkn_del_ID'][$idverkn],null,$val);
						if(is_array($lmpart['gnup']['verkn_linkParam'][$idverkn])){
							foreach ($lmpart['gnup']['verkn_linkParam'][$idverkn] as $lnpkey => $lnpval){
								$verkn['linkParam'][$lnpkey] = $lnpval;
							}
						}
						if(!set_joins($lmpart['gtabid'],$verkn)){$success = false;}
					}
				}
				$lmb[$action] = $success;

			# --- Datensatz löschen ---
			#}elseif($lmpart['action'] == "gtab_change" AND  $lmpart['id'] AND $lmpart['delete'] == 1){
			}elseif($lmpart['action'] == "gtab_delete" AND  $lmpart['id']){
				$lmb[$action] = del_data($lmpart['gtabid'],$lmpart['id']);
			# --- Datensatz verstecken ---
			}elseif($lmpart['action'] == "gtab_hide" AND  $lmpart['id']){
				$lmb[$action] = hide_data($lmpart['gtabid'],$lmpart['id']);
			# --- Datenstatz Ergebnisse ---
			}elseif($lmpart['action'] == "gtab_erg"){
				$lmb[$action]['fresult'] = getGtabLevel($lmpart,$lmb,$action,$lmpart['gtabid'],$lmpart['verkn'],0);
			# --- DMS ---
			}elseif($lmpart['action'] == "explorer_main"){
				actionDMS($lmpart,$lmb,$action);
			# --- reminder ---
			}elseif($lmpart['action'] == "reminder"){
				actionReminder($lmpart,$lmb,$action);
			# --- workflow ---
			}elseif($lmpart['action'] == "workflow"){
				$lmb[$action] = actionWorkflow($lmpart,$lmb,$action);
			# --- report ---
			}elseif($lmpart['action'] == "report"){
				$lmb[$action] = actionCreateReport($lmpart,$lmb,$action);
			# --- file upload ---
			}elseif($lmpart['action'] == "file_upload" AND $LINK[128]){
			    if(is_array($lmpart['file']['file'])){
                    foreach($lmpart['file']['file'] as $key => $filename){
                        if($lmpart['file']['content'][$key]){
                            $fpath = USERPATH.$session['user_id'].'/temp/'.$lmpart['file']['file'][$key];
                            $fp = fopen($fpath,'w');
                            fputs($fp, base64_decode($lmpart['file']['content'][$key]));
                            fclose($fp);
                            if(file_exists($fpath)){
                                $lmb[$action][$key] = $lmpart['file']['file'][$key];
                            }else{
                                $lmb[$action][$key] = false;
                            }
                        }
                    }
			    }
			# --- remote download (external storage) ---
			}elseif($lmpart['action'] === 'remote_download' AND $LINK[190]) {
                require_once(COREPATH . 'extra/explorer/filestructure.lib');

                if(is_numeric($fileID = $lmpart['fileID'])
				and $file = file_download($fileID)
				and $storageID = $file['storageID']) {
					# TODO maybe check url against cloud config?
					$lmb[$action]['file'] = $file;
                    $lmb[$action]['storageConfig'] = lmbGetExternalStorageConfig($storageID);
				}
			# --- finish remote upload (external storage) ---
			}elseif($lmpart['action'] === 'finish_remote_upload' AND $LINK[128]) { # TODO link required?
				if ($fileID = $lmpart['ID']) {
                    $success = $lmpart['success'];
                    if ($success and $fileName = $lmpart['uniqueFileName']) {
                    	$dlLink = '';
                    	if ($lmpart['downloadLink']) {
                    		$dlLink = ",DOWNLOAD_LINK='" . parse_db_string($lmpart['downloadLink']) . "'";
						}
						$sqlquery = "UPDATE LDMS_FILES SET SECNAME='" . parse_db_string($fileName) . "' $dlLink WHERE STORAGE_ID IS NOT NULL AND ID=" . parse_db_int($fileID);
                    	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
                    } else {
                        require_once(COREPATH . 'extra/explorer/filestructure.lib');
                    	lmb_deleteFile($fileID); # TODO forcedelnm?
					}
                }

			# admin - variables
			}elseif($lmpart['action'] == "get_lmbvars" AND is_array($lmpart['lmbvars'])){
				if(in_array("tabgroup",$lmpart['lmbvars'])){$lmb[$action]['tabgroup'] = $GLOBALS['tabgroup'];}
				if(in_array("gtab",$lmpart['lmbvars'])){$lmb[$action]['gtab'] = $GLOBALS['gtab'];}
				if(in_array("gfield",$lmpart['lmbvars'])){$lmb[$action]['gfield'] = $GLOBALS['gfield'];}
				if(in_array("gselect",$lmpart['lmbvars'])){$lmb[$action]['gselect'] = get_gselect();}
				if(in_array("greportlist",$lmpart['lmbvars'])){$lmb[$action]['greportlist'] = $GLOBALS['greportlist'];}
				if(in_array("gformlist",$lmpart['lmbvars'])){$lmb[$action]['gformlist'] = $GLOBALS['gformlist'];}
				if(in_array("gdiaglist",$lmpart['lmbvars'])){$lmb[$action]['gdiaglist'] = $GLOBALS['gdiaglist'];}
			    if(in_array("umgvar",$lmpar[0]['lmbvars'])){$lmb[$action]['umgvar'] = $umgvar;}
			    if(in_array("userdat",$lmpar[0]['lmbvars'])){$lmb[$action]['userdat'] = $GLOBALS['userdat'];}
			    if(in_array("groupdat",$lmpar[0]['lmbvars'])){$lmb[$action]['groupdat'] = $GLOBALS['groupdat'];}
			    if(in_array("gmimetypes",$lmpar[0]['lmbvars'])){$lmb[$action]['gmimetypes'] = $GLOBALS['gmimetypes'];}
			    if(in_array("greminder",$lmpar[0]['lmbvars'])){$lmb[$action]['greminder'] = $GLOBALS['greminder'];}
			    if(in_array("workflow",$lmpar[0]['lmbvars'])){$lmb[$action]['workflow'] = $GLOBALS['gwfl'];}
		        if(in_array("perms",$lmpar[0]['lmbvars'])){$lmb[$action]['perms'] = $GLOBALS['LINK'];}

			# Admin - remote-export preselect
			}elseif($lmpart['action'] == "setup_remote_exportlist" AND $session['group_id'] == 1 AND $LINK[48]){
				$requi = "admin/tools/export_remote.lib";
				require_once($requi);

				global $tabgroup;
				global $gtab;
				global $greportlist;
				global $gformlist;

				$lmb[$action]['tabgroup'] = $tabgroup;
				$lmb[$action]['gtab'] = $gtab;
				$lmb[$action]['gfield'] = $gfield;
				$lmb[$action]['greportlist'] = $greportlist;
				$lmb[$action]['gformlist'] = $gformlist;
				$lmb[$action]['gdiaglist'] = get_diag_list();
			# Admin - remote-export
			}elseif($lmpart['action'] == "setup_remote_exportfiles" AND  $lmpart['exptables'] AND $session['group_id'] == 1 AND $LINK[48]){
				
				global $DBA;
			
				$requi = "lib/db/db_".$DBA['DB']."_admin.lib";
				require_once($requi);
				$requi = "lib/include_admin.lib";
				require_once($requi);
				$requi = "admin/tools/export.lib";
				require_once($requi);
				
				if($result_backup = lmbExport($lmpart['exptables'],'group',null,null)){
					return true;
				}
			} elseif($lmpart['action'] == 'setup_remote_syncimport' && $session['group_id'] == 1 && $LINK[49]) {
                # params: file_content, ?confirm_syncimport                
                # check params
                if(!$lmpart['file_content']) {
                    error_log("Secure Remote Sync Import: Content of export file not sent!");
                    return false;
                }

                # write content into file
                $fpath = USERPATH.$session['user_id'].'/remote_sync_export_bundle.tar.gz';
                $fp = fopen($fpath,'w');
                fputs($fp, base64_decode($lmpart['file_content']));
                fclose($fp);
                if(!file_exists($fpath)){
                    error_log("Secure Remote Sync Import: Export file could not be written!");
                    return false;
                }

                # perform sync import
                # TODO if lmpart['exptables']?
                # TODO imports
                global $DBA;
                require_once(COREPATH . 'lib/db/db_'.$DBA['DB'].'_admin.lib');
                require_once(COREPATH . 'lib/include_admin.lib');
                require_once(COREPATH . 'admin/tables/tab.lib');
                require_once(COREPATH . 'admin/tools/import_sync.php');

                $importSync = new importSync();
                $result = $importSync->secure_sync_import($fpath, false, $lmpart['precheck'], $lmpart['confirm_syncimport']);
                return array(
                    'log' => $result['log'],
                    'output' => $importSync->structureoutput,
                    'success' => $result['success']
                );
            } elseif($lmpart['action'] == 'setup_datasync' || $lmpart['action'] == 'finish_datasync' || $lmpart['action'] == 'socket_datasync') { //TODO: Rechte

				require_once(COREPATH . 'admin/tools/datasync/loaddatasync.php');

                return DatasyncClientProcess::handleSoapRequest($lmpart);
				
            } elseif($lmpart['action'] == 'get_system_update') {

				return ['success'=>true,'data'=>Updater::getSystemInfo()];
			} elseif($lmpart['action'] == 'run_system_update_action') {

				if(!isset($lmpart['clientAction']) || !isset($lmpart['params'])) {
					return false;
				}
				
				return Updater::applyRemoteAction($lmpart['clientAction'],$lmpart['params']);
			} elseif($lmpart['action'] == 'validate_datasync') {

				require_once(COREPATH . 'admin/tools/datasync/validate.lib');

                if($lmpart['phase'] == 1){
                    // count(*) diff of all tables
                    return lmb_getSyncValidatePhase1(null,$lmpart['filter']);
                }elseif($lmpart['phase'] == 2){
                    // detail of missing datasets of one table
                    return lmb_getSyncValidatePhase2(null, $lmpart['table'],null,$lmpart['filter']);
                }elseif($lmpart['phase'] == 3){
                    // checksum diff of all tables
                    return lmb_getSyncValidatePhase3(null,$lmpart['filter']);
                }elseif($lmpart['phase'] == 4){
                    // detail checksum diff of one table
                    return lmb_getSyncValidatePhase4(null, $lmpart['table'],null,$lmpart['filter']);
                }elseif($lmpart['phase'] == 5){
                    // detail dataset comparison
                    return lmb_getSyncValidatePhase5(null, $lmpart['table'],$lmpart['ID']);
                } elseif($lmpart['phase'] == 20){
                    // rebuild sync cashe of missing datasets
                    return lmb_SyncValidateRebuildCache($lmpart['table'],$lmpart['diff'],2);
                } elseif($lmpart['phase'] == 40){
                    // rebuild sync cashe of dataset comparison (fieldvalues)
                    return lmb_SyncValidateRebuildCachePhase4($lmpart['table'],$lmpart['diff'],2);
                }

			}

			# --- Extension ---
			if($lmpart['extension']){
				$fkt = "extSoap".key($lmpart['extension']);
				$param = current($lmpart['extension']);
				$param_ = array();
				if(lmb_strpos($param,"new_") !== false){
					if($val_ = explode(",",$param)){
						foreach ($val_ as $k => $v){
							if(lmb_substr($v,0,3) == 'new'){
								$param_[] = $lmb[lmb_substr($v,4,2)];
							}else{
								$param_[] = $v;
							}
						}
					}
				}
				if($extension = $fkt($param,$param_,$lmb)){
					$lmb[$action] = $extension;
				}

			}elseif($lmpart['action'] == 'transaction'){
			
				if($lmpart['actionid'] == 'start'){
					lmb_StartTransaction();
				}elseif($lmpart['actionid'] == 'end'){
					lmb_EndTransaction(1);
				}elseif($lmpart['actionid'] == 'rollback'){
					lmb_EndTransaction(0);
				}
			
			
			}
			
			
			# error handling
			if($GLOBALS['alert']){$lmb['error'][$action] = $GLOBALS['alert'];$GLOBALS['alert'] = null;}

		}
	}

	if(is_array($lmb)){
		return $lmb;
	}else{
		return false;
	}
}


# create Report
function actionCreateReport(&$lmpart,&$lmb,$action){

	global $umgvar;
    global $filestruct;
    
    $ID = $lmpart['ID'];
    $gtabid = $lmpart['gtabid'];
    $report_id = $lmpart['report_id'];
    $report_output = $lmpart['report_output'];
    $filter = $lmpart['filter'];
    $gsr = $lmpart['gsr'];
    $verkn = $lmpart['verkn'];
    $report_rename = $lmpart['report_rename'];
    $report_output = 2;
    if(!$report_medium){$report_medium = 'pdf';}
    
    require_once(COREPATH . 'extra/explorer/filestructure.lib');
    require_once(COREPATH . 'extra/report/report.dao');
    require_once(COREPATH . 'extra/report/report_' . lmb_substr($report_medium, 0, 3) . '.php');
    
    $lmb[$action] = $generatedReport;
    
    return $lmb;
}

# DMS Tree
function actionDMSTree(&$lmpart,&$lmb){

	global $umgvar;
    global $filestruct;
    global $gfile;
    
    $LID = $lmpart['LID'];
    $sub = $lmpart['sub'];
    $xml = $lmpart['xml'];
    
	require_once(COREPATH . 'extra/explorer/filestructure.lib');
	
    get_filestructure();
}


# Reminder
function actionReminder(&$lmpart,&$lmb,$action){
	global $umgvar;
    global $session;

	if($lmpart['getReminder']){
		$lmb[$action] = lmb_getReminder($lmpart['getReminder']['gtabid'],$lmpart['getReminder']['ID'],$lmpart['getReminder']['category'],$lmpart['getReminder']['wfl_inst'],$lmpart['getReminder']['active']);
		return $lmb;
	}

	if($lmpart['addReminder']){
		if($lmpart['addReminder']['to_user']){
		foreach ($lmpart['addReminder']['to_user'] as $key => $val){
			$to[] = $val."_u";
		}
		}
		if($lmpart['addReminder']['to_group']){
		foreach ($lmpart['addReminder']['to_group'] as $key => $val){
			$to[] = $val."_g";
		}
		}
		$lmb[$action] = lmb_addReminder($lmpart['addReminder']['date'],$lmpart['addReminder']['content'],$lmpart['addReminder']['gtabid'],$lmpart['addReminder']['ID'],$to,$lmpart['addReminder']['category'],$lmpart['addReminder']['wfl_inst'],$lmpart['addReminder']['desc']);
		return $lmb;
	}
	
	if($lmpart['dropReminder']){
		$lmb[$action] = lmb_dropReminder($lmpart['dropReminder']['ID'],$lmpart['dropReminder']['gtabid'],$lmpart['dropReminder']['category'],$lmpart['dropReminder']['dat_id'],$lmpart['dropReminder']['wfl_inst'],$lmpart['dropReminder']['active'],$lmpart['dropReminder']['extension']);
		return $lmb;
	}
}


# Workflow
function actionWorkflow(&$lmpart,&$lmb,$action){
	global $umgvar;
	global $session;
	
	if($lmpart['workflow']){
		
		require_once(COREPATH . 'gtab/gtab.lib');
		require_once(COREPATH . 'extra/workflow/lwf.lib');

		$wfl_id = $lmpart['workflow']['wfl_id'];
		$wfl_inst = $lmpart['workflow']['wfl_inst'];
		$wfl_task = $lmpart['workflow']['wfl_task'];
		$wfl_params = $lmpart['workflow']['wfl_params'];
		$gtabid = $lmpart['workflow']['gtabid'];
		$ID = $lmpart['workflow']['ID'];

		if(!$lmpart['workflow']['wfl_inst']){
			$wfl_inst = lmb_wfl_getRecordInst($wfl_id,$gtabid,$ID);
		}

		if(!$wfl_inst AND $wfl_task > 0){return false;}

		# init Task
		if(lmb_wfl_init($wfl_id,$wfl_inst,$wfl_task,$gtabid,$ID,$wfl_params) !== false){
			return true;
		} else {
			return false;
		}

	}
	return false;
}

# DMS
function actionDMS(&$lmpart,&$lmb,$action){
	global $umgvar;
    global $filestruct;
    global $gfile;
    global $session;

	require_once(COREPATH . 'extra/explorer/filestructure.lib');
	require_once(COREPATH . 'extra/explorer/metadata.lib');

	get_filestructure();
	if(!$lmpart['typ']){$lmpart['typ'] = 1;}
	
	# Dateien
	if(in_array("fresult",$lmpart['getvars']) AND $lmpart['LID']){
		# filter ID
		if($lmpart['ffilter']['glob']){$fid = 0;}else{$fid = $lmpart['LID'];}

		# upload file
		if($lmpart['upload_file']['name']){
			foreach ($lmpart['upload_file']['name'] as $ukey => $uval){
				$uplpath = USERPATH.$session['user_id']."/temp/".$uval;
                $fileContent = &$lmpart['upload_file']['content'][$ukey];
                $noupload = $lmpart['upload_file']['noupload'][$ukey];
                if($fileContent or $noupload === 3 /* external storage */) { # TODO maybe implement noupload other than 3
					if($fileContent and $handle = fopen($uplpath, "w")){
						fwrite($handle, base64_decode($fileContent));
                        fclose($handle);
					}
                    if ($noupload === 3) {
                        $storageID = $filestruct['storageID'][$lmpart['LID']];
                        $lmb[$action]['upload']['storageConfig'] = lmbGetExternalStorageConfig($storageID);
                        $lmb[$action]['upload']['authToken'] = lmbGenerateAuthToken();
                    } else {
                        $noupload = 1;
                    }

					$file = array();
					$dublicate = array();
					$relation = array();
					
					$file['file'][] = $uplpath;
					$file['file_name'][] = $lmpart['upload_file']['name'][$ukey];
					$file['file_type'][] = $lmpart['upload_file']['mimetype'][$ukey];
                    $file['file_size'][] = $lmpart['upload_file']['file_size'][$ukey];
					$dublicate['type'][] = $lmpart['upload_file']['dublicate'][$ukey];
                    $dublicate['subj'][] = $lmpart['upload_file']['subj'][$ukey];

                    # UPLOAD relation
					$relation = $lmpart['upload_file']['relation'][$ukey];

					$lmb[$action]['upload']['file_name'][] = $lmpart['upload_file']['name'][$ukey];
					if($nfid = lmb_fileUpload($file,$fid,$relation,$noupload,$dublicate)){
						$lmb[$action]['upload']['file_id'][] = $nfid;

						if ($noupload === 3) {
                            $lmb[$action]['upload']['uniqueFileName'] = lmbUniqueFilename($lmpart["upload_file"]["name"][$ukey], $nfid);
						}

						# LINK relation
						if($lmpart['upload_file']['link']['verkn_tabid'][$ukey]){
							$verkn = set_verknpf($lmpart['upload_file']['link']['verkn_tabid'][$ukey],$lmpart['upload_file']['link']['verkn_fieldid'][$ukey],$lmpart['upload_file']['link']['verkn_ID'][$ukey],$nfid,0,0,0);
							$verkn['linkParam']['LID'] = $lmpart['LID'];
							set_joins($lmpart['upload_file']['link']['verkn_tabid'][$ukey],$verkn);
						}
					}else{
						$lmb[$action]['upload']['file_id'][] = false;
					}

				}
			}
			
		}
		
		# delete file
		if($lmpart['delete_file']['id']){
			if(is_array($lmpart['delete_file']['id'])){
				foreach ($lmpart['delete_file']['id'] as $dkey => $dval)
				lmb_deleteFile($dval);
			}elseif(is_numeric($lmpart['delete_file']['id'])){
				lmb_deleteFile($lmpart['delete_file']['id']);
			}
		}
		
		# angeforderte Felder
		if($lmpart['show_fields']){
			$gfile['show'][$fid] = null;
			foreach ($lmpart['show_fields'] as $key => $value){
				$gfile['show'][$lmpart['LID']][$value] = 1;
			}
		}

		# Filter
		if($lmpart['ffilter']){
			foreach ($lmpart['ffilter'] as $key => $value){
				if($key == "viewmode"){
					$ffilter[$key] = $value;
				}elseif($key == "search"){
					foreach ($value as $key1 => $value1){
						$key1_ = explode("_",$key1);
						$ffilter['gsr'][$key1_[0]][$key1_[1]] = $value1;
					}
				}elseif($key == "order"){
					$ffilter['order'][$fid] = $value;
				}else{
					$ffilter[$key][$fid] = $value;
				}
			}
		}
		
		# Tabellenverknüpfung
		if($lmpart['verkn_ID']){
			$ffilter['viewmode'][$lmpart['LID']] = 5;
			$verkn['parent_datid'] = $lmpart["verkn_ID"];
		}

		# --- Abfrage starten ---
		if($query = get_fwhere($lmpart["LID"],$ffilter,$lmpart["typ"],$verkn)){
			$ffile = get_ffile($query,$ffilter,$lmpart["LID"],$lmpart["typ"]);
			$lmb[$action]["ffile"] = $ffile;
		}
	}

	# Ordnerstruktur
	if(in_array("filestruct",$lmpart["getvars"])){
		$lmb[$action]["filestruct"] = $filestruct;
	}
}

# Gtab add
function actionGtabAdd(&$lmpart,&$lmb,$action){

	global $gtab;
	global $LINK;

	unset($chdata);
	if($gtab["add"][$lmpart["gtabid"]] AND $LINK[1]){

		# neuen Datensatz anlgen
		$new_ID = new_record($lmpart["gtabid"]);
		$lmb[$action] = $new_ID;

		# ---- Datensatz update nach anlegen ----------
		if($new_ID AND $lmpart["gnup"]){
			if($lmpart["gnup"]){
				foreach($lmpart["gnup"] as $key => $value){
					if($value AND is_numeric($key)){
						$ak = $lmpart["gtabid"].",".$key.",".$new_ID;
						$chdata[$ak] = $value;
					}
				}
			}

			if($chdata AND $gtab["edit"][$lmpart["gtabid"]]){
				update_data($chdata,3,0);
			}
		}

		# ---- Datensatz verküpfen nach anlegen ----------
		if($lmpart["gnup"]["verknpf"] AND $new_ID){
			foreach($lmpart["gnup"]["verknpf"] as $vkey => $vval){
				if(lmb_substr($lmpart["gnup"]["verkn_ID"][$vkey],0,3) == 'new'){
					$acid = lmb_substr($lmpart["gnup"]["verkn_ID"][$vkey],4,2);
					$lmpart["gnup"]["verkn_ID"][$vkey] = $lmb[$acid];
				}
				if(lmb_substr($lmpart["gnup"]["verkn_add_ID"][$vkey],0,3) == 'new'){
					$acid = lmb_substr($lmpart["gnup"]["verkn_add_ID"][$vkey],4,2);
					$lmpart["gnup"]["verkn_add_ID"][$vkey] = $lmb[$acid];
				}

				$verkn = set_verknpf($lmpart["gnup"]["verkn_tabid"][$vkey],$lmpart["gnup"]["verkn_fieldid"][$vkey],$lmpart["gnup"]["verkn_ID"][$vkey],$lmpart["gnup"]["verkn_add_ID"][$vkey],0,0,0);
				if(is_array($lmpart["gnup"]["verkn_linkParam"][$vkey])){
					foreach ($lmpart["gnup"]["verkn_linkParam"][$vkey] as $lnpkey => $lnpval){
						$verkn["linkParam"][$lnpkey] = $lnpval;
					}
				}
				set_joins($lmpart["gtabid"],$verkn);
			}
		}

		if($new_ID){return($new_ID);}else{return false;}
	}
}








# recursiv gtab_erg
function getGtabLevel(&$lmpart,&$lmb,$action,$gtabid,$verkn=null,$rec=null){

	global $gtab;
	global $gfield;
	global $gverkn;
	global $umgvar;
	global $still_done;
	global $still_sdone;

	$order = $lmpart[$gtabid]["order"];
	$gsr = $lmpart["gsr"];

	# clear names
	if($GLOBALS["lmpar"]["use_noids"]){
		$rgtabid = "#".$gtab["table"][$gtabid];
	}else{
		$rgtabid = $gtabid;
	}

	# Suchkriterien nur bei erster Ebene
	if($gtabid == $lmpart["gtabid"] AND $rec){
		$gsr = array();
	}
	
	# --- alle 1:1 Verknüpfungen ---
	$rverkn = $gtab["rverkn"][$gtab["verkn"][$gtabid]];

	# gsr werte übersetzen in Ergebnisse
	if($gsr[$gtabid]){
	foreach ($gsr[$gtabid] as $fid => $v1){
		if(is_array($v1)){
		foreach ($v1 as $sid => $v2){
			# syntax : #fresult|0|1|2 [action|tabid|fieldid]
			if(!is_array($v2)){
			if(lmb_substr($v2,0,8) == "#fresult"){
				$va2 = explode("|",$v2);
				foreach ($lmb[$va2[1]]["fresult"][$va2[2]] as $resid => $resval){
					$gsr[$gtabid][$fid][] = $lmb[$va2[1]]["fresult"][$va2[2]][$resid][$va2[3]];
					$gsr[$gtabid][$fid]["andor"][] = 2;
				}
			}}
		}}
	}}


	# ---- Sortierung ------
	if(is_array($order)){
		foreach ($order as $okey => $ovalue){
			$soap_order = explode(",",$ovalue);
			$filter["order"][$gtabid][] = $gtabid."&".$soap_order[0]."&".$soap_order[1];
		}
	}elseif($order){
		$soap_order = explode(",",$order);
		$filter["order"][$gtabid] = $gtabid."&".$soap_order[0]."&".$soap_order[1];
	}

	# onlyfield
	# 1:1 Verknüpfung
	if(lmb_count($rverkn) > 0){
		foreach($rverkn as $key => $value){
			if($lmpart[$key]["showfields"]){
				if(!is_array($lmpart[$key]["showfields"])){
					$onlyfield[$key] = explode(",",$lmpart[$key]["showfields"]);
				}else{
					$onlyfield[$key] = $lmpart[$key]["showfields"];
				}
				if($GLOBALS["lmpar"]["use_noids"]){
					$onlyfield[$key] = translateShowFields($gtabid,$onlyfield[$key]);
				}
			}
		}
	}

	# ---- Starte bei Seite ------
	if($lmpart[$gtabid]["res_next"]){
		$filter["page"][$gtabid] = $lmpart[$gtabid]["res_next"];
	}
	# ---- Anzahl Ergebniszeilen ------
	if($lmpart[$gtabid]["count"]){
		$filter["anzahl"][$gtabid] = $lmpart[$gtabid]["count"];
	}

	# kein Datensatzlimit
	if($lmpart[$gtabid]["nolimit"]){
		$filter["nolimit"][$gtabid] = 1;
	}
	
	# zeige nur aktuelle Version
	if($lmpart[$gtabid]["viewversion"]){
		$filter["viewversion"][$gtabid] = $lmpart[$gtabid]["viewversion"];
	}
	
	# zeige long values
    if($gtab["raverkn"][$gtab["verkn"][$gtabid]]){
	foreach($gtab["raverkn"][$gtab["verkn"][$gtabid]] as $key => $ragtabid){
		$filter["getlongval"][$ragtabid] = 1;
	}}

	# --- Result Space ---
	#$resultspace = $umgvar["resultspace"];
	if(is_numeric($lmpart[$gtabid]["count"]) AND $lmpart[$gtabid]["count"] > $umgvar["resultspace"]){
		$GLOBALS["umgvar"]["resultspace"] = $lmpart[$gtabid]["count"];
	}

	# --- Extension für gresult Abfrage ---
	if($lmpart[$gtabid]["extension"]){
		$fkt = "extSoap".key($lmpart[$gtabid]["extension"]);
		$val = current($lmpart[$gtabid]["extension"]);
		$extension = $fkt($val,$lmb);
	}

	# --- use reminder ---
	if(is_numeric($lmpart[$gtabid]["reminder"])){
		$reminderID = $lmpart[$gtabid]['reminder'];
		$filter['reminder'][$gtabid] = $lmpart[$gtabid]['reminder'];
		$filter['reminder_group'][$reminderID] = $lmpart[$gtabid]['reminder_group'];
		$filter['reminder_user'][$reminderID] = $lmpart[$gtabid]['reminder_user'];
		$filter['reminder_create'][$reminderID] = $lmpart[$gtabid]['reminder_create'];
		$filter['reminder_date'][$reminderID] = $lmpart[$gtabid]['reminder_date'];
		$filter['reminder_from'][$reminderID] = $lmpart[$gtabid]['reminder_from'];
		$filter['reminder_to'][$reminderID] = $lmpart[$gtabid]['reminder_to'];
	}
	
	# --- relation ---
	if($lmpart[$gtabid]["relation"] AND !$verkn){
		$verkn = set_verknpf($lmpart[$gtabid]["relation"]['gtabid'],$lmpart[$gtabid]["relation"]['fieldid'],$lmpart[$gtabid]["relation"]['ID'],0,0,1,$lmpart[$gtabid]["relation"]['type']);
	}

	# --- verknparams ---
	if($verknparams = $gfield[$verkn['tabid']]["verknparams"][$verkn['fieldid']]){
		if(!is_array($lmpart[$key]["showfields"])){
		  $onlyfield[$verknparams] = explode(",",$lmpart[$verknparams]["showfields"]);
		}else{
		  $onlyfield[$verknparams] = $lmpart[$verknparams]["showfields"];
		}
		if($GLOBALS["lmpar"]["use_noids"]){
		  $onlyfield[$verknparams] = translateShowFields($verknparams,$onlyfield[$verknparams]);
		}
        $verkn['verknparams'] = 1;
        $rverkn[$verknparams] = $verknparams;
	}

	# --- relationvalue ---
	$filter["relationval"][$gtabid] = $lmpart[$gtabid]["relationval"];
	
	######### gresult Abfrage ##########
	$gresult = get_gresult($gtabid,1,$filter,$gsr,$verkn,$onlyfield,$lmpart[$gtabid]["ID"],$extension);

	if(in_array("gresult",$lmpart["getvars"])){$lmb[$action]["gresult"] = $gresult;}
	#$GLOBALS["umgvar"]["resultspace"] = $resultspace;

	# ---------------------- Inhaltsfilter ---------------------------------------
	unset($fresult);
	if(in_array("fresult",$lmpart["getvars"])){

		$bzm = 0;
		while($bzm < $gresult[$gtabid]["res_viewcount"]) {
			# ---- auf Endlosverknüpfungen prüfen ------
			$still_done[$gtabid] = $gtabid;

			# ---- Endlosverknüpfungen bei Selbstverknüpfung ------
			if($gverkn[$gtabid]["id"] AND $gtab["sverkn"][$gtabid]){
				if(!$still_sdone[$gtabid]){$still_sdone[$gtabid] = array();}
				if(in_array($gresult[$gtabid]["id"][$bzm],$still_sdone[$gtabid])){$bzm++; continue;}
				$still_sdone[$gtabid][] = $gresult[$gtabid]["id"][$bzm];
			}

			# Datensatz ID
			$did = $gresult[$gtabid]["id"][$bzm];
			
			# Schleife aller 1:1 Verknüpfungen
			foreach($rverkn as $key0 => $gtabid_){

				# falls Tabelle angefordert
				if($lmpart[$gtabid_]["showfields"]){
					# fieldlist
					if(!is_array($lmpart[$gtabid_]["showfields"])){
						$fieldlist = explode(",",$lmpart[$gtabid_]["showfields"]);
					}else{
						$fieldlist = $lmpart[$gtabid_]["showfields"];
					}
					if($GLOBALS["lmpar"]["use_noids"]){
						$fieldlist = translateShowFields($gtabid_,$fieldlist);
					}

					foreach ($gfield[$gtabid_]["sort"] as $key => $value){

						# clear names
						if($GLOBALS["lmpar"]["use_noids"]){
							$rkey = "*".$gfield[$gtabid_]["field_name"][$key];
							$rgtabid_ = "#".$gtab["table"][$gtabid_];
						}else{
							$rkey = $key;
							$rgtabid_ = $gtabid_;
						}

						if((in_array($gfield[$gtabid_]["id"][$key],$fieldlist) OR $fieldlist[0] == 0) AND ($gfield[$gtabid_]["field_type"][$key] != 11 OR !$lmpart[$gfield[$gtabid_]["verkntabid"][$key]]["showfields"] ) AND $gfield[$gtabid_]["field_type"][$key] < 100){
						
							# Standardausgabe
							$fname = "cftyp_".$gfield[$gtabid_]["funcid"][$key];
							$fresult[$rgtabid_][$did][$rkey] = $fname($bzm,$key,$gtabid_,4,$gresult,0);
							# no htmlentities
							if($lmpart[$rgtabid_]["noencode"]){
								$fresult[$rgtabid_][$did][$rkey] =  html_entity_decode($fresult[$rgtabid_][$did][$rkey],ENT_QUOTES);
							}
							
							# -- Upload Dateien todo ---
							if($gfield[$gtabid_]["field_type"][$key] == 6){
								# --- thumbs generieren ---
								if($lmpart[$gtabid_]["thumbsize"][$key]){
									$size = explode("x",$lmpart[$gtabid_]["thumbsize"][$key]);
									if($piclist = $fresult[$rgtabid_][$did][$rkey]){
										foreach($piclist["id"] as $key1 => $value1){
                                            // todo
											$piclist["url"][$key1] = lmb_getThumbnail(array($key1,$piclist["secname"][$key1],$piclist["mimeid"][$key1],$piclist["thumb_ok"][$key1],$piclist["level"][$key1],$piclist["mid"][$key1]),$size[0],$size[1],1,geturl: 1);
										}
										$fresult[$rgtabid_][$did][$rkey] = $piclist;
									}
								}
							}elseif($lmpart[$gtabid_]["fieldlimit"][$key]){
								# clear names
								if($GLOBALS["lmpar"]["use_noids"]){
									$fresult[$rgtabid_][$did]["*".$gfield[$gtabid_]["field_name"][$key]] = lmb_substr($fresult[$rgtabid_][$did][$rkey],0,$lmpart[$gtabid_]["fieldlimit"][$key]);
								}else{
									$fresult[$gtabid_][$did][$key] = lmb_substr($fresult[$gtabid_][$did][$key],0,$lmpart[$gtabid_]["fieldlimit"][$key]);
								}
								# no htmlentities
								if($lmpart[$rgtabid_]["noencode"]){
									$fresult[$rgtabid_][$did][$rkey] =  html_entity_decode($fresult[$rgtabid_][$did][$rkey],ENT_QUOTES);
								}
							}
						}
					}


					# Verknüpfung aufsteigend
					if($gverkn[$gtabid_]["id"]){
						foreach($gverkn[$gtabid_]["id"] as $key => $value){
							# Abbruch bei Endlosverknüpfung
							if(($value != $gtabid_ AND in_array($value,$still_done)) OR !in_array($gfield[$gtabid_]["id"][$key],$fieldlist)) continue;
							$verkn_ = set_verknpf($gtabid_,$gfield[$gtabid_]["field_id"][$key],$did,0,0,1,0);
							# clear names
							if($GLOBALS["lmpar"]["use_noids"]){
								if($vres = getGtabLevel($lmpart,$lmb,$action,$gfield[$gtabid_]["verkntabid"][$key],$verkn_,1)){
									$fresult[$rgtabid_][$did]["*".$gfield[$gtabid_]["field_name"][$key]] = $vres;
								}
							}else{
								if($vres = getGtabLevel($lmpart,$lmb,$action,$gfield[$gtabid_]["verkntabid"][$key],$verkn_,1)){
									$fresult[$gtabid_][$did][$key] = $vres;
								}
							}
						}
					}
				}

			}

			# Verknüpfung absteigend
			#if($gfield[$gtabid]["r_verkntabid"]){
			#	foreach($gfield[$gtabid]["r_verkntabid"] as $key => $value){
			#		# Abbruch bei Selbstverknüpfung
			#		if($gfield[$gtabid]["r_verkntabid"][$key] == $gtabid) continue;
			#		if(!in_array($value,$still_done)){
			#			$verkn_ = set_verknpf($value,$gfield[$value]["field_id"][$key],$gresult[$gtabid]["id"][$bzm],0,0,1,2);
			#			$fresult[$did][$gfield[$gtabid]["r_verknfieldid"][$key]] = getGtabLevel($lmpart,$lmb,$action,$gfield[$gtabid]["r_verkntabid"][$key],$filter,0,$verkn_,0,0,1);
			#		}
			#	}
			#}

			# ---- Endlosverknüpfungen leeren ------
			$still_done[$gtabid] = null;
			$still_sdone[$gtabid] = null;

			$bzm++;
		}




		if(!$rec){

		    if($GLOBALS["lmpar"]["use_noids"]){
				$gtabid_ = "#".$gtab["table"][$gtabid];
			}else{
				$gtabid_ = $gtabid;
			}

			$lmb[$action]["result"]["res_count"][$gtabid_] = $gresult[$gtabid]["res_count"];
			$lmb[$action]["result"]["max_count"][$gtabid_] = $gresult[$gtabid]["max_count"];
			$lmb[$action]["result"]["page"][$gtabid_] = $filter["page"][$gtabid];
		}

		return $fresult;
	}

}

?>
