<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




/*
 * Create exiftool specific config file
 */
function create_exif_conf() {
	global $umgvar;
    global $DBA;
	
	$config_file = TEMPPATH . 'conf/exiftool.conf';
	$handler = fopen($config_file,"w");
	
	$val = "# This file contains metadata definition for limbas ldms_meta table
	    
	    
%Image::ExifTool::UserDefined = (	    
    'Image::ExifTool::XMP::xmp' => {
";

	$sysfields = array('id','del');
	
	#$gtabid = $gtab['argresult_id']['LDMS_META'];
	if($fields = dbf_5(array($DBA['DBSCHEMA'],'LDMS_META'))){
	    foreach($fields['columnname'] as $key => $value){
	        
	        if(in_array(lmb_strtolower($value),$sysfields)){continue;}
	        
	        $val .= "           ".$value."=> {},\n";
	    }
	}

$val .="
    }

);
";
	
	fputs($handler,$val);
	fclose($handler);
}

function put_meta($ID,$mimetype,$absfile) {
	global $umgvar;

	if(!$umgvar["update_metadata"] OR !$umgvar['use_exif'] OR (is_array($umgvar["update_metadata"]) AND (!in_array($mimetype,$umgvar["update_metadata"])))){return;}

	# use IPTC
    // todo - use IPTC with exiftool
    /*
	if(($umgvar['use_exif'] == 2 AND $mimetype == "jpeg" OR $mimetype == "jpg" OR $mimetype == "tiff")){
		$meta = getmeta_from_db($ID,0);
		putmeta_iptc($absfile,$meta);
	# use XMP
	}else{
		$meta = getmeta_from_db($ID,0);
		putmeta_exif($absfile,$meta);
	}
    */

    # use XMP
    $meta = getmeta_from_db($ID,0);
	putmeta_exif($absfile,$meta);
}

function putmeta_exif($absfile,$meta){
	global $umgvar;
	global $session;

	if(!$meta){return false;}
	
	if(!file_exists(TEMPPATH . 'conf/exiftool.conf')){
	   create_exif_conf();
	}

	foreach ($meta as $key => $value){
	    $value = str_replace('"','\"',$value);
	    $val .= "-".lmb_strtolower($key)."=\"$value\" ";
	}

	$cmd = "exiftool -config ". TEMPPATH ."conf/exiftool.conf -P -overwrite_original $val $absfile";
	$result = exec($cmd, $retval);

	if($retval){return false;}
    return true;
}

/**
* Mata-Daten auslesen
* @global db database handler
* @return meta
*/
function getmeta_from_db($ID,$index){
	global $db;
	global $gfile;
	global $gtab;

	$mark = "<font color=\"green\">meta:</font> ";


	# all Metadata Tables
	if($allmeta = array_keys($gtab["verkn"],$gtab["argresult_id"]["LDMS_FILES"])){
		foreach ($allmeta as $key0 => $metatabid){
			$from[] = $gtab["table"][$metatabid];
			if($gtab["table"][$metatabid] != "LDMS_FILES"){
				$where[] = "LDMS_FILES.ID = ".$gtab["table"][$metatabid].".ID";
			}
		}
	}

	if($from AND $where){
	$sqlquery = "SELECT * FROM ".implode(",",$from)." WHERE LDMS_FILES.ID = $ID AND ".implode(" AND ",$where);
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {return false;}
	if(lmbdb_fetch_row($rs)){
		foreach ($gfile['name'] as $key => $value){
			if($gfile['field_type'][$key] != 100 AND !$gfile["virt"][$key] AND $gfile["tab"][$key] != "LDMS_FILES" AND $gfile["name"][$key] != "ID" AND $gfile["name"][$key] != "MIMETYPE"){
				$result = lmbdb_result($rs, $value);

				# date
				if($gfile['typ'][$key] == 4){
					$result = get_date($result,2);
				}

				if($index){
					if($result){$meta[] = $mark.str_replace("\n"," ",$result);}
				}else{
					if($result){$meta[$value] = $result;}
				}
			}
		}
		return $meta;
	}}
	return false;
}

/**
 * get Metadata
 *
 * @param string $absfile
 * @param string $mimetype
 * @param num $detaillevel
 * @return array of metadata
 */
function getmeta_from_file($absfile,$mimetype,$detaillevel=1){
	global $umgvar;

	$mime = explode("/",$mimetype);

	# get basic metatada
	if($mime[0] == "image" OR ($mime[1] == "pdf" AND ($umgvar["imagemagickpdf"] OR $detaillevel == 3))){
		if($mime[1] == "pdf"){$page = "'[0]'";}else{$page = "";}
		if($umgvar["ext_im_analyse"]){$ex = ",%k";}
		$cmd = $umgvar["imagemagick"]."/identify -format %C,%g,%xx%y,%z-bit,%r,%Q\%,%b,$ex ".$umgvar["imagemagicklimit"]." ".$absfile.$page;
		$picinf = explode(",",`$cmd`);
		if($picinf){
			$meta["FORMAT"] = substr(trim(str_ireplace('undefined','',$picinf[0])." ".str_ireplace('undefined','',$picinf[5])),0,128);
			$meta["GEOMETRY"] = explode("+",$picinf[1]);
			$meta["GEOMETRY"] = substr($meta["GEOMETRY"][0],0,20);
			$meta["RESOLUTION"] = substr(str_ireplace(" undefined","",$picinf[2]),0,30);
			$meta["DEPTH"] = substr($picinf[3],0,30);
			$meta["TYPE"] = substr($picinf[4],0,20);
			#$meta["SIZE"] = parse_db_int(filesize($absfile),16);
			if($umgvar["ext_im_analyse"]){
				$meta["COLORS"] = parse_db_int(trim($picinf[7],10));
			}
		}
	}

    // exiftool
	if($detaillevel >= 2) {
        // ignore metadata
        if ($umgvar["read_metadata"] && (is_array($umgvar["read_metadata"]) && (in_array($mime[1], $umgvar["update_metadata"])))) {
            if ($meta_ = getmeta_raw($absfile)) {
                if (is_array($meta)) {
                    $meta = array_merge($meta, $meta_);
                } else {
                    $meta = $meta_;
                }
            }
        }
    }

	if(is_array($meta)){
		return $meta;
	}else{
		return false;
	}
}

# update Metadata to db
function putmeta_to_db($ID,$meta){
	global $gfile;
	global $db;
	global $gtab;
	global $gfield;
    global $umgvar;

    if(!is_array($meta)){return;}

	require_once(COREPATH . 'gtab/gtab.lib');
	$sysfields = array('id','del','mimetype');

	# Suche ob Metafeld in DB vorhanden
	foreach($meta as $key => $value){
	    $field = lmb_strtoupper($key);
        
        if(is_array($value)) {
            $value = implode(', ', $value);
        }
        
		if($k = array_search($field,$gfile["name"]) AND trim($value)){
			# ignore systemfields from ldms_files
		    if($gfile["tabid"][$k] == $gtab["argresult_id"]["LDMS_FILES"] AND $gfield[$gtab["argresult_id"]["LDMS_FILES"]][$gfile["fid"][$k]] <= 32){continue;}
		    # LDMS_META / LDMS_FILES  $history_fields
			$fk = $gfile["tabid"][$k].",".$gfile["fid"][$k].",".$ID;
			$history_fields[$fk] = $value;
		}
	}

	# LDMS_META Tabelle updaten
	if($history_fields){
		$sqlquery = "UPDATE LDMS_FILES SET INDM = ".LMB_DBDEF_FALSE.", META = ".LMB_DBDEF_TRUE." WHERE ID = $ID";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {return false;}
		update_data($history_fields,3,0,1);
	}

	return true;
}

# refresh Metadata to db
function refreshmeta_to_db($ID){
	global $db;
	global $umgvar;
	global $filestruct;
	
	if($GLOBALS["create_new_file"]){return true;}
    if(!$filestruct){get_filestructure();}
	# get Details
	$sqlquery = "SELECT DISTINCT LDMS_FILES.SECNAME,LDMS_FILES.LEVEL,LMB_MIMETYPES.MIMETYPE,LMB_MIMETYPES.EXT FROM LDMS_FILES,LMB_MIMETYPES WHERE LDMS_FILES.ID = $ID AND LDMS_FILES.MIMETYPE = LMB_MIMETYPES.ID";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {return false;}
	$level = lmbdb_result($rs,'LEVEL');
	#$absfile = $umgvar["upload_pfad"].$filestruct['path'][$level].lmbdb_result($rs,"SECNAME").".".lmbdb_result($rs,"EXT");
	$absfile = lmb_getFilePath($ID,$level,lmbdb_result($rs,"SECNAME"),lmbdb_result($rs,"EXT"));
	$mimetype = lmbdb_result($rs,"MIMETYPE");
	$ext = lmbdb_result($rs,"EXT");

	# Metadaten in Datei schreiben
	put_meta($ID,$ext,$absfile);

	# reset Index
	$sqlquery = "UPDATE LDMS_FILES SET INDM = ".LMB_DBDEF_FALSE.", META = ".LMB_DBDEF_TRUE." WHERE ID = $ID";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {return false;}
	$sqlquery = "DELETE FROM LMB_INDIZE_F WHERE FID = $ID AND META = ".LMB_DBDEF_TRUE;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {return false;}
	$sqlquery = "DELETE FROM LMB_INDIZE_FS WHERE FID = $ID AND META = ".LMB_DBDEF_TRUE;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {return false;}

	return true;
}




# ---------------- PDf -----------------
function getmeta_raw($absfile){

	$meta = array();
	# exiftool -php -g1 -q -struct
	# exiftool -php -g
	
	if($data = `exiftool -php $absfile`){
	   $e = eval('return ' . $data);
	}

	if(is_array($e[0])){
        return $e[0];
	}
	
	return false;
}


function getmeta_struct($absfile){

	$meta = array();
	# exiftool -php -g1 -q -struct
	# exiftool -php -g
	
	if($data = `exiftool -php -g1 -q -struct $absfile`){
	   $e = eval('return ' . $data);
	}

	if(is_array($e[0])){
	    #return nl2br( eregi_replace( " ", " ", print_r( $e[0], TRUE ) ) );
        return $e[0];
	}
	
	return false;
}
    


