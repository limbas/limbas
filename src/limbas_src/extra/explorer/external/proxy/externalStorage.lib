<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

/**
 * To use the functions in this file, all needed LmbExternalStorage classes, as well as the include.lib need to be loaded.
 */

/**
 * Uploads a file to an external storage, as defined in limbas, and creates a file dataset in limbas.
 *
 * @param string $authToken authentication token generated by limbas, passed by limbas-user
 * @param string $fileName current name of file uploaded by user
 * @param string $filePath current temporary path of file uploaded by user
 * @param string $fileType mimetype of file uploaded by user
 * @param int $folderID id of limbas target folder
 *
 * optional: link to dataset
 * @param int $gtabid
 * @param int $fieldid
 * @param int $datid
 *
 * @param string $duplicateType optional (skip|rename|overwrite|versioning)
 * @param string $versionComment optional comment for new version if duplicateType is 'versioning'
 *
 * @return void
 *
 * @throws Exception
 */
function lmbExternalStorageUpload($authToken, $fileName, $filePath, $fileType, $folderID, $gtabid=null, $fieldid=null, $datid=null, $duplicateType=null, $versionComment=null) {
    global $lmbs;

    if (!$authToken) {
        throw new Exception('No auth token given!');
    }
    if (!($folderID = intval($folderID))) {
        throw new Exception('Invalid folder id!');
    }

    $lmpar = array();
    $lmpar[0]['getvars'] = array('fresult');
    $lmpar[0]['action'] = 'explorer_main';
    $lmpar[0]['LID'] = $folderID;

    $lmpar[0]['upload_file']['name'][0] = $fileName;
    $lmpar[0]['upload_file']['mimetype'][0] = $fileType; # TODO check?
    $lmpar[0]['upload_file']['noupload'][0] = 3; /* cloud upload */
    $lmpar[0]['upload_file']['file_size'][0] = filesize($filePath);

    # dataset link
    if ($gtabid and $fieldid and $datid) {
        $lmpar[0]['upload_file']['link'] = array();
        $lmpar[0]['upload_file']['link']['verkn_tabid'] = array($gtabid);
        $lmpar[0]['upload_file']['link']['verkn_fieldid'] = array($fieldid);
        $lmpar[0]['upload_file']['link']['verkn_ID'] = array($datid);
    }

    # duplicate handling
    if ($duplicateType) {
        if ($duplicateType === 'skip') {
            return;
        }
        $lmpar[0]['upload_file']['dublicate'][0] = $duplicateType;
        if ($duplicateType === 'versioning' and $versionComment) {
            $lmpar[0]['upload_file']['subj'][0] = $versionComment;
        }
    }

    # dont send session, send auth token instead
    $lmbs['session']['s_name'] = 'authToken';
    $lmbs['session']['s_id'] = $authToken;

    # soap request
    $lmb = call_client($lmpar);
    if (!$lmb or $lmb['error']) {
        if ($lmb['error'][0]) {
            throw new Exception(implode('<br>', $lmb['error'][0]));
        }
        throw new Exception('Request failed!');
    }
    $fileID = $lmb[0]['upload']['file_id'][0];
    $uniqueFileName = $lmb[0]['upload']['uniqueFileName'];
    $storageConfig = $lmb[0]['upload']['storageConfig'];
    $authToken = $lmb[0]['upload']['authToken'];
    if (!$fileID or !$uniqueFileName or !$storageConfig or !$authToken) {
        throw new Exception('Information missing from limbas!');
    }

    # get storage class instance
    $storage = LmbExternalStorage::fromConfig($storageConfig);

    # upload to storage
    $success = $storage->uploadFile($filePath, $uniqueFileName);

    # create download link if cloud
    $downloadLink = null;
    if ($success and $storageConfig['publicCloud']) {
        $downloadLink = $storage->createDownloadLink($uniqueFileName);
    }

    # ignore, or otherwise the already existing dataset will be deleted
    if (!(($duplicateType === 'overwrite' or $duplicateType === 'versioning') and !$success)) {
        # confirm upload
        $lmpar = array();
        $lmpar[0]['action'] = 'finish_remote_upload';
        $lmpar[0]['ID'] = $fileID;
        $lmpar[0]['success'] = $success;
        $lmpar[0]['uniqueFileName'] = $uniqueFileName;
        $lmpar[0]['downloadLink'] = $downloadLink;

        # dont send session, send auth token instead
        $lmbs['session']['s_name'] = 'authToken';
        $lmbs['session']['s_id'] = $authToken;

        call_client($lmpar);
    }

    if ($storageConfig['publicCloud'] and !$downloadLink) {
        throw new Exception('Could not generate download link!');
    }
    if (!$success) {
        throw new Exception('Could not upload file!');
    }
}

/**
 * Downloads a file from an external storage, as defined in limbas, and outputs its content.
 *
 * @param string $authToken authentication token generated by limbas, passed by limbas-user
 * @param int $fileID limbas file id to download
 * @param string $disposition optional, either 'i' for display in browser, or 'a' for direct download
 *
 * @return void
 *
 * @throws Exception
 */
function lmbExternalFileDownload($authToken, $fileID, $disposition='i') {
    global $lmbs;

    if (!$authToken) {
        throw new Exception('No auth token given!');
    }
    if (!($fileID = intval($fileID))) {
        throw new Exception('Invalid file id!');
    }

    # dont send session, send auth token instead
    $lmbs['session']['s_name'] = 'authToken';
    $lmbs['session']['s_id'] = $authToken;

    # limbas soap request
    $lmpar = array();
    $lmpar[0]['action'] = 'remote_download';
    $lmpar[0]['fileID'] = $fileID;
    $lmb = call_client($lmpar);
    if (!$lmb or !$lmb[0] or !$lmb[0]['file'] or !$lmb[0]['storageConfig'] or $lmb['error']) {
        if ($lmb['error'][0]) {
            throw new Exception(implode('<br>', $lmb['error'][0]));
        }
        throw new Exception('Request failed!');
    }

    # collect file information
    $fileNameUser = $lmb[0]['file']['name'];
    $fileNameStorage = $lmb[0]['file']['uniqueFileName'];
    $fileType = $lmb[0]['file']['mimetype'];
    $storageConfig = $lmb[0]['storageConfig'];

    # get cloud class instance
    $storage = LmbExternalStorage::fromConfig($storageConfig);

    header('Content-Type: ' . $fileType);
    if ($disposition === 'a') {
        header('Content-Disposition: attachement; filename="' . $fileNameUser . '"');
    } else if ($disposition === 'i') {
        header('Content-Disposition: inline; filename="' . $fileNameUser . '"');
    }
    $storage->downloadFile($fileNameStorage);
}
