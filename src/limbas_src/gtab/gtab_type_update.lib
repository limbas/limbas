<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




/* -------------------------- Number --------------------------------- */
function uftyp_1($gtab_id,$field_id,$ID,&$change_value){
    global $gfield;

    $change_value = trim($change_value);

    # ----- percent ------
    if ($gfield[$gtab_id]["data_type"][$field_id] == 21) {
        $change_value = trim(str_replace("%", "", $change_value));
    }

    if ($change_value === null OR $change_value == '') {
        return $gfield[$gtab_id]["field_name"][$field_id]." = NULL";
    # ----- float ------
    }elseif($gfield[$gtab_id]["parse_type"][$field_id] == 6){
		$change_value = parse_db_float($change_value,$gfield[$gtab_id]["size"][$field_id],$gfield[$gtab_id]["scale"][$field_id]);
	# ----- numeric ------
	}else{
		$change_value = parse_db_int($change_value);
	}
	
	if($change_value && !preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
        lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".$change_value;

	return $sqlquery;
}

/* -------------------------- Text --------------------------------- */
function uftyp_2($gtab_id,$field_id,$ID,&$change_value,$language=null) {
	global $gfield;

	if($change_value && !preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
        lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$fieldname = $gfield[$gtab_id]["field_name"][$field_id];
    if($language){
        $fieldname = 'LANG'.$language.'_'.$fieldname;
    }

	$change_value = parse_db_string($change_value,$gfield[$gtab_id]["size"][$field_id]);
	$sqlquery = $fieldname." = '".$change_value."'";
	$sqlquery = str_replace(array("\n", "\r"),"",$sqlquery);
	
	return $sqlquery;
}

/* -------------------------- Textblock --------------------------------- */
function uftyp_3($gtab_id, $field_id, $ID, &$change_value,$language=null) {
    global $gfield;

	if($change_value && !preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
        lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$fieldname = $gfield[$gtab_id]["field_name"][$field_id];
    if($language){
        $fieldname = 'LANG'.$language.'_'.$fieldname;
    }

    $change_value = parse_db_string($change_value,$gfield[$gtab_id]["size"][$field_id]);
    $sqlquery = $fieldname." = '".$change_value."'";

    return $sqlquery;
}

/* -------------------------- Select --------------------------------- */
function uftyp_9($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;
	global $gtab;
	global $session;
	global $umgvar;
    global $db;

    // multilang
    if ($gfield[$gtab_id]['multilang'][$field_id] AND $umgvar['multi_language']) {

        // get language select values
        foreach ($umgvar['multi_language'] as $lkey => $lval) {
            $sql_s[] = 'LANG' . $lval . '_WERT';
        }

        if ($session['dlanguage'] != $umgvar['default_language']) {
            $prefix = "LANG" . $session['dlanguage'] . "_";
        }

        // change values
        if ($change_value) {
            $sqlquery = "SELECT WERT," . implode(',', $sql_s) . " FROM LMB_SELECT_W WHERE POOL = " . $gfield[$gtab_id]["select_pool"][$field_id] . " AND " . $prefix . "WERT = '" . parse_db_string($change_value, 160) . "'";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
            if (lmbdb_fetch_row($rs)) {
                foreach ($umgvar['multi_language'] as $lkey => $lval) {
                    if ($session['dlanguage'] != $lval) {
                        $sql_t[] = "LANG" . $lval . "_" . $gfield[$gtab_id]['rawfield_name'][$field_id] . " = '" . parse_db_string(lmbdb_result($rs, 'LANG' . $lval . '_WERT'), 160) . "'";
                    }
                }
                if ($session['dlanguage'] != $umgvar['default_language']) {
                    $sql_t[] = $gfield[$gtab_id]['rawfield_name'][$field_id] . " = '" . parse_db_string(lmbdb_result($rs, 'WERT'), 160) . "'";
                }

            }

        // empty values
        } else {
            foreach ($umgvar['multi_language'] as $lkey => $lval) {
                if ($session['dlanguage'] != $lval) {
                    $sql_t[] = "LANG" . $lval . "_" . $gfield[$gtab_id]['rawfield_name'][$field_id] . " = ''";
                }
            }
            $sql_t[] = $gfield[$gtab_id]['rawfield_name'][$field_id] . " = ''";
        }

        if(is_array($sql_t)) {
            $sqlquery1 = "UPDATE " . $gtab['table'][$gtab_id] . " SET " . implode(',', $sql_t) . " WHERE " . $gtab['keyfield'][$gtab_id] . " = $ID";
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }
        }

        if (!$commit) {
            return uftyp_2($gtab_id, $field_id, $ID, $change_value);
        }

    } else {
        // check if value in pool
        $sqlquery = "SELECT WERT FROM LMB_SELECT_W WHERE POOL = " . $gfield[$gtab_id]["select_pool"][$field_id] . " AND WERT = '" . parse_db_string($change_value, 160) . "'";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
        if (!lmbdb_fetch_row($rs)) {
            lmb_log::error('update_data - value not in pool', null, $gtab_id, $field_id);
            return false;
        }
        return uftyp_2($gtab_id, $field_id, $ID, $change_value);
    }

}


/* -------------------------- Date --------------------------------- */
function uftyp_4($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

    // browser datepicker
    if($gfield[$gtab_id]["select_pool"][$field_id] == 2) {
        $change_value = str_replace('T',' ',$change_value);
    }

	if($change_value AND !preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
        lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id,$ID);
		return false;
	}

	if($gfield[$gtab_id]["data_type"][$field_id] == 40){$isdate = 1;}
	$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".LMB_DBDEF_DTNULL;

	if ($change_value) {
		if($datestr = convert_date($change_value,$isdate)){
			$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = '$datestr'";
		}else{
			return false;
		}
	}
	return $sqlquery;
}

function uftyp_19($gtab_id,$field_id,$ID,&$change_value) {
	return uftyp_4($gtab_id,$field_id,$ID,$change_value);
}

/* -------------------------- Boolean --------------------------------- */
function uftyp_5($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;
	
	if (parse_db_bool($change_value) == LMB_DBDEF_TRUE) {
		$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".LMB_DBDEF_TRUE;
	} else {
		$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".LMB_DBDEF_FALSE;
	}
	
	return $sqlquery;
}


/* -------------------------- Currency --------------------------------- */
function uftyp_7($gtab_id, $field_id, $ID, &$change_value) {
    global $gfield;
    global $lmcurrency;

    if ($change_value || trim($change_value) === '0') {
        if (is_numeric($change_value)) {
            $cval = $change_value;
            $ccur = '';
        }elseif(is_array($change_value)){
            $cval = $change_value[0];
            $ccur = $change_value[1];
        } else {
            $cval = preg_replace('/[ A-Za-z]/', '', $change_value);
            $ccur = trim(lmb_strtoupper(preg_replace('/[0-9,.-]/', '', $change_value)));
        }

        # check if currency is valid
        if (!$lmcurrency['currency'][$ccur] AND $ccur) {
            lmb_alert("currency $ccur not available!\\nuse EUR, USD...");
            $ccur = '';
        }

        # use default currency
        if (!$ccur) {
            $ccur = $gfield[$gtab_id]['currency'][$field_id];
        }

        # check if value is valid
        $cval = parse_db_float($cval, $gfield[$gtab_id]['size'][$field_id], $gfield[$gtab_id]['scale'][$field_id]);
        if (!preg_match('/' . $gfield[$gtab_id]['regel'][$field_id] . '/', $cval)) {
            lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
            return false;
        }
        $ccur = "'" . parse_db_string($ccur, 10) . "'";
    } else {
        $cval = LMB_DBDEF_NULL;
        $ccur = LMB_DBDEF_NULL;
    }

    $sqlquery = $gfield[$gtab_id]['field_name'][$field_id] . ' = ' . $cval;
    $sqlquery .= ',' . $gfield[$gtab_id]['field_name'][$field_id] . '_C = ' . $ccur;
    return $sqlquery;
}

/* -------------------------- Multiple Choice / select --------------------------------- */
function uftyp_10($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	return uftyp_23($gtab_id,$field_id,$ID,$change_value);
}

/* -------------------------- Multiple Choice / Attribut --------------------------------- */
function uftyp_11($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	return uftyp_23($gtab_id,$field_id,$ID,$change_value);
}

/* -------------------------- Upload - deprecated--------------------------------- */
function uftyp_12($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	$fformname = $gfield[$gtab_id]["form_name"][$field_id];
	require_once(COREPATH . 'extra/explorer/filestructure.lib');

	if($_REQUEST[$gfield[$gtab_id]["form_name"][$field_id]."_delete"]){
		$delfiles = explode(";",$_REQUEST[$gfield[$gtab_id]["form_name"][$field_id]."_delete"]);
		foreach ($delfiles as $dfkey => $dfval){
			if($dfval){lmb_deleteFile($dfval);}
		}
	}
	$file["file"] = $_FILES[$fformname]['tmp_name'];
	$file["file_name"] = $_FILES[$fformname]['name'];
	$file["file_type"] = $_FILES[$fformname]['type'];
	$file["file_archiv"] = $GLOBALS[$gfield[$gtab_id]["form_name"][$field_id]."_archiv"];
	$level = $gfield[$gtab_id]["file_level"][$field_id];

    foreach($file["file"] as $key => $value){
        if($file["file"][$key]){
            $file_["file"][] = $file["file"][$key];
            $file_["file_name"][] = $file["file_name"][$key];
            $file_["file_type"][] = $file["file_type"][$key];
            $file_["file_archiv"][] = $file["file_archiv"][$key];
        }
    }

	if(is_array($file_["file"])){
	    $dublicate['type'][0] = 'rename';
		if(!$file_id = lmb_fileupload($file_,$level,array("datid" => $ID,"gtabid" => $gtab_id,"fieldid" => $field_id),0,$dublicate)){return false;}
	}

	return true;
}

/* -------------------------- PHP Argument --------------------------------- */
function uftyp_13($gtab_id,$field_id,$ID,&$change_value) {

	return false;
}

/* -------------------------- Relations --------------------------------- */
function uftyp_14($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	// drop relation for ajax relation fields if empty
	if($change_value == '#L#delete'){$change_value=null; $verkn_del = $ID;}
	elseif($change_value[0] == '#L#delete'){$change_value=null; $verkn_del = 'unlinkall';}
	
	// define relation
	$verkn = set_verknpf($gtab_id,$field_id,$ID,is_numeric($change_value) ? array($change_value) : $change_value,$verkn_del,0,0);

	// ext-filesystem
	if($LID = $gfield[$gtab_id]["file_level"][$field_id]){
        $verkn["linkParam"]["LID"] = $LID;
	}

	// set relation
	$sj = set_joins($gtab_id,$verkn);
	if($sj === false){
	    return false;
	}

	return true;
}

/* -------------------------- URL --------------------------------- */
function uftyp_18($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;
	
	if(!preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
		lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	if($change_value != '') {
		$sqlquery .= $gfield[$gtab_id]["field_name"][$field_id]." = '".$change_value."'";
	}else{
		$sqlquery .= $gfield[$gtab_id]["field_name"][$field_id]." = ''";$query = 1;
	}
	$change_value = $sqlquery;
		
	return $sqlquery;
}


/* -------------------------- User Group --------------------------------- */
function uftyp_21($gtabid,$fieldid,$ID,&$change_value) {
    global $gfield;
    global $gtab;
    global $db;

    require_once(COREPATH . 'gtab/gtab.lib');

    if(is_string($change_value)) {
        $usgra = explode("_", $change_value);
    }elseif(is_array($change_value)){
        $usgra = $change_value;
    }

    // precheck routine
    $query_dataid = array($fieldid => $change_value);
    $query_result = null;
    $old_gresult = null;
    $triggerResult = null;
    if(!update_data_precheck($gtabid,$ID,$query_dataid,$query_result,$old_gresult,$triggerResult)){return false;}

    # edit element
    if(is_numeric($usgra[0])){
        $edit_typ = $usgra[1];
        $edit_id = $usgra[0];

        if($edit_typ == 'u' OR $edit_typ == 'g'){

            $sqlquery = "SELECT UGID FROM LMB_UGLST WHERE TABID = ".parse_db_int($gtabid)." AND FIELDID = ".parse_db_int($fieldid)." AND DATID = ".parse_db_int($ID)." AND TYP = '".parse_db_string($edit_typ,1)."' AND UGID = ".parse_db_int($edit_id);
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
            if(!$rs){return false;}

            if(lmbdb_result($rs, "UGID")){
                $sqlquery = "DELETE FROM LMB_UGLST WHERE TABID = ".parse_db_int($gtabid)." AND FIELDID = ".parse_db_int($fieldid)." AND DATID = ".parse_db_int($ID)." AND TYP = '".parse_db_string($edit_typ,1)."' AND UGID = ".parse_db_int($edit_id);
                $rs1 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
                if(!$rs1){return false;}
            }else{
                $sqlquery = "INSERT INTO LMB_UGLST (UGID,TABID,FIELDID,DATID,TYP) VALUES (".parse_db_int($edit_id).",".parse_db_int($gtabid).",".parse_db_int($fieldid).",".parse_db_int($ID).",'".parse_db_string($edit_typ,1)."')";
                $rs1 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
                if(!$rs1){return false;}
            }

            $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$fieldid]." = (SELECT COUNT(*) FROM LMB_UGLST WHERE TABID = ".parse_db_int($gtabid)." AND FIELDID = ".parse_db_int($fieldid)." AND DATID = ".parse_db_int($ID).") WHERE ID = $ID";
            $rs1 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
            if(!$rs1){return false;}

        }
    }

    // precheck routine
    if(!update_data_postcheck($gtabid,$ID,$query_dataid,$old_gresult,$triggerResult)){return false;}

    return true;
}



/* -------------------------- Long --------------------------------- */
function uftyp_22($gtab_id,$field_id,$ID,&$change_value,$language=null) {
	
	global $db;
	global $session;
	global $gtab;
	global $gfield;

	// TODO
	#if(LMB_DBFUNC_LONGHANDLE AND !$gfield[$gtab_id]["indize"][$field_id]){
    #    return uftyp_3($gtab_id,$field_id,$ID,$change_value);
    #}

	$fieldname = $gfield[$gtab_id]["field_name"][$field_id];
    if($language){
        $fieldname = 'LANG'.$language.'_'.$fieldname;
    }

    # --- old value ----
    if($gtab["trigger"][$gtab_id] OR $gtab["editrule"][$gtab_id] OR $gfield[$gtab_id]["editrule"] OR $gfield[$gtab_id]["trigger"] OR $gtab["logging"][$gtab_id] OR $gtab["versioning"][$gtab_id] OR $gtab["lockable"][$gtab_id] OR $gfield[$gtab_id]["sync"]){
        $old_gresult = get_gresult($gtab_id,1,null,null,null,null,$ID);
    }

	# --- check if changed ---
	if($old_gresult[$gtab_id][$field_id][0] != $change_value){

        // postcheck routine
        $triggerResult = null;
        $query_dataid = array($field_id => $change_value);

        #$change_value_ = $change_value;
        #$query_result[$gtab_id][$ID][$field_id] = uftyp_2($gtab_id,$field_id,$ID,$change_value_);

        if(!update_data_precheck($gtab_id,$ID,$query_dataid,$query_result,$old_gresult,$triggerResult)){return false;}

		# --- prepare ---
		$prepare_string = "UPDATE ".$gtab["table"][$gtab_id]." SET EDITDATUM = ".LMB_DBDEF_TIMESTAMP.", EDITUSER = ".$session['user_id'].", ".$fieldname." = ? WHERE ID = $ID";
        if(!lmb_PrepareSQL($prepare_string,array($change_value),__FILE__,__LINE__)){return false;}

        // todo Multilang
		if($gfield[$gtab_id]["indize"][$field_id]){
			$sqlquery1 = "UPDATE ".$gtab["table"][$gtab_id]." SET IND_$field_id = ".LMB_DBDEF_FALSE." WHERE ID = $ID";
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
			if(!$rs1) {$commit = 1;}
			$sqlquery = "DELETE FROM LMB_INDIZE_D WHERE REF = $ID AND TABID = $gtab_id AND FIELDID = $field_id";
			$rs = lmbdb_exec($db,$sqlquery) or indize_errorhandle(lmbdb_errormsg($db));
			if(!$rs) {$commit = 1;}
			$sqlquery = "DELETE FROM LMB_INDIZE_DS WHERE REF = $ID AND TABID = $gtab_id AND FIELDID = $field_id";
			$rs = lmbdb_exec($db,$sqlquery) or indize_errorhandle(lmbdb_errormsg($db));
			if(!$rs) {$commit = 1;}
		}

        if(!$commit){
            // postcheck routine
            if(!update_data_postcheck($gtab_id,$ID,$query_dataid,$old_gresult,$triggerResult)){return false;}
        }

	}

	return true;

}

/* -------------------------- Multiple Choice - ALL --------------------------------- */
function uftyp_23($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

    $require = require_once(COREPATH . 'gtab/sql/add_select.dao');
    $change_value = str_replace('#L#', '', $change_value);

    if(!pool_select_prepare($gtab_id,$field_id,$ID,$change_value)){return false;}

	return true;
}

/* -------------------------- Time --------------------------------- */
function uftyp_25($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	if($change_value AND !preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
        lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = NULL";
	if ($change_value) {
		if($timestr = convert_time($change_value)){
			$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = '$timestr'";
		}
	}

	return $sqlquery;
}

/* -------------------------- Filesize --------------------------------- */
function uftyp_29($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	if(!preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
		lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$change_value = parse_db_float($change_value);
	$fsize = str_replace(" ","",str_replace(",",".",$change_value));
	$change_value = file_size_convert($change_value);
	$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".$change_value;

	return $sqlquery;
}

/* -------------------------- Mimetype --------------------------------- */
function uftyp_30($gtab_id,$field_id,$ID,&$change_value) {
	global $gfield;

	if(!preg_match("/".$gfield[$gtab_id]["regel"][$field_id]."/",$change_value)){
		lmb_log::error('update_data - regex failed', null, $gtab_id, $field_id, $ID);
		return false;
	}

	$change_value = parse_db_int($change_value);
	$sqlquery = $gfield[$gtab_id]["field_name"][$field_id]." = ".$change_value;
	
	return $sqlquery;
}


/* -------------------------- SQL Argument --------------------------------- */
function uftyp_31($gtab_id,$field_id,$ID,&$change_value) {

	return null;
}

/* -------------------------- Sync-Slave --------------------------------- */
function uftyp_35($gtab_id,$field_id,$ID,&$change_value) {

	return uftyp_1($gtab_id,$field_id,$ID,$change_value);
}

/* -------------------------- multitenants --------------------------------- */
function uftyp_36($gtab_id,$field_id,$ID,&$change_value) {
    $change_value = parse_db_int($change_value);

    global $gtab;
    global $lmmultitenants;

    if(!$mid = $lmmultitenants['translate'][$change_value]){return;}

    $query = uftyp_2($gtab_id,$field_id,$ID,$change_value);

    // auto set syncslave if present
    if($gtab["datasync"][$gtab_id] AND $lmmultitenants['syncslave'][$mid]){
        $query .= ", LMB_SYNC_SLAVE = ".$lmmultitenants['syncslave'][$mid];
    }

	return $query;
}


/* -------------------------- validity --------------------------------- */
function uftyp_37($gtab_id,$field_id,$ID,&$change_value) {
    global $gtab;
    global $gfield;
    global $db;
    global $umgvar;
    static $valid_done;

    // skip update if version or copy
    if($GLOBALS['use_typ'] == 'versioning' OR $GLOBALS['use_typ'] == 'copy'){
        return true;
    }

    if($change_value[0] AND !$current_vfrom = get_stamp(convert_date($change_value[0],1))){
        return false;
    }
    if($change_value[1] AND !$current_vto = get_stamp(convert_date($change_value[1],1))){
        return false;
    }

    if($gtab["datasync"][$gtab_id] == 1) {
        $sqlsync = ",LMB_SYNC_ID,LMB_SYNC_SLAVE";
    }

    // get validity stamps with versioning
    if($gtab['validity'][$gtab_id] == 2) {

        // get current data
        $sqlquery = "SELECT LMB_VALIDFROM,LMB_VALIDTO,VPID,VID $sqlsync FROM " . $gtab['table'][$gtab_id] . " WHERE ID = $ID";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
        if($cf = lmbdb_result($rs, 'LMB_VALIDFROM')){$cf = get_stamp($cf);}
        if($ct = lmbdb_result($rs, 'LMB_VALIDTO')){$ct = get_stamp($ct);}
        if($current_vfrom AND $current_vfrom != $cf){$current_vfrom_update = 1;}
        if($current_vto AND $current_vto != $ct){$current_vto_update = 1;}
        if(!$current_vfrom AND $cf){$current_vfrom = $cf;$vfromIsNULL = 1;}
        if(!$current_vto AND $ct){$current_vto = $ct;$vtoIsNULL = 1;}
        $current_VPID = lmbdb_result($rs, 'VPID');
        $current_VID = lmbdb_result($rs, 'VID');
        if($gtab["datasync"][$gtab_id] == 1) {
            $SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
            $SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
        }

        // get first Version
        $sqlquery = "SELECT ID,LMB_VALIDFROM,LMB_VALIDTO FROM ".$gtab["table"][$gtab_id]." WHERE VPID = $current_VPID AND VID = 1";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $first_ID = lmbdb_result($rs,'ID');
        $first_vfrom = get_stamp(lmbdb_result($rs,'LMB_VALIDFROM'));
        $first_vto = get_stamp(lmbdb_result($rs,'LMB_VALIDTO'));

        // get last Version
        $sqlquery = "SELECT ID,LMB_VALIDFROM,LMB_VALIDTO FROM ".$gtab["table"][$gtab_id]." WHERE VPID = $current_VPID AND VID = (SELECT MAX(VID) FROM ".$gtab["table"][$gtab_id]." WHERE VPID = $current_VPID)";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $last_ID = lmbdb_result($rs,'ID');
        $last_vfrom = get_stamp(lmbdb_result($rs,'LMB_VALIDFROM'));
        $last_vto = get_stamp(lmbdb_result($rs,'LMB_VALIDTO'));

        // get previous Version
        $sqlquery = "SELECT ID,LMB_VALIDFROM,LMB_VALIDTO $sqlsync FROM ".$gtab["table"][$gtab_id]." WHERE VPID = $current_VPID AND VID = ".($current_VID-1);
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $left_ID = lmbdb_result($rs,'ID');
        $left_vfrom = lmbdb_result($rs,'LMB_VALIDFROM');
        $left_vto = lmbdb_result($rs,'LMB_VALIDTO');
        if($gtab["datasync"][$gtab_id] == 1) {
            $left_SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
            $left_SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
        }

        // get next Version
        $sqlquery = "SELECT ID,LMB_VALIDFROM,LMB_VALIDTO $sqlsync FROM ".$gtab["table"][$gtab_id]." WHERE VPID = $current_VPID AND VID = ".($current_VID+1);
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $right_ID = lmbdb_result($rs,'ID');
        $right_vfrom = lmbdb_result($rs,'LMB_VALIDFROM');
        $right_vto = lmbdb_result($rs,'LMB_VALIDTO');
        if($gtab["datasync"][$gtab_id] == 1) {
            $right_SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
            $right_SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
        }

        // check if is first Version
        if($first_ID == $ID){
            $is_firstVersion = 1;
        }
        if($last_ID == $ID){
            $is_lastVersion = 1;
        }

    // get validity stamps
    }else{
        $sqlquery = "SELECT LMB_VALIDFROM,LMB_VALIDTO $sqlsync FROM " . $gtab['table'][$gtab_id] . " WHERE ID = $ID";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
        $cf = lmbdb_result($rs, 'LMB_VALIDFROM');
        $ct = lmbdb_result($rs, 'LMB_VALIDTO');
        if(!$current_vfrom AND $cf){$current_vfrom = get_stamp($cf);$vfromIsNULL = 1;}
        if(!$current_vto AND $ct){$current_vto = get_stamp($ct);$vtoIsNULL = 1;}
        $is_lastVersion = 1;
        $is_firstVersion = 1;
        if($gtab["datasync"][$gtab_id] == 1) {
            $SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
            $SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
        }
    }

    // from must smaller as to
    if($current_vfrom AND $current_vto) {
         if ($current_vfrom > $current_vto OR $current_vto < $current_vfrom) {
             lmb_alert('from or to not plausibel - from must smaller as to');
             return false;
         }
    }

    // valid-to must not be empty
    if($vfromIsNULL AND !$is_firstVersion) {
        lmb_alert('valid-from must not be empty');
        return false;
    }

    // valid-from must not be empty
    if($vtoIsNULL AND !$is_lastVersion) {
        lmb_alert('valid-to must not be empty');
        return false;
    }

    // list 1:1 relations
    if($gtab["raverkn"][$gtab["verkn"][$gtab_id]]){
        foreach($gtab["raverkn"][$gtab["verkn"][$gtab_id]] as $key => $ragtabid){
            $tablist[] = $ragtabid;
        }
    }

    // validity versioning
    if($gtab['validity'][$gtab_id] == 2) {

        // update LMB_VALIDFROM
        if($current_vfrom_update AND $current_vfrom){

            // if previos Version exists
            if($left_ID){
                // insert at beginning - rebuild VID
                if($left_vfrom AND $current_vfrom <= get_stamp($left_vfrom)){
                    lmb_alert($lang[3122].' '.get_date($left_vfrom));
                    return false;

                    /*
                    // if to is empty
                    if(!$current_vto){$current_vto = (drop_oneday($first_vto));}

                    if($current_vto >= $first_vto OR $current_vfrom >= $first_vfrom){
                        lmb_alert('from or to is behind first version');
                        return false;
                    }

                    // update 1:1 relations
                    foreach ($tablist as $key => $vgtabid) {
                        // update LMB_VALIDFROM for V 2
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDFROM = '" . convert_stamp(add_oneday($current_vto)) . "' WHERE ID = $first_ID";
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                        // rebuild VID
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET VID = (VID + 1) WHERE VPID = $current_VPID";
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET VID = 1 WHERE ID = $ID";
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                    }

                    // ignore LMB_VALIDTO - set here
                    $ignore_vto = 1;
                    */

                // insert at end
                }else {

                    $left_to = convert_stamp(drop_oneday($current_vfrom)); // -1 day

                    // update 1:1 relations
                    foreach ($tablist as $key => $vgtabid) {
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDTO = '$left_to' WHERE ID = $left_ID";
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                        if (!$rs) {$commit = 1;}
                        # --- sync systemfields ----
                        if($gtab["datasync"][$vgtabid]){
                            execute_sync($vgtabid,0,$left_ID,$null,$left_SYNC_ID,$left_SYNC_SLAVE,3);
                        }
                    }
                }

            }

        }

        // LMB_VALIDTO
        if($current_vto AND !$ignore_vto){

            // if next Version exists
            if($right_ID){

                if($right_vto AND get_stamp($right_vto) <= $current_vto){
                    lmb_alert($lang[3121].' '.get_date($right_vto));
                    return false;
                }

                $right_from = convert_stamp(add_oneday($current_vto)); // +1 day
                // update only 1:1 relations
                foreach($tablist as $key => $vgtabid){
                    if($gtab['validity'][$vgtabid] == 2) {
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDFROM = '$right_from' WHERE ID = $right_ID";
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                        if (!$rs) {
                            $commit = 1;
                        }
                        # --- sync systemfields ----
                        if($gtab["datasync"][$vgtabid]){
                            execute_sync($vgtabid,0,$right_ID,$null,$SYNC_ID,$SYNC_SLAVE,3);
                        }
                    }
                }
            }

        }

    }

    if($commit){return false;}


    if($current_vfrom AND !($vfromIsNULL AND $is_firstVersion)) {
        $current_vfrom = '\''.convert_stamp($current_vfrom).'\'';
    }else {
        $current_vfrom = 'NULL';
    }

    if($current_vto AND !($vtoIsNULL AND $is_lastVersion)) {
        $current_vto = '\''.convert_stamp($current_vto).'\'';
    }else {
        $current_vto = 'NULL';
    }

    $sqlupdate = "LMB_VALIDFROM = $current_vfrom,LMB_VALIDTO = $current_vto";

    // update only 1:1 relations
    foreach($tablist as $key => $vgtabid){
        if($gtab['validity'][$vgtabid] == 2) {
            if($vgtabid != $gtab_id) { // skip self
                $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET $sqlupdate WHERE ID = $ID";
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                if (!$rs) {$commit = 1;}
            }
            # --- sync systemfields ----
            if($gtab["datasync"][$vgtabid]){
                execute_sync($vgtabid,0,$ID,$null,$SYNC_ID,$SYNC_SLAVE,3);
            }
        }
    }

    if($commit){return false;}

    // update main table
    return $sqlupdate;

}


/* -------------------------- Encryption --------------------------------- */
function uftyp_38($gtab_id,$field_id,$ID,&$change_value) {
    global $gfield;

    return $gfield[$gtab_id]["field_name"][$field_id]." = '" . parse_db_string(lmb_encrypt($change_value)) . "'";
}
