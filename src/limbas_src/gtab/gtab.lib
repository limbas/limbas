<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

use Limbas\extra\mail\LmbMail;
use Limbas\extra\template\select\TemplateSelector;

require_once (COREPATH . 'extra/reminder/reminder.lib');
require_once (COREPATH . 'gtab/gtab_type_where.lib');

# include extensions
if($GLOBALS["gLmbExt"]["ext_gtab.inc"]){
    foreach ($GLOBALS["gLmbExt"]["ext_gtab.inc"] as $key => $extfile){
        require_once($extfile);
    }
}

if($GLOBALS["gLmbExt"]["ext_globalFilter.inc"]){
	foreach ($GLOBALS["gLmbExt"]["ext_globalFilter.inc"] as $key => $extfile){
		require_once($extfile);
	}
}

/*------- Style ---------*/
function set_style($textstyle){
    /* --- Styletypen --------------------------------------------- */
    $styletyp = explode(";", "font-family:;font-style:;font-variant:;font-size:;font-weight:;word-spacing:;letter-spacing:;text-decoration:;text-transform:;color:;text-shadow:;line-height:;text-align:;border:;border-style:;border-color:;border-width:;border-left:;border-right:;border-top:;border-bottom:;background-color:;padding:;vertical-align:;overflow:;opacity:;display:;border-radius:;margin:");
    $bzm1 = 0;
    while($styletyp[$bzm1]){
        if(($textstyle[$bzm1] OR $textstyle[$bzm1] == '0') AND $textstyle[$bzm1] != " "){
            $value = $textstyle[$bzm1];
            
            if(in_array($styletyp[$bzm1],['color:','border-color:','background-color:']) && function_exists('formlist_handleColor')) {
                $value = formlist_handleColor($value);
            }

            if(in_array($styletyp[$bzm1],['padding:','border-radius:','margin:']) && function_exists('formlist_handlePx')) {
                $value = formlist_handlePx($value);
            }

            $stylevalue .= $styletyp[$bzm1].$value.";";
        }
        $bzm1++;
    }
    return $stylevalue;
}

function updateHistoryFields($history_fields,$gtabid,$PID,$NID){

    if($history_fields){
        global $gfield;
        global $gtab;

        $history_fields = explode(";",$history_fields);
        $history_fields = array_unique($history_fields);

        foreach($history_fields as $key => $value){
            $history = explode(",",$value);
            if($gtab["versioning"][$history[0]] AND $history[2] == $PID){
                $history[2] = $NID;
                $GLOBALS[$gfield[$history[0]]["form_name"][$history[1]]."_".$NID] = $GLOBALS[$gfield[$history[0]]["form_name"][$history[1]]."_".$PID];
                $history_fields[$key] = implode(",",$history);
            }
        }
        return implode(";",$history_fields);
    }
    return false;
}

/**
 * alias to set_verknpf
 *
 * @param int $verkn_tabid
 * @param int $verkn_fieldid
 * @param int $verkn_ID
 * @param int|null $verkn_add_ID
 * @param int|null $verkn_del_ID
 * @param bool $verkn_showonly
 * @return array
 */
function init_relation($verkn_tabid,$verkn_fieldid,$verkn_ID,$verkn_add_ID=null,$verkn_del_ID=null,$verkn_showonly=null,$linkParam=null,$verknpf=1,$verbose=null){
    return set_verknpf($verkn_tabid,$verkn_fieldid,$verkn_ID,$verkn_add_ID,$verkn_del_ID,$verkn_showonly,$verknpf,$linkParam,$verbose);
}


/**
 * Verknpf-Zusatz
 *
 * @param int $verkn_tabid
 * @param int $verkn_fieldid
 * @param int $verkn_ID
 * @param int|null $verkn_add_ID
 * @param int|null $verkn_del_ID
 * @param bool $verkn_showonly
 * @param int $verknpf
 * @return array|false
 */
function set_verknpf($verkn_tabid,$verkn_fieldid,$verkn_ID,$verkn_add_ID=null,$verkn_del_ID=null,$verkn_showonly=null,$verknpf=null,$linkParam=null,$verbose=null,$verkn_KEYID=null){
    global $gtab;
    global $gfield;

    if(!$verkn_tabid OR !$verkn_fieldid){
        lmb_log::error('set_verknpf - no verkn_tabid OR verkn_fieldid', null, $verkn_tabid, $verkn_fieldid, $verkn_ID);
        return false;
    }
    $verkn['md5tab'] = $gfield[$verkn_tabid]['md5tab'][$verkn_fieldid];
    $verkn['vtabid'] = $gfield[$verkn_tabid]['verkntabid'][$verkn_fieldid];
    $verkn['vfieldid'] = $gfield[$verkn_tabid]['verknfieldid'][$verkn_fieldid];
    $verkn['tab'] = $gtab['table'][$verkn_tabid];
    $verkn['field'] = $gfield[$verkn_tabid]['field_name'][$verkn_fieldid];
    $verkn['fieldview'] = $gfield[$verkn_tabid]['verknview'][$verkn_fieldid];
    $verkn['typ'] = $gfield[$verkn_tabid]['data_type'][$verkn_fieldid];
    $verkn['unique'] = $gfield[$verkn_tabid]['unique'][$verkn_fieldid];
    $verkn['artleiste'] = $gfield[$verkn_tabid]['artleiste'][$verkn_fieldid];
    $verkn['relext'] = $gfield[$verkn_tabid]['relext'][$verkn_fieldid];
    $verkn['tabid'] = $verkn_tabid;
    $verkn['fieldid'] = $verkn_fieldid;
    $verkn['id'] = $verkn_ID;
    $verkn['keyid'] = $verkn_KEYID;
    $verkn['add_id'] = $verkn_add_ID;
    $verkn['del_id'] = $verkn_del_ID;
    $verkn['showonly'] = $verkn_showonly;
    $verkn['verknpf'] = $verknpf;
    $verkn['linkParam'] = $linkParam;
    $verkn['verbose'] = $verbose;

    // has parameter relation
    if($gfield[$verkn_tabid]['verknparams'][$verkn_fieldid]){
        $verkn['verknparams'] = 1;
    }

    return $verkn;
}


# --- Verkn√ºpfungs Pool -------------------------
function setVerknPool($gtabid,$verkn){
    global $umgvar;
    global $session;
    global $gtab;

    $verknpool[$gtabid] = $verkn;
    return $verknpool;
}


/**
 * Scrolling to Dataset
 *
 * @param string|int $scrollto (next|prev|start|end|<pointer>)
 * @param int $gtabid
 * @param int $ID
 * @param array $gsr
 * @param array $filter
 * @param array $verkn
 * @param int|null $pointer
 * @return int|false
 */
function scroll_to($scrollto,$gtabid,$ID,&$gsr,&$filter,$verkn,$pointer=null){
    global $db;
    global $gtab;
    global $lang;
    global $gfrist;
    global $umgvar;

    $filter_ = $filter;

    # if view use pointer
	if($gtab["typ"][$gtabid] == 5 AND !$gtab["keyfield"][$gtabid]){
        $pointer = $ID;
    }
    # get all datasets if versioned
    if($gtab["viewver"][$gtabid]){
        $filter_["viewversion"][$gtabid] = 1;
    }
    $filter_["anzahl"][$gtabid] = 'all';
    $onlyfield = $gtab["keyfield"][$gtabid];

    $sqlquery = get_sqlquery($gtabid,1,$filter_,$gsr,$verkn,$onlyfield);
    $scrollfilter = md5($sqlquery['sql']);

    if($scrollfilter != $filter['scrollfilter'][$gtabid]) {
        $rs = lmbdb_exec($db, $sqlquery["sql"]) or errorhandle(lmbdb_errormsg($db), $sqlquery['sql'], $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {lmb_log::error('scroll_to - can not calculate next dataset', 'can not calculate next dataset', $gtabid, null, $ID);}
        while (lmbdb_fetch_row($rs)) {
           $scrollcache[] = lmbdb_result($rs, $gtab["keyfield"][$gtabid]);
        }
        $filter['scrollcache'][$gtabid] = $scrollcache;
        $filter['scrollfilter'][$gtabid] = $scrollfilter;
    }

    # return pointer from result
    if($pointer){
        if($scrollto == "next"){
            return $pointer+1;
        }elseif($scrollto == "prev"){
            return $pointer-1;
        }elseif($scrollto == "start"){
            return 1;
        }elseif($scrollto == "end"){
            return lmb_num_rows($rs,$sqlquery["count"],$gtab["numrowcalc"][$gtabid]);
        }

    # get pointer of ID
    }elseif($scrollto == "next" OR $scrollto == "prev"){
        $key = array_search($ID,$filter['scrollcache'][$gtabid]);
        $nextID = $filter['scrollcache'][$gtabid][$key+1];
        $prevID = $filter['scrollcache'][$gtabid][$key-1];
    }

    if($scrollto == "next"){
        if($nextID){
            return $nextID;
        }else{
            lmb_alert($lang[2062]);
            return $ID;
        }
    }elseif($scrollto == "prev"){
        if($prevID){
            return $prevID;
        }else{
            lmb_alert($lang[2061]);
            return $ID;
        }
    }elseif(is_numeric($scrollto)){
        return $scrollto;
    }

    if($scrollto == "start"){
        return $filter['scrollcache'][$gtabid][0];
    }

    if($scrollto == "end"){
        return end($filter['scrollcache'][$gtabid]);
    }

    return false;

}


/**
 * trigger handling
 *
 * @param string $typ INSERT; DELETE; UPDATE
 * @param number $gtabid
 * @param number $fieldid
 * @param array $trigger
 * @param number $ID
 * @param mixed $new_value
 * @param mixed $old_value
 * @param mixed $triggerResult
 * @return bool|null
 */
function execute_trigger($typ,$position,$gtabid,$fieldid,$trigger,$ID,$new_value=null,$old_value=null,$triggerResult=null){
    global $db;
    global $umgvar;
    global $session;
    global $gtab;
    global $gfield;
    global $gtrigger;
    $out = null;

    if(defined('LMB_SYNC_PROC') OR !is_array($gtrigger[$gtabid]["id"]) OR !$trigger){return true;}
    if(is_numeric($trigger)){$trigger = array($trigger);}

    foreach ($trigger as $key => $value){
        $value = trim($value);
        if($triverval = $gtrigger[$gtabid]["value"][$value] AND $gtrigger[$gtabid]["type"][$value] == $typ AND $gtrigger[$gtabid]["position"][$value] == $position){
            $tres = eval(trim($triverval).";");
            if($tres === false) {
                lmb_log::error('trigger [' . $typ . '] [' . $triverval . '] return false', $GLOBALS['lang'][2920], $gtabid, $fieldid, $ID);
                return false;
            }
            #eval("\$out[] = ".ltrim($triverval,";").";");
        }
    }

    return $out;
}

/**
 * sync handling
 * @param int $gtabid
 * @param int $fieldid
 * @param int $datid
 * @param int $value
 * @param int $sync_id
 * @param int $sync_slave
 * @param int $type 1=delete, 2=new, 3=update
 * @return bool
 */

#$gtabid,$fieldid,$dataid,$value,$old_gresult[$gtabid]['SYNC_ID'][0],$old_gresult[$gtabid]['SYNC_SLAVE'][0]

function execute_sync($gtabid,$fieldid,$datid,&$value,$sync_id,$sync_slave,$type,$force=false){
    global $db;
    global $umgvar;
    global $gfield;
    global $gtab;
    $commit = false;

    if(!$datid){return true;}

    // use filter for DMS
    if($gtabid == $gtab["argresult_id"]["LDMS_FILES"] OR $gtabid == $gtab["argresult_id"]["LDMS_META"]){
        # --- check for sync files ------
        $sqlquery = "SELECT FIELDID AS LEVEL FROM LMB_SYNC_CONF WHERE TABID = -1 AND FIELDID = (SELECT LEVEL FROM LDMS_FILES WHERE ID = $datid) AND ".($umgvar['sync_mode'] == 1 ? 'SLAVE' : 'MASTER')." = ".LMB_DBDEF_TRUE;
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs){$commit = 1;}

        if(!lmbdb_result($rs, "LEVEL")){
            return true;
        }
    }

    // skip 1:1 relations for delete or add
    if(($type == 1 OR $type == 2) AND $gtab["verkn"][$gtabid] != $gtabid){
        return true;
    }

    // protect self processing
    if(defined('LMB_SYNC_PROC') && $force !== true){return true;}

    #if($GLOBALS["lmb_trigger_off"][$gtabid]){return true;}

    // use one way sync
    $syncGlobal = false;
    if($gtab['datasync'][$gtabid] == 2) {
        $syncGlobal = true;
    }

    // get LMB_SYNC_ID / LMB_SYNC_SLAVE
    if(($type == 1 OR $type == 3) AND (!$sync_id OR !$sync_slave)) {
        $idSelect = 'LMB_SYNC_ID,LMB_SYNC_SLAVE';
        if($syncGlobal) {
            $idSelect = 'ID AS LMB_SYNC_ID, 0 AS LMB_SYNC_SLAVE';
        }
        $sqlquery = "SELECT ID, $idSelect FROM " . $gtab["table"][$gtabid] . " WHERE ID = $datid";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if(!$sync_id){$sync_id = lmbdb_result($rs, "LMB_SYNC_ID");}
        if(!$sync_slave){$sync_slave = lmbdb_result($rs, "LMB_SYNC_SLAVE");}
    }

    // slave
    if($umgvar['sync_mode'] == 1){

        // delete all cache entries after delete
        if($type == 1){ // delete
            $sqlquery = "DELETE FROM LMB_SYNC_CACHE WHERE TABID = $gtabid AND DATID = ".parse_db_int($datid);
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        }

        // handle slave
        $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
        $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,$fieldid,".parse_db_int($datid).",0,".parse_db_int($datid).",$type)";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!$rs){lmb_log::error('execute_sync client - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}

    // master
    }else{

        // handle LMB_SYNC_SLAVE after update
        if($gfield[$gtabid]['field_name'][$fieldid] == 'LMB_SYNC_SLAVE'){
            $new_slave = $value;

            // change LMB_SYNC_SLAVE to NULL
            if($sync_slave AND !$new_slave){
                if($sync_id){
                    // delete from slave
                    $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                    $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,".parse_db_int($fieldid).",$datid,".parse_db_int($sync_slave).','.parse_db_int($sync_id).",1)";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}
                    // drop SYNC_ID from dataset
                    $sqlquery = "UPDATE ".$gtab['table'][$gtabid]." SET LMB_SYNC_ID = NULL WHERE ID = $datid";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on update', null, $gtabid, $fieldid, $datid);$commit = 1;}
                }else{
                    // delete old slave from cashe
                    $sqlquery = "DELETE FROM LMB_SYNC_CACHE WHERE SLAVE_ID = $sync_slave AND TABID = $gtabid AND DATID = $datid";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on delete', null, $gtabid, $datid);$commit = 1;}
                }

            // change LMB_SYNC_SLAVE from NULL to NEW VALUE
            }else if(!$sync_slave AND $new_slave){
                // add to slave
                $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,".parse_db_int($fieldid).",$datid,".parse_db_int($new_slave).",".parse_db_int($datid).",2)";
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}
            // change LMB_SYNC_SLAVE from OLD to NEW VALUE
            }else if($sync_slave AND $sync_slave !== $new_slave){
                if($sync_id){
                    // delete from old slave
                    $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                    $sqlquery = "INSERT INTO LMB_SYNC_CACHE (TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,".parse_db_int($fieldid).",$datid,".parse_db_int($sync_slave).','.parse_db_int($sync_id).",1)";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}
                    // add to new slave
                    $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                    $sqlquery = "INSERT INTO LMB_SYNC_CACHE (TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,".parse_db_int($fieldid).",$datid,".parse_db_int($new_slave).",".parse_db_int($datid).",2)";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}
                    // drop SYNC_ID from dataset
                    $sqlquery = "UPDATE ".$gtab['table'][$gtabid]." SET LMB_SYNC_ID = NULL WHERE ID = $datid";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on update', null, $gtabid, $fieldid, $datid);$commit = 1;}
                }else{
                    // delete old slave from cashe
                    $sqlquery = "DELETE FROM LMB_SYNC_CACHE WHERE SLAVE_ID = $sync_slave AND TABID = $gtabid AND DATID = $datid";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on delete', null, $gtabid, $datid);$commit = 1;}

                    // add to new slave
                    $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                    $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid,".parse_db_int($fieldid).",$datid,".parse_db_int($new_slave).",".parse_db_int($datid).",2)";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);$commit = 1;}
                }
            }else{
                return false;
            }

        // datasync == 2 use one way sync
        }elseif($sync_slave OR $gtab['datasync'][$gtabid] == 2){
            // delete all cache entries after delete
            if($type == 1){ // delete all prev cache entries
                $sqlquery = "DELETE FROM LMB_SYNC_CACHE WHERE SLAVE_ID = ".parse_db_int($sync_slave)." AND TABID = $gtabid AND DATID = ".parse_db_int($datid);
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            }


            // handle timing problem if sync already started and update has no sync_id
            if(!$sync_id && $type == 3){
                $sqlquery = "SELECT PROCESS_KEY FROM LMB_SYNC_CACHE WHERE TYPE = 2 AND SLAVE_ID = ".parse_db_int($sync_slave)." AND TABID = $gtabid AND DATID = ".parse_db_int($datid);
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                $forceupdate = lmbdb_result($rs, "PROCESS_KEY");
            }

            // add delete cache entry if existing $sync_id
            if(($sync_id OR $forceupdate) OR $gtab['datasync'][$gtabid] == 2) {
                $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,SLAVE_DATID,TYPE) VALUES($nextCacheId,$gtabid," . parse_db_int($fieldid) . "," . parse_db_int($datid) . "," . parse_db_int($sync_slave) . "," . parse_db_int($sync_id) . ",$type)";
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                if (!$rs) {
                    lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, $fieldid, $datid);
                    $commit = 1;
                }
            }

        // adding new dataset
        } elseif($type == 2){
            // matching sync_client with multitenant
            if($sync_slave = $GLOBALS['lmmultitenants']['syncslave'][$GLOBALS['session']['mid']]){
                $nextCacheId = next_db_id('LMB_SYNC_CACHE','ID',1);
                $sqlquery = "INSERT INTO LMB_SYNC_CACHE (ID,TABID,FIELDID,DATID,SLAVE_ID,TYPE) VALUES($nextCacheId,$gtabid,1,".parse_db_int($datid).",".parse_db_int($sync_slave).",2)";
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                if(!$rs){lmb_log::error('execute_sync master - SQL error on insert', null, $gtabid, 1, $datid);$commit = 1;}
            }
        }

    }

    return !$commit;

}

# --- Pool Verkn√ºpfung -------------------------
function p_verknpf($gtabid,$verkn){
    global $db;
    global $gfield;
    global $gtab;

    if($verkn['typ'] == 25) {
        $sqlquery = "SELECT ID AS KEYID FROM " . $gtab['table'][$verkn['vtabid']] . " WHERE ".$verkn['md5tab']." = ".$verkn["id"];
    }else{
        $sqlquery = "SELECT VERKN_ID FROM ".$verkn["md5tab"]." WHERE ID = ".$verkn["id"];
    }
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

    if(lmbdb_fetch_row($rs)){
        $ID = lmbdb_result($rs, "VERKN_ID");
    }

    return $ID;
}

# --- R√ºckwertige Verkn√ºpfung -------------------------
function r_verknpf($gtabid,$verkn){
    global $db;
    global $gfield;
    global $action;

    $sqlquery = "SELECT ID FROM ".$verkn["md5tab"]." WHERE VERKN_ID = ".$verkn["id"];
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if($rs){

        $gtabid = $verkn["tabid"];
        $i = 0;
        if(lmbdb_fetch_row($rs)){$i++;$ID_ = lmbdb_result($rs, "ID");}
        if(lmbdb_fetch_row($rs)){$i++;}

        if($i == 1){
            $ID = $ID_;
        }else{
            $action = "gtab_erg";
        }
    }
    return $ID;
}


/**
 * Verkn√ºpfung auf Endlosschleife pr√ºfen (bei Selbstverkn√ºpfungen)
 * Checks whether a dataset is somehow linked with itself
 * @param $verkn array from init_relation()
 * @param $verkn_add_id int id of dataset to start with
 * @return bool true if the dataset is linked to itself, false otherwise
 */
function willHaveRecursionLoop($verkn, $verkn_add_id){
    global $db;
    global $gtab;
    global $session;
    global $gfield;

    # keine Selbstverkn√ºpfung
    if (!$gfield[$verkn["tabid"]]["sverkn"][$verkn["fieldid"]]) {
        return false;
    }

    # falls Verkn√ºpfung gleich
    if ($verkn["id"] == $verkn_add_id) {
        return true;
    }

    if ($verkn['typ'] == 25) {
        if ($gfield[$verkn['tabid']]['verkntabletype'][$verkn['fieldid']] == 2) {
            # direct backward relation
            $forwardRelationFieldid = $gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']];
            $relationFieldname = $gfield[$verkn['vtabid']]['md5tab'][$forwardRelationFieldid];
            $sqlquery = "SELECT ID FROM " . $verkn["tab"] . " WHERE " . $relationFieldname . " = " . $verkn["id"];
        } else {
            # direct forward relation
            $sqlquery = "SELECT " . $verkn["md5tab"] . " AS ID FROM " . $verkn["tab"] . " WHERE ID = " . $verkn["id"] . " AND " . $verkn["md5tab"] . " IS NOT NULL";
        }
    } else {
        # normal relation
        $sqlquery = "SELECT ID FROM " . $verkn["md5tab"] . " WHERE VERKN_ID = " . $verkn["id"];
    }
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
    if (!$rs) {
        $commit = 1;
    } else {
        while (lmbdb_fetch_row($rs)) {
            if (lmbdb_result($rs, "ID") == $verkn_add_id) {
                return true;
            }
            $verkn["id"] = lmbdb_result($rs, "ID");
            if (willHaveRecursionLoop($verkn, $verkn_add_id)) {
                return true;
            }
        }
    }
    return false;
}


/**
 * alias to set_joins
 *
 * @param array $verkn
 * @return int|false
 */
function set_relation($verkn){
    #if($verkn['verbose']) {
        return set_joins($verkn["tabid"],$verkn);
    #}else{
        #return set_joins($verkn["tabid"],$verkn)['count'];
    #}
}

# --- Verkn√ºpfungen bearbeiten --------------------------
/**
 * @param int $gtabid
 * @param array $verkn
 * @return int|false
 */
function set_joins($gtabid, $verkn, $result=null){
    global $db;
    global $session;
    global $umgvar;
    global $LINK;
    global $gtab;
    global $gfield;
    global $lang;
    static $lmb_vknsort;

    $ID = $verkn["id"];

    if(!is_numeric($verkn["id"])){
        lmb_log::error('set_joins - ID is no number', null, $verkn["tabid"], $verkn["fieldid"], $verkn["id"]);
        return false;
    }
    
    $errorMessages = [];

    # mirror view relation table to origin relation
    $ID_LEFT = 'ID';
    $ID_RIGHT = 'value';
    $verkn['origin']['tabid'] = $verkn["tabid"];
    $verkn['origin']['fieldid'] = $verkn["fieldid"];
    $verkn['origin']['md5tab'] = $verkn["md5tab"];
    $verkn['origin']['vtabid'] = $verkn['vtabid'];
    $verkn['origin']['table'] = $verkn['md5tab'];
    $verkn['origin']['relVID'] = 'VERKN_ID';
    $verkn['origin']['relID'] = 'ID';

    // backward relation
    if($gfield[$verkn["tabid"]]["verkntabletype"][$verkn["fieldid"]] == 2){
        // direct 1:n relation
        if($verkn['typ'] == 25){
            $direct_backw = 2;
            $ID_RIGHT = 'ID';
            $ID_LEFT = 'value';

            $verkn['origin']['table'] = $gtab['table'][$verkn['tabid']];
            $verkn['origin']['tabid'] = $gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']];
            $verkn['origin']['fieldid'] = $gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']];
            $verkn['origin']['md5tab'] = $gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]];
            $verkn['origin']['vtabid'] = $verkn['tabid'];
        }else {
            $ID_RIGHT = 'ID';
            $verkn['origin']['table'] = $gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]];
            $verkn['origin']['relVID'] = 'ID';
            $verkn['origin']['relID'] = 'VERKN_ID';
        }
    # default relation
    }else{
        // direct 1:n relation
        if($verkn['typ'] == 25){
            $direct_backw = 1;
            $verkn['origin']['table'] = $gtab['table'][$verkn['vtabid']];
            $verkn['origin']['tabid'] = $verkn['tabid'];
            $verkn['origin']['fieldid'] = $verkn['fieldid'];
            $verkn['origin']['md5tab'] = $verkn['md5tab'];
        }
    }

    # edit permission from field / table
    if(!$gtab["edit"][$verkn["tabid"]] OR !$gfield[$verkn["tabid"]]["perm_edit"][$verkn["fieldid"]]){
        lmb_log::error('set_joins - permission denied for edit field or table', $lang[1317], $verkn["tabid"], $verkn["fieldid"], $ID);
        return false;
    }

    // postcheck routine
    $query_dataid = array($verkn["fieldid"] => true);
    $query_result=null;
    $old_gresult=null;
    $triggerResult=null;
    if(!update_data_precheck($verkn["tabid"],$ID,$query_dataid,$query_result,$old_gresult,$triggerResult,1)){return false;}

    # --- Verkn√ºpfungen l√∂schen --------------------------
    if($verkn["del_id"] AND $LINK[158]){
        if(is_array($verkn["del_id"])){
            $verkn_del_id = $verkn["del_id"];
        }else{
            $verkn_del_id = explode(",",$verkn["del_id"]);
        }
        foreach($verkn_del_id as $key => $value){
            if(!$value){
                $errorMessages[] = 'verkn_del_id empty';
                $commit=1;
                continue;
            }

            # trigger before update field
            if($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]){
                if(execute_trigger("UPDATE","BEFORE",$verkn["tabid"],$verkn["fieldid"],$gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]],$verkn["id"],$value,'delete') === false){$commit=1;continue;}
            }

            # delete all relations
            if($value == 'unlinkall'){
                $dverkn = set_verknpf($verkn["tabid"],$verkn["fieldid"],$verkn["id"],0,0,1,1);
                $dgresult = get_gresult($verkn["vtabid"],1,null,null,$dverkn,'ID');
                if($dgresult[$verkn["vtabid"]]['id']){
                    $dverkn = set_verknpf($verkn["tabid"],$verkn["fieldid"],$verkn["id"],0,$dgresult[$verkn["vtabid"]]['id']);
                    $result = set_joins($verkn["tabid"],$dverkn,$result);
                }
                continue;
            }

            # delete single relation

            if(!is_numeric($value)){
                lmb_log::error('set_joins - VERKN_ID is no number ['.$value.']', null, $verkn["tabid"], $verkn["fieldid"], $verkn["fieldid"]);
                $commit=1;continue;
            }

            // direct 1:n relation
            if($verkn['typ'] == 25){
                $sqlquery = "UPDATE " . $verkn['origin']['table'] . " SET ".$verkn['origin']['md5tab'] ." = ".LMB_DBDEF_NULL." WHERE ID = " . ${$ID_RIGHT}." AND ".$verkn['origin']['md5tab'] ." = ".$value;
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                $err = 'SQL error on update ['.$gtab['table'][$verkn['vtabid']].']';
            }else {
                $sqlquery = 'DELETE FROM ' . $verkn['origin']['table'] . ' WHERE ' . $verkn['origin']['relID'] . ' = ' . $verkn["id"] . ' AND ' . $verkn['origin']['relVID'] . ' = ' . $value. (is_numeric($verkn['keyid']) && $verkn['keyid'] > 0 ? ' AND KEYID = ' . $verkn['keyid'] : '');
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                $err = 'SQL error on delete ['.$verkn['origin']['table'].']';
            }
            if(!$rs){
                lmb_log::error('set_joins - '.$err, null, $verkn["tabid"], $verkn["fieldid"], $verkn["fieldid"]);
                $commit=1;continue;
            }else{
                # translate id in fieldvalue
                $vtabid = $gfield[$verkn["tabid"]]["verkntabid"][$verkn["fieldid"]];
                if($gfield[$vtabid]["mainfield"]){
                    $sqlquery1 = "SELECT ".$gfield[$vtabid]["field_name"][$gfield[$vtabid]["mainfield"]]." FROM ".$gtab["table"][$vtabid]." WHERE ID = ".$value;
                    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                    $val = "(ID:".$value.") ".lmbdb_result($rs1,$gfield[$vtabid]["field_name"][$gfield[$vtabid]["mainfield"]]);
                }else{
                    $val = $value;
                }
                $hvalue[] = "<".$val;
                $result['drop'][$value][$verkn["id"]] = TRUE;
                $result['count']++;

                # trigger after update field
                if($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]){
                    execute_trigger("UPDATE","AFTER",$verkn["tabid"],$verkn["fieldid"],$gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]],$verkn["id"],$value,'delete');
                }

                # no db-trigger handling - manual count update - set backward relation
                if($rec_verkn_fieldid = $gfield[$verkn["tabid"]]["hasrecverkn"][$verkn["fieldid"]]){
                    updateRelationCount($verkn["vtabid"], $rec_verkn_fieldid , $gfield[$verkn["vtabid"]]["md5tab"][$rec_verkn_fieldid], $value, $verkn["tabid"],-$direct_backw);
                }
            }
        }
    }

    # --- Verkn√ºpfungen hinzuf√ºgen -------------------------------
    if($verkn["add_id"] AND $LINK[157]){
        if(is_array($verkn["add_id"])){
            $verkn_add_id = $verkn["add_id"];
        }else{
            $verkn_add_id = explode(",",$verkn["add_id"]);
        }
        # --- Bei "single" Verkn√ºpfung alte Werte l√∂schen / nur letzten Wert eintragen  ------
        if($verkn["unique"] AND $direct_backw != 2){

            # falls trigger vorhanden 'old_value' auslesen
            if ($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]) {
                if ($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]) {
                    if($verkn["typ"] == 25) {
                        $sqlquery = "SELECT ID AS ID FROM " . $verkn['origin']['table'] . " WHERE ".$verkn['origin']['md5tab']." = " . $verkn["id"];
                    }else{
                        $sqlquery = "SELECT VERKN_ID AS ID FROM " . $verkn['origin']['table'] . " WHERE " . $verkn['origin']['relID'] . " = " . $verkn["id"];
                    }
                    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                    $old_value = lmbdb_result($rs, "ID");
                }
            }

            # alle vorhandenen Verkn√ºpfungen l√∂schen
            if($verkn["typ"] == 25) {
                $sqlquery = "UPDATE " . $verkn['origin']['table'] . " SET ".$verkn['origin']['md5tab'] ." = ".LMB_DBDEF_NULL." WHERE ".$verkn['origin']['md5tab']." = " . $verkn["id"];
            }else{
                $sqlquery = "DELETE FROM " . $verkn['origin']['table'] . " WHERE " . $verkn['origin']['relID'] . " = " . $verkn["id"];
            }
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
            if (!$rs) {
                lmb_log::error('set_joins - 1:n drop relation failed', null, $verkn["tabid"], $verkn["fieldid"], $verkn["fieldid"]);
                $commit = 1;
            }

            end($verkn_add_id);
            $verkn_add_id = array($verkn_add_id[key($verkn_add_id)]);
        }

        # --- Bei 1:n / n:m Verkn√ºpfung  ------


        if($verkn["typ"] != 25) {

            $sql_i_d = array();
            $sql_v_d = array();

            # Sortierungs ID
            if ($lmb_vknsort[$verkn['origin']['table']][$verkn["id"]]) {
                $nextsort = $lmb_vknsort[$verkn['origin']['table']][$verkn["id"]];
            } else {
                $nextsort = next_db_id($verkn['origin']['table'], "SORT", null, "ID=" . $verkn["id"]);
            }

            # multitenant in relation parameter table
            if($umgvar['multitenant'] AND $gtab['multitenant'][$vgtabid] AND $vgtabid = $gfield[$verkn['origin']['tabid']]["verknparams"][$verkn['origin']['fieldid']]){
                global $lmmultitenants;
                if(!$lmmultitenants['mid'][$session['mid']]){
                    lmb_alert('you can not add data without multitenant ID');
                    lmb_log::error('you can not add data without multitenant ID');
                    return false;
                }
                $sql_i_d = array('LMB_MID');
                $sql_v_d = array($lmmultitenants['mid'][$session['mid']]);
            }
        }

        # $nextsort = $NEXTID; #  Alternative
        foreach($verkn_add_id as $key => $value){

                if(!$value OR !is_numeric($value)){
                    #lmb_log::error('set_joins - VERKN_ID is no number ['.$value.']', null, $verkn["tabid"], $verkn["fieldid"], $value);
                    #$commit=1;
                    $errorMessages[] = 'verkn_add_id empty';
                    continue;
                }

                # ------------------ Beziehung auf schon mal verkn√ºpft pr√ºfen -----------------------------
                if($verkn['typ'] != 25) {
                    $sqlquery = "SELECT KEYID FROM " . $verkn['md5tab'] . " WHERE ID = " . $verkn['id'] . " AND VERKN_ID = " . $value;
                    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                    if (!$rs OR ($keyid = lmbdb_result($rs, 'KEYID') AND !$gfield[$verkn["tabid"]]["multirelation"][$verkn["fieldid"]] AND $verkn['typ'] == 24)) {
                        lmb_log::error('set_joins - relation already exists [' . $keyid . ']', $lang[1285], $verkn['tabid'], $verkn['fieldid'], $value);
                        $commit = 1;
                        continue;
                    }
                }

                $sqlquery = null;
                # ------------------ 1:n - check if already exists -----------------------------
                if($verkn["typ"] == 27 AND !$keyid){
                    $sqlquery = "SELECT KEYID FROM ".$verkn['md5tab']." WHERE VERKN_ID = ".$value;
                # ------------------ 1:n direct - check if already exists -----------------------------
                }elseif($verkn["typ"] == 25) {
                    if ($gfield[$verkn['tabid']]['verkntabletype'][$verkn['fieldid']] == 2) {
                        # backward relation
                        // noting to_do

                        #$forwardRelationFieldid = $gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']];
                        #$relationFieldname = $gfield[$verkn['vtabid']]['md5tab'][$forwardRelationFieldid];
                        #$sqlquery = "SELECT ID AS KEYID FROM " . $verkn['origin']['table'] . " WHERE " . $relationFieldname . " = ".$value;
                    } else {
                        # forward
                        $sqlquery = "SELECT ".$verkn['origin']['md5tab']." AS KEYID FROM " . $verkn['origin']['table'] . " WHERE ID = ".$value;
                    }
                }
                if($sqlquery){
                    $rs2 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs2 OR $keyid = lmbdb_result($rs2,'KEYID')){
                        lmb_log::error('set_joins - referential integrity fail - dataset already joined ['.$keyid.'->'.$value.']', $lang[1285], $verkn['tabid'], $verkn['fieldid'], $value, level:E_WARNING);
                        $errorMessages[] = 'set_joins - referential integrity fail - dataset already joined ['.$keyid.'->'.$value.']';
                        $commit=1;continue;
                    }
                }

                # Eintrag unterdr√ºcken
                # OR ($verkn[typ] == 24 AND !$verkn[unique])

                # --- Verkn√ºpfung auf Endlosschleife pr√ºfen (bei Selbstverkn√ºpfungen) -----
                if(willHaveRecursionLoop($verkn,$value)) {
                    lmb_log::error('set_joins - dataset recursiv joined [' . $value . ']', $lang[1285], $verkn["tabid"], $verkn["fieldid"], $value, level:E_WARNING);
                    $errorMessages[] = 'set_joins - dataset recursiv joined [' . $value . ']';
                    $commit=1;continue;
                }

                # trigger before update field
                if($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]){
                    if(execute_trigger("UPDATE","BEFORE",$verkn["tabid"],$verkn["fieldid"],$gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]],$verkn["id"],$value,$old_value) === false){continue;}
                }

                if($verkn["typ"] == 25) {
                    $sqlquery2 = "UPDATE " . $verkn['origin']['table'] . " SET ".$verkn['origin']['md5tab']." = ".${$ID_LEFT}." WHERE ID = " . ${$ID_RIGHT};
                }else{
                    # --- Verkn√ºpfung eintragen -----
                    $NEXTID = next_db_id($verkn['origin']['table'], "KEYID", 1);
                    $sql_i = $sql_i_d;
                    $sql_v = $sql_v_d;

                    # Zusatz Parameter
                    if ($verkn["linkParam"]) {
                        foreach ($verkn["linkParam"] as $key1 => $value1) {
                            if(!$value1 AND $value1 !== 0){continue;}
                            $sql_i[] = $key1;
                            $sql_v[] = $value1;
                        }
                    }

                    $nextsort++;
                    if ($sql_i[0]) {
                        $sql_i = "," . implode(",", $sql_i);
                        $sql_v = "," . implode(",", $sql_v);
                    } else {
                        $sql_i = "";
                        $sql_v = "";
                    }
                    $sqlquery2 = "INSERT INTO " . $verkn['origin']['table'] . " (KEYID,ERSTUSER," . $verkn['origin']['relID'] . "," . $verkn['origin']['relVID'] . ",SORT $sql_i) VALUES ($NEXTID," . $session["user_id"] . "," . $verkn["id"] . "," . $value . ",$nextsort $sql_v)";
                }

                $rs2 = lmbdb_exec($db, $sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, $GLOBALS['action'], __FILE__, __LINE__);

                if(!$rs2){
                    lmb_log::error('set_joins - SQL error on insert ['.$verkn['origin']['table'].']', null, $verkn["tabid"], $verkn["fieldid"], $value);
                    $commit=1;continue;
                }else{
                    # translate id in fieldvalue
                    $vtabid = $gfield[$verkn["tabid"]]["verkntabid"][$verkn["fieldid"]];
                    if($gfield[$vtabid]["mainfield"]){
                        $sqlquery1 = "SELECT ".$gfield[$vtabid]["field_name"][$gfield[$vtabid]["mainfield"]]." FROM ".$gtab["table"][$vtabid]." WHERE ID = ".$value;
                        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                        $val = "(ID:".$value.") ".lmbdb_result($rs1,$gfield[$vtabid]["field_name"][$gfield[$vtabid]["mainfield"]]);
                    }else{
                        $val = $value;
                    }
                    $hvalue[] = "> ".$val;
                    $result['add'][$value][$verkn["id"]] = $NEXTID;
                    $result['count']++;

                    # trigger after update field
                    if($gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]]){
                        execute_trigger("UPDATE","AFTER",$verkn["tabid"],$verkn["fieldid"],$gfield[$verkn["tabid"]]["trigger"][$verkn["fieldid"]],$verkn["id"],$value,$old_value);
                    }

                    # no db-trigger handling - manual count update - set backward relation
                    if($rec_verkn_fieldid = $gfield[$verkn["tabid"]]["hasrecverkn"][$verkn["fieldid"]]){
                        updateRelationCount($verkn["vtabid"], $rec_verkn_fieldid , $gfield[$verkn["vtabid"]]["md5tab"][$rec_verkn_fieldid], $value, $verkn["tabid"],$direct_backw);
                    }

                }

        }

        $lmb_vknsort[$verkn['origin']['table']][$verkn["id"]] = $nextsort;
    }

    if($hvalue){

        # no db-trigger handling - manual count update
        updateRelationCount($verkn['origin']['tabid'], $verkn['origin']['fieldid'] , $verkn['origin']['md5tab'], ${$ID_LEFT}, $verkn['origin']['vtabid']);
        $hvalue = implode(";",$hvalue);

        // postcheck routine
        $query_dataid[$verkn["fieldid"]] = $hvalue;
        $old_gresult=null;
        $nometa=null;
        if(!update_data_postcheck($verkn["tabid"],$ID,$query_dataid,$old_gresult,$triggerResult,$nometa,1)){return false;}

    }

    if($commit && !defined('LMB_SYNC_PROC')){lmb_alert($lang[2921]);}    # nicht alle Datens√§tze konnten verkn√ºpft werden

    if($commit AND !$result){
        
        if(defined('LMB_SYNC_PROC') && !empty($errorMessages)) {
            lmb_log::error(implode('; ',$errorMessages));
        }
        
        return false;
    }else{
        return $result;
    }

}

# no db-trigger handling - manual count update
function updateRelationCount($gtabid,$fieldid,$md5tab,$id,$vgtabid,$backw=null){

    global $db;
    global $gfield;
    global $gtab;

    if (!LMB_DBFUNC_PROCEDUREHANDLE OR $gfield[$gtabid]['data_type'][$fieldid] == 25) {

        if($backw == 2){return;}

        $rgtab = $gtab["table"][$gfield[$gtabid]["verkntabid"][$fieldid]];

        if ($gfield[$gtabid]['data_type'][$fieldid] == 25) {
            if($backw == 1) {
                $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = 1 WHERE ID = $id";
            }elseif($backw == -1) {
                $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = NULL WHERE ID = $id";
            }else{
                if ($gfield[$gtabid]['verkngroup'][$fieldid] == 2) {
                    // ignore archived relations
                    $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = (SELECT COUNT(*) FROM " . $gtab['table'][$vgtabid] . " WHERE " . $gtab['table'][$vgtabid] . ".$md5tab = $id AND " . $gtab['table'][$vgtabid] . ".DEL = ".LMB_DBDEF_FALSE.") WHERE ID = $id";
                } else {
                    $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = (SELECT COUNT(*) FROM " . $gtab['table'][$vgtabid] . " WHERE " . $gtab['table'][$vgtabid] . ".$md5tab = $id) WHERE ID = $id";
                }
            }
        } else {
            if ($gfield[$gtabid]["verkngroup"][$fieldid] == 2) {
                // ignore archived relations
                $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = (SELECT COUNT(*) FROM $md5tab , " . $gtab['table'][$vgtabid] . " WHERE $md5tab.ID = $id AND " . $gtab["table"][$vgtabid] . ".ID = $md5tab.VERKN_ID AND " . $gtab["table"][$vgtabid] . ".DEL = ".LMB_DBDEF_FALSE.") WHERE ID = $id";
            } else {
                $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET " . $gfield[$gtabid]['field_name'][$fieldid] . " = (SELECT COUNT(*) FROM $md5tab WHERE ID = $id) WHERE ID = $id";
            }
        }

        if($backw == 2){return;}

        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {
            lmb_log::error('set_joins - SQL error on update relation count without trigger [' . $rgtab . ']', null, $gtabid, $fieldid, $id);
        }

    }

}


# update fieldvalue with count of multiselect
function updateMultiselectCount($gtabid,$field_id,$id) {
    global $db;
    global $gtab;
    global $gfield;

    # SELECT / ATTRIBUTE
    if($gfield[$gtabid]["field_type"][$field_id] == 19){$tabtyp = "LMB_ATTRIBUTE";}else{$tabtyp = "LMB_SELECT";}

    #$sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$field_id]." = (SELECT COUNT(*) FROM ".$tabtyp."_D WHERE TAB_ID = $gtabid AND FIELD_ID = $field_id AND DAT_ID = $id) WHERE ID = $id";
    #$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS["action"],__FILE__,__LINE__);

    # ! ingres workaround!!!!!
    #$sqlquery = "SELECT COUNT(*) AS ROW_COUNT FROM ".$tabtyp."_D WHERE TAB_ID = $gtabid AND FIELD_ID = $field_id AND DAT_ID = $id";
    #$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS["action"],__FILE__,__LINE__);
    $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$field_id]." = (SELECT COUNT(*) FROM ".$tabtyp."_D WHERE TAB_ID = $gtabid AND FIELD_ID = $field_id AND DAT_ID = $id) WHERE ID = $id";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS["action"],__FILE__,__LINE__);

    if(!$rs) {return false;}
    return true;
}


#------------------- Ansicht speichern --------------------------------
function save_viewSettings($vuniqueid,$gtabid=null){
    global $db;
    global $filter;
    global $session;

    $sqlquery = "SELECT UGTAB FROM LMB_USERDB WHERE USER_ID = ".$session["user_id"];
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $ugtab = unserialize(lmbdb_result($rs, "UGTAB"));

    # default forms / tabulators
    if($gtabid){
        if($filter["groupheader"][$gtabid]){$ugtab["filter"]["groupheader"][$gtabid] = $filter["groupheader"][$gtabid];}
        if($filter["groupheaderKey"][$gtabid]){$ugtab["filter"]["groupheaderKey"][$gtabid] = $filter["groupheaderKey"][$gtabid];}
        if($filter["tabulatorKey"][$gtabid]){$ugtab["filter"]["tabulatorKey"][$gtabid] = $filter["tabulatorKey"][$gtabid];}
        if($filter["gwidth"][$gtabid]){$ugtab["filter"]["gwidth"][$gtabid] = $filter["gwidth"][$gtabid];}
    }

    # ext_RelationFields
    if(isset($filter["ext_RelationFields"][$vuniqueid])){$ugtab["filter"]["ext_RelationFields"][$vuniqueid] = $filter["ext_RelationFields"][$vuniqueid];}
    if(isset($filter["ext_RelationFields"]["edit"][$vuniqueid])){$ugtab["filter"]["ext_RelationFields"]["edit"][$vuniqueid] = $filter["ext_RelationFields"]["edit"][$vuniqueid];}
    if(isset($filter["ext_RelationFields"]["order"][$vuniqueid])){$ugtab["filter"]["ext_RelationFields"]["order"][$vuniqueid] = $filter["ext_RelationFields"]["order"][$vuniqueid];}
    if(isset($filter["ext_RelationFields"]["showall"][$vuniqueid])){$ugtab["filter"]["ext_RelationFields"]["showall"][$vuniqueid] = $filter["ext_RelationFields"]["showall"][$vuniqueid];}
    if(isset($filter["ext_RelationFields"]["search"][$vuniqueid])){$ugtab["filter"]["ext_RelationFields"]["search"][$vuniqueid] = $filter["ext_RelationFields"]["search"][$vuniqueid];}

    if($ugtab){
        $nugtab = parse_db_string(serialize($ugtab));
    }

    $prepare_string = "UPDATE LMB_USERDB SET UGTAB = ? WHERE USER_ID = ".$session["user_id"];
    lmb_PrepareSQL($prepare_string,array($nugtab),__FILE__,__LINE__);
}

#------------------- Ansicht zur√ºcksetzen --------------------------------
function reset_viewSettings($gtabid,$gformid){
    global $db;
    global $filter;
    global $session;

    $sqlquery = "SELECT UGTAB FROM LMB_USERDB WHERE USER_ID = ".$session["user_id"];
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $ugtab = unserialize(lmbdb_result($rs, "UGTAB"));

    unset($filter["groupheader"][$gtabid]);
    unset($filter["groupheaderKey"][$gtabid]);
    unset($filter["tabulatorKey"]);
    unset($filter["gwidth"][$gtabid]);
    foreach ($filter["ext_RelationFields"] as $key => $value){
        $gtabid_ = $gtabid;
        $vuid = explode("_",$key);
        if($vuid[1] == '0'){$gtabid_ = 0;} # for simple non relation table
        if($vuid[1] == $gtabid_ AND $vuid[3] == $gformid){
            unset($filter["ext_RelationFields"][$key]);
            unset($filter["ext_RelationFields"]["edit"][$key]);
            unset($filter["ext_RelationFields"]["order"][$key]);
            unset($filter["ext_RelationFields"]["showall"][$key]);
            unset($filter["ext_RelationFields"]["search"][$key]);
            unset($filter["ext_RelationFields"]["searchval"][$key]);
            unset($filter["ext_RelationFields"]["pagination"][$key]);
            unset($filter["ext_RelationFields"]["maxresult"][$key]);
            unset($filter["ext_RelationFields"]["validity"][$key]);
            if($ugtab["filter"]["ext_RelationFields"][$key]){unset($ugtab["filter"]["ext_RelationFields"][$key]);}
            if($ugtab["filter"]["ext_RelationFields"]["edit"][$key]){unset($ugtab["filter"]["ext_RelationFields"]["edit"][$key]);}
            if($ugtab["filter"]["ext_RelationFields"]["order"][$key]){unset($ugtab["filter"]["ext_RelationFields"]["order"][$key]);}
            if($ugtab["filter"]["ext_RelationFields"]["showall"][$key]){unset($ugtab["filter"]["ext_RelationFields"]["showall"][$key]);}
        }
    }


    if($ugtab){
        $nugtab = parse_db_string(serialize($ugtab));
    }

    $prepare_string = "UPDATE LMB_USERDB SET UGTAB = ? WHERE USER_ID = ".$session["user_id"];
    lmb_PrepareSQL($prepare_string,array($nugtab),__FILE__,__LINE__);
}






/**
 * show relations and sub-relations
 *
 * @param int $vgtabid target table id
 * @param array $verkn from init_relation()
 * @param array $linklevel ?
 * @param int $gformid
 * @param int|string $order id of field to order by or "reset"
 * @param array $gsr for get_gresult()
 * @param array $onlyfield for get_gresult()
 * @param array $extension_ to get_gresult()
 * @param array $params ?
 * @return array from get_gresult()
 */
function sql_14_c(&$vgtabid,$verkn,&$linklevel=array(),$gformid=null,$order=null,$gsr=null,$onlyfield=null,$extension_=null,&$params=null) {
    global $gtab;
    global $gfield;
    global $filter;
    global $gform;

    $extension = [];

    $linklevel['vtabid'] = $verkn['vtabid'];
    $linklevel['vfieldid'] = $verkn['vfieldid'];
    $linklevel['vtabid'] = $verkn['tabid'];
    $linklevel['vfieldid'] = $verkn['fieldid'];

    # √§ndere Suchtabelle bei Unter-Unterferkn√ºpfung
    if($linklevel['vtabid'] != $verkn['tabid']){
        $gsr[$linklevel['tabid']] = $gsr[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]];
        $linklevel['is_subrelation'] = 1;
    }
    $vgtabid = $linklevel['tabid'];
    $vuniqueid = $gfield[$verkn['tabid']]['form_name'][$verkn['fieldid']].'_'.$gformid;

    if($order == 'reset'){$order = null;$filter['ext_RelationFields']['order'][$vuniqueid] = null;}

    ########## relation parameter ##########
    $vgtabid_ = $vgtabid;
    if($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']] AND $order > 1000){
        $vgtabid_ = $gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']];
    }
    #####################



    if(!$order AND !$filter['ext_RelationFields']['order'][$vuniqueid] AND $gfield[$verkn['tabid']]['data_type'][$verkn['fieldid']] != 25){
        // direct 1:n relation
        $extension['order'][] = $verkn['md5tab'] . '.SORT';
        $extension['select'][] = $verkn['md5tab'] . '.SORT';
    }elseif(!$order){
        $vfilter['order'][$vgtabid] = $filter['ext_RelationFields']['order'][$vuniqueid];
    }elseif('ASC' == $params["ExtAction"]){
        $vfilter['order'][$vgtabid][0] = array($vgtabid_,$order,'ASC');
        $filter['ext_RelationFields']['order'][$vuniqueid] = $vfilter['order'][$vgtabid];
        save_viewSettings($vuniqueid);
    }elseif('DESC' == $params["ExtAction"]){
        $vfilter['order'][$vgtabid][0] = array($vgtabid_,$order,'DESC');
        $filter['ext_RelationFields']['order'][$vuniqueid] = $vfilter['order'][$vgtabid];
        save_viewSettings($vuniqueid);
    }

    // override validity setting from params
    if($filter['ext_RelationFields']['validity'][$vuniqueid]){
        $vfilter['validity'][$vgtabid] = $filter['ext_RelationFields']['validity'][$vuniqueid];
    }

    // override order
    if($extension_['order']){
        unset($extension["order"]);
    }

    // extension
    if($extension_){
        if (is_array($extension) && is_array($extension_)) {
            $extension = array_merge_recursive($extension,$extension_);
        }
    }

    // get full long text
    if($filter['ext_RelationFields']['getlongval'][$vuniqueid]){
        $vfilter['getlongval'][$vgtabid] = 1;
    }

    # notwendig f√ºr Versionierung da eine Verkn√ºpfung alle verkn√ºpften Datens√§tze anzeigen mu√ü nicht nur die Aktuellen
    # nutze $utyp = 2 um Versionierungs-Sortierung zu umgehen
    if($gtab['versioning'][$vgtabid] AND $gtab['viewver'][$vgtabid]){
        $vfilter['viewversion'][$vgtabid] = 1;
    }

    # GLOBAL shown fields if not defined
    if(!$filter['ext_RelationFields'][$vuniqueid]){
        if($gfield[$linklevel['vtabid']]['verknview'][$linklevel['vfieldid']]){
            $filter['ext_RelationFields'][$vuniqueid] = $gfield[$linklevel['vtabid']]['verknview'][$linklevel['vfieldid']];
        }else{
            $filter['ext_RelationFields'][$vuniqueid] = array($linklevel['vfieldid']);
        }
    }

    # used fields in select
    if(!$onlyfield){
        foreach ($filter['ext_RelationFields'][$vuniqueid] as $key => $value){
            ########## relation parameter ##########
            $vgtabid_ = $vgtabid;
            if($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']] AND $value > 1000){
                $vgtabid_ = $gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']];
                $verkn['verknparams'] = 1;
            }
            #####################
            $onlyfield[$vgtabid_][] = $value;
        }

        // default field
        if(!in_array($linklevel['fieldid'],$onlyfield[$vgtabid])){
            $onlyfield[$vgtabid][] = $linklevel['fieldid'];
        }

    }
    get_countFilter($vgtabid,$vuniqueid,$params,$vfilter);

    $gresult = get_gresult($vgtabid,2,$vfilter,$gsr,$verkn,$onlyfield,null,$extension);

    return $gresult;


    /*
	# show only not deleted
	if($hide_del){
		$squery["swhere"][] = $verkn["tab"].".DEL = ".LMB_DBDEF_FALSE;
	}
	# show only active version
	if($gtab["versioning"][$verkn["tabid"]] AND $hide_version){
		$squery["swhere"][] = $verkn["tab"].".VACT = ".LMB_DBDEF_TRUE;
	}
	*/

}


function get_countFilter($gtabid,$vuniqueid,$params,&$vfilter){
    global $filter;

    # pagination
    if($filter["ext_RelationFields"]["pagination"][$vuniqueid]) {
        if(!$filter["ext_RelationFields"]["count"][$vuniqueid]){$filter["ext_RelationFields"]["count"][$vuniqueid] = $GLOBALS['session']['maxresult'];}
        if(!$filter["ext_RelationFields"]["page"][$vuniqueid]){$filter["ext_RelationFields"]["page"][$vuniqueid] = 1;}
        $vfilter["anzahl"][$gtabid] = $filter["ext_RelationFields"]["count"][$vuniqueid];
        if ($filter["ext_RelationFields"]["showall"][$vuniqueid]) {$vfilter["anzahl"][$gtabid] = "all";}
        $vfilter["page"][$gtabid] = $filter["ext_RelationFields"]["page"][$vuniqueid];
    }else {
        # default show all
        $vfilter["anzahl"][$gtabid] = "all";
        # show all
        if ($filter["ext_RelationFields"]["showall"][$vuniqueid]) {
            $vfilter["anzahl"][$gtabid] = "all";
            # show count
        } elseif ($filter["ext_RelationFields"]["count"][$vuniqueid]) {
            $vfilter["anzahl"][$gtabid] = $filter["ext_RelationFields"]["count"][$vuniqueid];
            # show maxresult
        } elseif ($GLOBALS['action'] == 'gtab_change' OR $params['actid'] == 'extRelationFields') {
            $vfilter["anzahl"][$gtabid] = ($GLOBALS['session']["maxresult"] * 5);
        }
    }

}



# --- Edit Permission from multitenant ----
function check_MultitenantRules($ID,$gtabid){
    global $umgvar;
    global $session;
    global $lmmultitenants;
    global $gtab;
    global $db;

    if($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid] AND !$session['superadmin']) {

        $sqlquery = "SELECT LMB_MID FROM ".$gtab["table"][$gtabid]." WHERE ID = $ID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $MID = lmbdb_result($rs,'LMB_MID');

        if($lmmultitenants['mid'][$session['mid']] == $MID){
            return true;
        }

        // additional edit permission if user in multitenant group // todo - add groupright
        if(in_array($MID,$lmmultitenants['mid'])){
            return true;
        }

        return false;
    }
    return true;
}



/**
 * check readonly status
 *
 * @param $gtabid
 * @param $ID
 * @param $gresult
 * @return bool readonly
 */
function check_DataPermission($gtabid,$ID,&$gresult){
    global $session;
    global $gtab;

    $readonly = false;

    if($gtab["lockable"][$gtabid] OR $gtab["versioning"][$gtabid]){
        $lck = lock_data_check($gtabid,$ID,$session['user_id'],$gresult[$gtabid]["INUSE_TIME"][0],$gresult[$gtabid]["INUSE_USER"][0],$gresult[$gtabid]["VACT"][0]);

        # --- check if dataset is locked ----
        if($lck["islocked"]){
            $readonly = true;
        }

        # --- check if version is locked ----
        if ($lck["isversion"] AND !$gtab['editver'][$gtabid]) {
            $readonly = true;
        }
    }

	# ----------- edit Permission -----------
	if(!$readonly AND $gtab["editrule"][$gtabid]){
		$readonly = check_GtabRules($ID,$gtabid,null,$gtab["editrule"][$gtabid],0,$gresult);
	}
	# --- specific user/grouprules  --------------------------------------
	if(!$readonly AND $gtab["has_userrules"][$gtabid] AND !$gtab["edit_userrules"][$gtabid]){
		$readonly = !check_GtabUserRules($gtabid,$ID,$session["user_id"],"edit");
	}

	return $readonly;

}


/**
 * execute rules
 *
 * @param int $ID dataset id
 * @param int $gtabid table id
 * @param int $fieldid field id
 * @param string $rule php to evaluate
 * @param int $key current $gresult key
 * @param array $gresult from get_gresult()
 * @param int $typ ?
 * @return bool false if allowed to edit
 */
function check_GtabRules($ID,$gtabid,$fieldid,&$rule,$key=null,&$gresult=null,$typ=null){
    if($noedit = eval(trim($rule).";")){
        return true;
    }
    return false;
}


/**
 * Spezifische Datensatz Rechte pr√ºfen
 *
 * @param number $gtabid
 * @param number $datid
 * @param number $userid
 * @param string $rule (edit, del)
 * @return boolean
 */
function check_GtabUserRules($gtabid,$datid,$userid,$rule) {
    global $db;
    global $userdat;

    // edit
    if($rule == "edit"){
        $sqlrule = " AND EDIT = ".LMB_DBDEF_TRUE;
    }

    // delete
    if($rule == "del"){
        $sqlrule .= " AND DEL = ".LMB_DBDEF_TRUE;
    }

    $sqlquery = "SELECT KEYID FROM LMB_RULES_DATASET WHERE TABID = $gtabid AND DATID = $datid $sqlrule AND (USERID = $userid OR GROUPID IN(".$userdat["subgroup"][$userid]."))";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(lmbdb_fetch_row($rs)){return true;}else{return false;}
}

# --- Spezifische Datensatz Rechte hinzuf√ºgen / l√∂schen ----
/**
 * edit rules for datasets
 *
 * @param numeric $gtabid
 * @param array $recordlist
 * @param array $userpart
 * [0] = user/group ID;
 * [1] = u [user] (for user) || g [group] (for group)
 * [2] = v [add] (rule add) || r [remove] (rule remove) || e [edit] (rule to edit) || d [delete] (rule to delete)
 * [3] = edit / del = true / false
 * [4] [subgroups] true (add upper subgroups) || false
 * [5] [subgroups] true (add lower subgroups) || false
 * @param bool $newdataset true for new dataset
 * @return true/false
 */
function add_GtabUserRules($gtabid,$recordlist,$userpart,$newdataset=0) {
    global $session;
    global $gtab;
    global $db;
    global $lang;
    global $userdat;

    # table has no rules
    if(!$gtab["has_userrules"][$gtabid] OR !is_array($recordlist)){return true;}

    foreach ($recordlist as $key => $value){
        if(is_numeric($value)){
            $records[] = $value;
            $recordstab[] = $gtabid;
        }else{
            $val = explode("_",$value);
            $records[] = $val[0];
            $recordstab[] = $val[1];
        }
    }

    # if subedit_userrules only add grouppermission else add userpermission
    if($newdataset AND $gtab["subedit_userrules"][$gtabid]){
        if($userpart[0]){$userpart[0] = $userdat["groupid"][$userpart[0]];}
        $userpart[1] = "g";
    }

    # list of records
    if(!$records){return true;}
    foreach ($records as $datakey => $d_datid){

        # check plausibility
        if(!is_numeric($recordstab[$datakey]) OR !is_numeric($d_datid) OR $recordstab[$datakey] != $gtabid){continue;}

        # check dataset
        $sqlquery = "SELECT ID,ERSTUSER FROM ".$gtab["table"][$recordstab[$datakey]]." WHERE ID = ".$d_datid;
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!lmbdb_result($rs,"ID")){continue;}
        $d_datidlist[] = $d_datid;
        $d_erstuser = lmbdb_result($rs,"ERSTUSER");

        # list of 1:1 Tables
        $raverkn = $gtab["raverkn"][$gtab["verkn"][$recordstab[$datakey]]];
        #krsort($raverkn);
        foreach ($raverkn as $key => $d_tabid){
            # check if table has userrights
            if($gtab["has_userrules"][$d_tabid]){
                # action parameter
                if(is_array($userpart)){
                    if($userpart[1] == "u"){
                        $userid = $userpart[0];
                        $groupid = 0;
                        $sgroupid = $userdat["groupid"][$userid];
                        $presel = " AND USERID = ".parse_db_int($userid,5);
                    }elseif($userpart[1] == "g"){
                        $userid = 0;
                        $groupid = $userpart[0];
                        $sgroupid = $userpart[0];
                        $presel = " AND GROUPID = ".parse_db_int($groupid,5);
                    }

                    # ------ modify subgroups ------
                    if($userpart[4] OR $userpart[5]){
                        # permission
                        if(!($gtab["edit_userrules"][$gtabid] OR ($gtab["edit_ownuserrules"][$gtabid] AND $d_erstuser == $session["user_id"]) OR $newdataset)){continue;}
                        if($newdataset AND $sgroupid != $session["group_id"] AND $sgroupid){continue;}

                        # try to merge grouprules
                        $subgrouplist = array();
                        $subgrouplist_ = array();

                        # get subgroups left or right or both from position
                        if($gtab["subedit_userrules"][$gtabid] AND $sgroupid){
                            if($userpart[4] == 1){$subgrouplist = lmbUserGroupTree($sgroupid,0);}
                            if($userpart[5] == 1){$subgrouplist = array_unique(array_merge($subgrouplist,lmbUserGroupTree($sgroupid,1)));}
                        }
                        if($newdataset){
                            if($gtab["specific_userrules"][$gtabid]){$subgrouplist = array_unique(array_merge($subgrouplist,$gtab["specific_userrules"][$gtabid]));}
                        }

                        # try to merge rules
                        foreach ($subgrouplist as $gkey => $gval){
                            if(is_numeric($gval)){
                                $ed = LMB_DBDEF_TRUE;
                                $del = LMB_DBDEF_TRUE;
                                $gval_ = $gval;
                                # extended parameters / v = view; e = edit ; d = delete;
                            }else{
                                $ed = LMB_DBDEF_FALSE;$del = LMB_DBDEF_FALSE;$sp=1;
                                if(lmb_strpos($gval,"e")){
                                    $ed = LMB_DBDEF_TRUE;
                                    $sp++;
                                }
                                if(lmb_strpos($gval,"d")){
                                    $del = LMB_DBDEF_TRUE;
                                    $sp++;
                                }
                                $gval_ = lmb_substr($gval,$sp,99);
                            }

                            if(is_numeric($gval_)){
                                if(!$subgrouplist_["edit"][$gval_]){
                                    $subgrouplist_["edit"][$gval_] = $ed;
                                }elseif($ed == LMB_DBDEF_TRUE){
                                    $subgrouplist_["edit"][$gval_] = $ed;
                                }
                                if(!$subgrouplist_["del"][$gval_]){
                                    $subgrouplist_["del"][$gval_] = $del;
                                }elseif($del == LMB_DBDEF_TRUE){
                                    $subgrouplist_["del"][$gval_] = $del;
                                }
                            }
                        }

                        if($subgrouplist_["edit"]){
                            # add
                            if($userpart[2] == "v"){
                                $NEXTID = next_db_id("LMB_RULES_DATASET","KEYID");
                                foreach ($subgrouplist_["edit"] as $gkey_ => $gval_){
                                    $sqlquery = "SELECT KEYID FROM LMB_RULES_DATASET WHERE DATID = ".parse_db_int($d_datid,18)." AND TABID = ".parse_db_int($d_tabid,5)." AND GROUPID = ".parse_db_int($gkey_,5);
                                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                                    if(!$rs) {$commit = 1;}
                                    if(!lmbdb_fetch_row($rs)){
                                        $sqlquery1 = "INSERT INTO LMB_RULES_DATASET (KEYID,EDITUSER,DATID,GROUPID,TABID,EDIT,DEL) VALUES($NEXTID,".$session["user_id"].",".parse_db_int($d_datid,18).",".parse_db_int($gkey_,5).",".parse_db_int($d_tabid,5).",".$subgrouplist_["edit"][$gkey_].",".$subgrouplist_["del"][$gkey_].")";
                                        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                                        $NEXTID++;
                                        if(!$rs1) {$commit = 1;}
                                    }
                                }
                                # drop
                            }elseif ($userpart[2] == "r"){
                                foreach ($subgrouplist_["edit"] as $gkey_ => $gval_){
                                    $sqlquery1 = "DELETE FROM LMB_RULES_DATASET WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18)." AND GROUPID = ".parse_db_int($gkey_,5);
                                    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                                    if(!$rs1) {$commit = 1;}
                                }
                                # delete
                            }elseif ($userpart[2] == "d"){
                                foreach ($subgrouplist_["edit"] as $gkey_ => $gval_){
                                    $sqlquery = "UPDATE LMB_RULES_DATASET SET DEL = ".parse_db_bool($userpart[3])." WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18)." AND GROUPID = ".parse_db_int($gkey_,5);
                                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                                    if(!$rs) {$commit = 1;}
                                }
                                # edit
                            }elseif ($userpart[2] == "e"){
                                foreach ($subgrouplist_["edit"] as $gkey_ => $gval_){
                                    $sqlquery = "UPDATE LMB_RULES_DATASET SET EDIT = ".parse_db_bool($userpart[3])." WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18)." AND GROUPID = ".parse_db_int($gkey_,5);
                                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                                    if(!$rs) {$commit = 1;}
                                }
                            }
                        }
                    }

                    # check permission
                    if($gtab["edit_userrules"][$gtabid] AND $sgroupid OR ($gtab["edit_ownuserrules"][$gtabid] AND $d_erstuser == $session["user_id"]) OR ($d_erstuser == $session["user_id"] AND $d_erstuser == $userid)){

                        # add single user/group
                        if($userpart[2] == "v"){
                            # superuser should not add own rule
                            if($gtab["edit_userrules"][$gtabid] AND $d_erstuser == $session["user_id"] AND $d_erstuser == $userid){continue;}
                            $ed = LMB_DBDEF_TRUE;$del = LMB_DBDEF_TRUE;
                            $NEXTID = next_db_id("LMB_RULES_DATASET","KEYID");
                            $sqlquery = "SELECT KEYID FROM LMB_RULES_DATASET WHERE DATID = ".parse_db_int($d_datid,18)." AND TABID = ".parse_db_int($d_tabid,5).$presel;
                            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs) {$commit = 1;}
                            if(!lmbdb_fetch_row($rs)){
                                $sqlquery1 = "INSERT INTO LMB_RULES_DATASET (KEYID,EDITUSER,DATID,USERID,GROUPID,TABID,EDIT,DEL) VALUES($NEXTID,".$session["user_id"].",".parse_db_int($d_datid,18).",".parse_db_int($userid,5).",".parse_db_int($groupid,5).",".parse_db_int($d_tabid,5).",$ed,$del)";
                                $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                                if(!$rs1) {$commit = 1;}
                            }
                            # drop single user/group
                        }elseif($userpart[2] == "r"){
                            $sqlquery = "DELETE FROM LMB_RULES_DATASET WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18).$presel;
                            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs) {$commit = 1;}

                            # user right to edit
                        }elseif($userpart[2] == "e"){
                            $sqlquery = "UPDATE LMB_RULES_DATASET SET EDIT = ".parse_db_bool($userpart[3])." WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18).$presel;
                            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs) {$commit = 1;}
                            # user right to delete
                        }elseif($userpart[2] == "d"){
                            $sqlquery = "UPDATE LMB_RULES_DATASET SET DEL = ".parse_db_bool($userpart[3])." WHERE TABID = ".parse_db_int($d_tabid,5)." AND DATID = ".parse_db_int($d_datid,18).$presel;
                            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs) {$commit = 1;}
                        }

                    }


                }
            }
        }
    }

    if(!$commit){return $d_datidlist;}else{return false;}
}



/* --- Gtab L√∂sch-Routine -------------------------------------------- */
$deletecount = 0;

/**
 * Datensatz incl. 1:1 Verkn√ºpfte Datens√§tze l√∂schen
 * @param int $gtabid
 * @param int $ID
 * @param string $typ>
 * @param array|null $delete_recursive
 * @return bool
 */
function del_data($gtabid,$ID,$typ="delete",$delete_recursive=null){
    global $gtab;
    global $gfield;
    global $umgvar;
    global $lang;
    global $db;
    $null = null;

    # --- Grundrechte Pr√ºfen --------------------------------------
    if(!$gtab["delete"][$gtabid] OR !$ID OR !$GLOBALS["LINK"][11]){
        lmb_log::error('del_data - permission denied for delete rule', null, $gtabid, null, $ID);
        return false;
    }

    # ----------- multitenant permission  -----------
    if($umgvar['multitenant'] AND !check_MultitenantRules($ID,$gtabid)){
        lmb_log::error('del_data - permission denied for multitenant rule', $lang[1317], $gtabid, null, $ID);
        return false;
    }

    # ----------- Edit Permission from Table-Rule -----------
    if($gtab["editrule"][$gtabid]){
        #$rownr = 0;
        if(check_GtabRules($ID,$gtabid,null,$gtab["editrule"][$gtabid],null,$null,'delete')){
            lmb_log::error('del_data - permission denied for table rule', null, $gtabid, null, $ID);
            return false;
        }
    }

    # --- Edit Permission from Dataset-Rule --------------------------------------
    if($gtab["has_userrules"][$gtabid] AND !$gtab["edit_userrules"][$gtabid]){
        if(!check_GtabUserRules($gtabid,$ID,$GLOBALS["session"]["user_id"],"del")){
            lmb_log::error('del_data - permission denied for data rule', null, $gtabid, null, $ID);
            return false;
        }
    }

    # --- is old version / locked --------------------------------------
    if($gtab["lockable"][$gtabid] OR $gtab["versioning"][$gtabid]){
        $lck = lock_data_check($gtabid,$ID,$GLOBALS["session"]["user_id"]);

        if($lck["islocked"]){
            lmb_log::error('del_data - permission denied for locked dataset', $GLOBALS["lang"][2651], $gtabid, null, $ID);
            return false;
        }

        if($lck["isversion"] AND !$gtab['delver'][$gtabid]){
            lmb_log::error('del_data - permission denied for versioned dataset', $GLOBALS["lang"][2650], $gtabid, null, $ID);
            return false;
        }
    }

    lmb_StartTransaction();

    # list of 1:1 Tables
    if($gtab["raverkn"][$gtab["verkn"][$gtabid]]){

        if($delete_recursive && !$GLOBALS['LINK'][276]) {$delete_recursive = 0;}

        # versioning
        if($gtab["versioning"][$gtabid]) {

            #  Version history
            $sqlquery = "SELECT ID,VPID,VID FROM " . $gtab["table"][$gtabid] . " 
            WHERE VPID = (SELECT VPID FROM " . $gtab["table"][$gtabid] . " WHERE ID = $ID)
            ORDER BY VID ASC";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
            $bzm = 0;
            while (lmbdb_fetch_row($rs)) {
                $id = lmbdb_result($rs, 'ID');

                if($delete_recursive AND !$vpid) {
                    $droplist[$id] = lmbdb_result($rs, "VID");
                }

                if ($ID != $id) {
                    $newActiveID = $id; // new active ID
                } else {
                    $droplist[$id] = lmbdb_result($rs, "VID");
                    $vpid = lmbdb_result($rs, "VPID");
                    $currentVID = lmbdb_result($rs, "VID"); // current version
                }
                $bzm++;
            }

            // delete all - no new active dataset
            if($delete_recursive AND lmb_count($droplist) == $bzm) {
                $newActiveID = null;
            }
            // l√∂sche alle Versionen ab ID (recursiv)
            if (!is_array($droplist)) {
                $droplist = [];
            }
            arsort($droplist);

        }

        // list of all 1:1 relations
        $raverkn = $gtab["raverkn"][$gtab["verkn"][$gtabid]];
        krsort($raverkn);
        foreach ($raverkn as $key => $vgtabid){

            # versioning
            if($gtab["versioning"][$vgtabid]){

                // recursive versioning for relations
                // √§ndere vorhandene r√ºckwertige Verkn√ºpfungen zu aktueller Version
                if($gtab["versioning"][$vgtabid] == 1 AND $gfield[$vgtabid]["r_verkntabid"] AND $newActiveID){
                    foreach($gfield[$vgtabid]["r_verkntabid"] as $vkey => $vvalue){
                        if($gfield[$vvalue]["verkntabletype"][$vkey] == 1 AND $gtab['validity'][$vgtabid] != 2){ // not for validity
                            // 1:n direct
                            if($gfield[$vvalue]['data_type'][$vkey] == 25){
                                // set new relation to new active version
                                $sqlquery1 = "UPDATE " . $gtab['table'][$vgtabid] . " SET ".$gfield[$vvalue]['md5tab'][$vkey]." = (SELECT ".$gfield[$vvalue]['md5tab'][$vkey]." FROM " . $gtab['table'][$vgtabid] . " WHERE ID = $ID) WHERE ID = $newActiveID";
                                if($gfield[$vvalue]["sync"][$vkey]){
                                    $sqlquery2 = "SELECT ".$gfield[$vvalue]['md5tab'][$vkey]." FROM " . $gtab['table'][$vgtabid] . " WHERE ID = $ID";
                                    $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                                    execute_sync($vvalue,$vkey,lmbdb_result($rs2, $gfield[$vvalue]['md5tab'][$vkey]),$null,null,null,3);
                                }
                            // 1:n / n:m
                            }else {
                                if($gfield[$vvalue]["sync"][$vkey]){
                                    $sqlquery2 = "SELECT ID FROM ".$gfield[$vvalue]["md5tab"][$vkey]." WHERE VERKN_ID = $ID AND NOT EXISTS (SELECT ID FROM ".$gfield[$vvalue]["md5tab"][$vkey]." WHERE VERKN_ID = $newActiveID)";
                                    $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                                    while(lmbdb_fetch_row($rs2)) {
                                        execute_sync($vvalue, $vkey, lmbdb_result($rs2, 'ID'), $null, null, null, 3);
                                    }
                                }
                                $sqlquery1 = "UPDATE ".$gfield[$vvalue]["md5tab"][$vkey]." SET VERKN_ID = $newActiveID WHERE VERKN_ID = $ID AND NOT EXISTS (SELECT ID FROM ".$gfield[$vvalue]["md5tab"][$vkey]." WHERE VERKN_ID = $newActiveID)";
                            }
                            $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                        }
                    }
                }

                // delete version or versionlist
                foreach ($droplist as $id_ => $vid_) {
                    if (!del_record($vgtabid, $id_, $typ, $delete_recursive)) {
                        lmb_log::error('del_data - delete dataset failed', 'failed to delete versioned dataset', $vgtabid, null, $id_);
                        lmb_EndTransaction(0);
                        return false;
                    }
                }

                if($newActiveID) {
                    // resort VID - set new VACT
                    if (!resort_version($vgtabid, $vpid)) {
                        lmb_EndTransaction(0);
                        return false;
                    }
                }

                // update validity stamp if cut inner dataset (not last)
                if($newActiveID AND $gtab['validity'][$vgtabid] == 2) {
                    $sqlquery = "SELECT LMB_VALIDFROM FROM " . $gtab["table"][$vgtabid] . " WHERE VPID = $vpid AND VID = $currentVID";
                    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                    $validfrom = get_stamp(lmbdb_result($rs, 'LMB_VALIDFROM'));
                    if($validfrom) {
                        $validfrom = convert_stamp($validfrom - 86400); // - 1 day
                        $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDTO = '$validfrom)' WHERE VPID = $vpid AND VID = " . ($currentVID - 1);
                        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                        if($gtab["datasync"][$vgtabid]){
                            $sqlquery2 = "SELECT ID FROM ".$gtab["table"][$vgtabid]." WHERE VPID = $vpid AND VID = " . ($currentVID - 1);
                            $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                            execute_sync($vgtabid,0,lmbdb_result($rs2, 'ID'),$null,null,null,3);
                        }
                        if (!$rs) {
                            lmb_log::error('del_data - delete dataset failed', 'failed to set validity stamps', $vgtabid, null, $ID);
                            $commit = 1;
                        }
                    }
                }

            }else {
                if (!del_record($vgtabid, $ID, $typ, $delete_recursive)) {
                    lmb_log::error('del_data - delete dataset failed', 'failed to delete dataset', $vgtabid, null, $ID);
                    lmb_EndTransaction(0);
                    return false;
                }
            }
        }
    }

    if($commit){
        lmb_EndTransaction(0,"ID ".$ID_);
        return false;
    }else{
        lmb_EndTransaction(1);
        return true;
    }
}

# --- Datensatz incl. 1:1 Verkn√ºpfte Datens√§tze verstecken ------
# archive, trash, restore
function hide_data($gtabid,$ID,$typ='trash'){
    global $gtab;
    global $db;
    global $umgvar;
    global $lang;

    // permission check
    if(($typ == 'archive' && !$gtab['hide'][$gtabid]) OR ($typ == 'trash' && !$gtab['trash'][$gtabid])){
        lmb_log::error($typ.'_data - permission denied for type1 '.$typ, $GLOBALS["lang"][114], $gtabid, null, $ID);
        return false;
    }

    if((!$gtab['trash'][$gtabid] && !$gtab['hide'][$gtabid]) OR !$ID OR !$GLOBALS["LINK"][11]){
        lmb_log::error($typ.'_data - permission denied for type2 '.$typ, $GLOBALS["lang"][114], $gtabid, null, $ID);
        return false;
    }

    # --- is old version / locked --------------------------------------
    if($gtab["lockable"][$gtabid] OR $gtab["lockable"][$gtabid]){
        $lck = lock_data_check($gtabid,$ID,$GLOBALS["session"]["user_id"]);
        if($lck["isversion"] OR $lck["islocked"]){
            lmb_log::error('hide_data - permission denied for locked OR versioned dataset', $GLOBALS["lang"][2651], $gtabid, null, $ID);
            return false;
        }
    }

    # --- Spezifische Userrechte Pr√ºfen --------------------------------------
    if($gtab["has_userrules"][$gtabid] AND !$gtab["edit_userrules"][$gtabid]){
        if(!check_GtabUserRules($gtabid,$ID,$GLOBALS["session"]["user_id"],"edit")){
            lmb_log::error('hide_data - permission denied for edit rule', $GLOBALS["lang"][114], $gtabid, null, $ID);
            return false;
        }
    }

    # ----------- multitenant permission  -----------
    if($umgvar['multitenant'] AND !check_MultitenantRules($ID,$gtabid)){
        lmb_log::error('del_data - permission denied for multitenant rule', $lang[1317], $gtabid, null, $dataid);
        return false;
    }

    lmb_StartTransaction();

    if($gtab["raverkn"][$gtab["verkn"][$gtabid]]){
        // 1:1 tables
        foreach ($gtab["raverkn"][$gtab["verkn"][$gtabid]] as $key => $value){
            # versionierte Datens√§tze
            if($gtab["versioning"][$gtabid]){
                $sqlquery = "SELECT ID FROM ".$gtab["table"][$value]." WHERE VPID = (SELECT VPID FROM ".$gtab["table"][$value]." WHERE ID = $ID)";
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                if(!$rs) {$commit = 1;}
                while(lmbdb_fetch_row($rs)) {
                    if(!hide_record($value,lmbdb_result($rs,"ID"),$typ)){$commit = 1;break;}
                }
            }else{
                if(!hide_record($value,$ID,$typ)){$commit = 1;break;}
            }
        }
    }

    if($commit){
        lmb_EndTransaction(0);
        return false;
    }else{
        lmb_EndTransaction(1);
        return true;
    }

}



/**
 *
 * get new validity date for new version
 *
 * @param $gtabid
 * @param $ID
 * @param $newID
 * @return array|bool
 */

function version_record_validity($gtabid,$ID,$newID){
    global $db;
    global $gtab;
    global $lang;

    // pre-update new version if validity changed simultaneously - todo


    // get validity stamps from old version
    $sqlquery = "SELECT LMB_VALIDFROM,LMB_VALIDTO FROM " . $gtab["table"][$gtabid] . " WHERE ID = $ID";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
    if (!$rs) {return false;}
    $left_vfrom = get_stamp(lmbdb_result($rs, 'LMB_VALIDFROM'));
    $left_vto = get_stamp(lmbdb_result($rs, 'LMB_VALIDTO'));

    // if LMB_VALIDTO is set
    if ($left_vto) {
        $new_left_to = $left_vto;
        $new_right_from = (add_oneday($left_vto));
    // if LMB_VALIDFROM > now()
    } elseif ($left_vfrom >= local_stamp()) {
        $new_left_to = $left_vfrom;
        $new_right_from = (add_oneday($left_vfrom));
    // else default now()
    } elseif ($left_vfrom < local_stamp()) {
        $new_left_to = local_stamp();
        $new_right_from = (add_oneday($new_left_to));
    }

    if ($left_vfrom > $new_left_to) {
        lmb_alert($lang[3099].': '.$lang[1445].': ' . stampToDate($left_vfrom) . ' > '.$lang[1446].': ' . stampToDate($new_left_to));
        return false;
    }

    return array('new_left_to' => $new_left_to,'new_right_from' => $new_right_from);

}

/**
 *
 * get new validity date for new version
 *
 * @param $gtabid
 * @param $ID
 * @param $newID
 * @return array|bool
 */



/**
 * versioning dataset
 *
 * @param unknown_type $gtabid
 * @param unknown_type $ID
 * @param unknown_type $newID
 * @return unknown
 */
function version_record($gtabid,$ID,$newID){
    global $db;
    global $gtab;
    global $gfield;
    global $farbschema;
    global $lang;
    global $session;

    if(!$gtab["versioning"][$gtabid]){return true;}
    # --- is old version / locked --------------------------------------
    if($gtab["lockable"][$gtabid] OR $gtab["versioning"][$gtabid]){
        $lck = lock_data_check($gtabid,$ID,$GLOBALS['session']["user_id"]);
        if($lck["isversion"] OR $lck["islocked"]){
            lmb_log::error('del_data - permission denied for locked OR versioned dataset', $lang[2651], $gtabid, null, $ID);
            return false;
        }
    }

    // list of 1:1 relations
    $origintabid = $gtab["verkn"][$gtabid];
    $selfrelation = $gtab["raverkn"][$origintabid];

    // only use last 1:1 relation / ignore 1:1 loops
    $lasttabid = $selfrelation;
    end($lasttabid);
    if(($origintabid AND $gtabid != current($lasttabid)) OR !$selfrelation){
        return true;
    }

    // get new validity date for new version
    // check for validity versioning for all 1:1 relations. Use only first hit
    foreach ($selfrelation as $vgtabid) {
        if ($gtab['validity'][$vgtabid] == 2 AND !$new_validity) {
            $new_validity = version_record_validity($vgtabid,$ID,$newID);
            if(!$new_validity){return false;}
        }
    }

    lmb_StartTransaction();

    foreach ($selfrelation as $vgtabid){

        // validity versioning
        if($gtab['validity'][$vgtabid] == 2 AND $new_validity) {
            // set validity stamps
            if($new_validity['new_left_to']) {
                $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDTO = '" . convert_stamp($new_validity['new_left_to']) . "' WHERE ID = $ID";
                $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                if (!$rs) {$commit = 1;}
            }
             if($new_validity['new_right_from']) {
                 $sqlquery = "UPDATE " . $gtab["table"][$vgtabid] . " SET LMB_VALIDFROM = '" . convert_stamp($new_validity['new_right_from']) . "', LMB_VALIDTO = NULL WHERE ID = $newID";
                 $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                 if (!$rs) {$commit = 1;}
             }
        }

        # search parent ID
        $sqlquery = "SELECT VPID FROM ".$gtab["table"][$vgtabid]." WHERE ID = $ID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
        $vpid = lmbdb_result($rs,"VPID");
        if(!$vpid){
            lmb_log::error('version_record - no VPID', null, $vgtabid, null, $ID);
            lmb_EndTransaction(0,"ID ".$ID);
            return false;
        }

        # set change-date
        $sqlquery = "UPDATE ".$gtab["table"][$vgtabid]." SET EDITDATUM = ".LMB_DBDEF_TIMESTAMP." WHERE ID = $ID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}

        # set active dataset
        $sqlquery = "UPDATE ".$gtab["table"][$vgtabid]." SET VACT = ".LMB_DBDEF_FALSE." WHERE VPID = $vpid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
        # set versioning - todo

        # set description
        if($GLOBALS["versdesc"]){
            $sqlquery = "UPDATE ".$gtab["table"][$vgtabid]." SET VDESC = '".parse_db_string($GLOBALS["versdesc"],399)."' WHERE ID = $newID";
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            if(!$rs) {$commit = 1;}
        }

        # --- sync cache entry - systemfields only
        if($gtab["datasync"][$vgtabid]){
            execute_sync($vgtabid,0,$ID,$null,null,null,3);
        }

        # new version
        $sqlquery = "UPDATE ".$gtab["table"][$vgtabid]." SET VID = ((SELECT M FROM (SELECT MAX(VID) AS M FROM ".$gtab["table"][$vgtabid]." WHERE VPID = $vpid) AS S)+1) , VPID = $vpid, VACT = ".LMB_DBDEF_TRUE." WHERE ID = $newID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}

        # recursive versioning for relations
        if($gtab['versioning'][$vgtabid] == 1 AND $gfield[$vgtabid]['r_verkntabid'] AND !$GLOBALS['ltmp_isRecursivVersion']){

            foreach($gfield[$vgtabid]['r_verkntabid'] as $key => $ptabid){

                // only forward relation
                if($gfield[$ptabid]['verkntabletype'][$key] == 1){

                    // 1:n direct
                    if($gfield[$ptabid]['data_type'][$key] == 25){
                        // change to new relation
                        $sqlquery1 = "UPDATE " . $gtab['table'][$vgtabid] . " SET ".$gfield[$ptabid]['md5tab'][$key]." = (SELECT ".$gfield[$ptabid]['md5tab'][$key]." FROM " . $gtab['table'][$vgtabid] . " WHERE ID = $ID) WHERE ID = $newID";
                        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                        if(!$rs1) {$commit = 1;}
                        # --- sync cache entry ----
                        if ($gfield[$ptabid]["sync"][$key]) {
                            $null = null;
                            $sqlquery2 = "SELECT ".$gfield[$ptabid]['md5tab'][$key]." FROM " . $gtab['table'][$vgtabid] . " WHERE ID = $ID";
                            $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                            if($RID = lmbdb_result($rs2, $gfield[$ptabid]['md5tab'][$key])) {
                                execute_sync($ptabid, $key, $RID, $null, null, null, 3);
                            }
                        }

                        // remove old relation only if no validity
                        if($gtab['validity'][$vgtabid] != 2) {
                            $sqlquery1 = "UPDATE " . $gtab['table'][$vgtabid] . " SET " . $gfield[$ptabid]['md5tab'][$key] . " = NULL WHERE ID = $ID";
                            $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs1) {$commit = 1;}
                            # --- sync cache entry - already done ----
                        }
                    }else {
                        // add new relation if validity
                        if($gtab['validity'][$vgtabid] == 2) {
                            // find all related datasets
                            $sqlquery1 = "SELECT DISTINCT ID FROM ".$gfield[$ptabid]['md5tab'][$key]." WHERE VERKN_ID = $ID";
                            $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs1) {$commit = 1;}
                            // add new relation for all parents
                            while(lmbdb_fetch_row($rs1)) {
                                $pID = lmbdb_result($rs1, 'ID');
                                $keyid = next_db_id($gfield[$ptabid]['md5tab'][$key],"KEYID",1);
                                $sqlquery2 = "INSERT INTO ".$gfield[$ptabid]['md5tab'][$key]." (KEYID,ID,VERKN_ID) VALUES($keyid,$pID,$newID)";
                                $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                                if(!$rs2) {$commit = 1;}
                                # --- sync cache entry ----
                                if ($gfield[$ptabid]["sync"][$key]) {
                                    $null = null;
                                    execute_sync($ptabid, $key, $pID, $null, null, null, 3);
                                }
                            }
                        // replace old relation to new dataset if no validity
                        }else{
                            # --- sync cache entry ----
                            if ($gfield[$ptabid]["sync"][$key]) {
                                $sqlquery2 = "SELECT ID FROM " . $gfield[$ptabid]['md5tab'][$key] . " WHERE VERKN_ID = $ID";
                                $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                                $null = null;
                                while(lmbdb_fetch_row($rs2)) {
                                    execute_sync($ptabid, $key, lmbdb_result($rs2, 'ID'), $null, null, null, 3);
                                }
                            }

                            $sqlquery1 = "UPDATE " . $gfield[$ptabid]['md5tab'][$key] . " SET VERKN_ID = $newID WHERE VERKN_ID = $ID";
                            $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs1) {$commit = 1;}

                        }
                    }
                }
            }
        }
    }

    if($commit){
        lmb_EndTransaction(0,"ID ".$ID);
        return false;
    }else{
        lmb_EndTransaction(1);
        return true;
    }
}

/**
 * Datensatz Sperre setzen
 *
 * @param numeric $gtabid
 * @param numeric $ID
 * @param numeric $user
 * @param boolean $iuse
 * @return boolean
 */
function lock_data_set($gtabid,$ID,$user,$iuse=null){
    global $db;
    global $gtab;
    global $umgvar;

    if($ID){
        if(!$iuse){
            $iuse = $umgvar['inusetime'];
        }elseif(is_array($iuse) AND is_numeric($iuse[0])){
            if($iuse[1] == 'm'){$iuse = $iuse[0];}
            if($iuse[1] == 'h'){$iuse = ($iuse[0]*60);}
            if($iuse[1] == 'd'){$iuse = ($iuse[0]*60*24);}
        }elseif($iuse == 'unlock'){
            $iuse = -10;
            $override = 1;
        }

        if (!is_numeric($iuse)){
            $iuse = $umgvar['inusetime'];
        }

        $stamp = mktime(date('H'),date('i') + $iuse,date('s'),date('m'),date('d'),date('Y'));
        $iuse = "'".convert_stamp($stamp)."'";

        $iuq = " AND (INUSE_TIME <= $iuse OR INUSE_TIME IS NULL)";
        if($override){$iuq = "";}

        # alle 1:1 Verkn√ºpfungen sperren
        foreach ($gtab['raverkn'][$gtab['verkn'][$gtabid]] as $key => $value){
            $sqlquery = "UPDATE ".$gtab['table'][$value]." SET INUSE_TIME = $iuse,INUSE_USER = ".parse_db_int($user,5)." WHERE ID = ".parse_db_int($ID,16).$iuq;
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

            if(!$rs) {return false;}
        }
    }
    return true;
}


/**
 * Datensatz Sperre pr√ºfen
 *
 * @param numeric $gtabid
 * @param numeric $ID
 * @param numeric $user
 * @param date $INUSE_TIME
 * @param numeric $INUSE_USER
 * @param boolean $VACT
 * @return void|number|Ambigous <number, string>|boolean
 */
function lock_data_check($gtabid,$ID,$user,$INUSE_TIME=null,$INUSE_USER=null,$VACT=null){
    global $db;
    global $gtab;
    global $umgvar;
    global $lang;
    #static $lock;
    #static $lck;

    if(!$ID){return false;}

    #if($lck[$gtabid]){return $lock[$gtabid];}
    if($gtab['typ'][$gtabid] == 5){return;}
    #$lck[$gtabid] = 1;

    // get VACT / INUSE_TIME if not set
    if($gtab['versioning'][$gtabid] AND !isset($VACT)){
        $sqlquery = "SELECT INUSE_TIME,INUSE_USER,VACT FROM ".$gtab['table'][$gtabid]." WHERE ID = $ID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
        $VACT = lmbdb_result($rs,'VACT');
    // get INUSE_TIME if not set
    }elseif($gtab['lockable'][$gtabid] AND !isset($INUSE_TIME)){
        $sqlquery = "SELECT INUSE_TIME,INUSE_USER FROM ".$gtab['table'][$gtabid]." WHERE ID = $ID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    }

    if($rs){
        $INUSE_TIME_ST = get_stamp(lmbdb_result($rs,'INUSE_TIME'));
        $INUSE_TIME_D = get_date(lmbdb_result($rs,'INUSE_TIME'),2);
        $INUSE_USER = lmbdb_result($rs,'INUSE_USER');
    }elseif($INUSE_TIME){
        $INUSE_TIME_ST = get_stamp($INUSE_TIME);
        $INUSE_TIME_D = get_date($INUSE_TIME,2);
    }

    // if not active version and no permission to edit
    if($gtab['versioning'][$gtabid] AND !$gtab['editver'][$gtabid] AND !$VACT){
        $lock[$gtabid]['isversion'] = 1;
        #return $lock[$gtabid];
    }

    if($gtab['lockable'][$gtabid]){
    if($INUSE_USER != $user AND $INUSE_TIME_ST > local_stamp(2)){
        $resttime = ($INUSE_TIME_ST - local_stamp(2)) / 60;
        if($resttime > 60){$resttime = round($resttime/60,1)." ".$lang[1981];}elseif($resttime > 1440){$resttime = round($resttime/60/24,1)." ".$lang[1982];}else{$resttime = round($resttime,1)." ".$lang[1980];}
        $lock[$gtabid]['islocked'] = 1;
        $lock[$gtabid]['user'] = $INUSE_USER;
        $lock[$gtabid]['time'] = $INUSE_TIME_D;
        $lock[$gtabid]['time_left'] = $resttime;
        return $lock[$gtabid];
    }elseif($INUSE_USER == $user AND $INUSE_TIME_ST > local_stamp(2)){
        $resttime = ($INUSE_TIME_ST - local_stamp(2)) / 60;
        if($resttime > 60){$resttime_str = round($resttime/60,1)." ".$lang[1981];}elseif($resttime > 1440){$resttime_str = round($resttime/60/24,1)." ".$lang[1982];}else{$resttime_str = round($resttime,1)." ".$lang[1980];}
        $lock[$gtabid]['isselflocked'] = 1;
        if($resttime > $umgvar['inusetime']){
            $lock[$gtabid]['isstatic'] = 1;
        }
        $lock[$gtabid]['time'] = $INUSE_TIME_D;
        $lock[$gtabid]['time_left'] = $resttime_str;
        return $lock[$gtabid];
    }}

    return false;
}

/**
 * Datensatz Sperre
 *
 * @param numeric $gtabid
 * @param numeric $ID
 * @param array $gresult
 * @return void|boolean
 */
function lock_data($gtabid,$ID,&$gresult=null){
    global $gtab;
    global $session;
    global $userdat;
    #global $action;
    global $lang;

    if($gtab["typ"][$gtabid] == 5){return true;}

    if($ID){

        if(!$gresult){
            $gresult = get_gresult($gtabid,1,null,null,null,null,$ID);
        }

        $lck = lock_data_check($gtabid,$ID,$session["user_id"],$gresult[$gtabid]["INUSE_TIME"][0],$gresult[$gtabid]["INUSE_USER"][0],$gresult[$gtabid]["VACT"][0]);
        # is old version
        #if($lck["isversion"]){
        #    if($action != "gtab_change" AND $action != "gtab_deterg"){$action = "gtab_erg";}else{$action = "gtab_deterg";$GLOBALS["old_action"] = 'gtab_readonly';}
        #}

        if($lck["isstatic"]){
            $gresult[$gtabid]["LOCK"]["STATIC"][$ID] = $lck["time_left"];
            $gresult[$gtabid]["LOCK"]["TIME"][$ID] = $lck["time_left"];
        }

        # is locked
        if($lck["islocked"]){
            #if($action != "gtab_change" AND $action != "gtab_deterg"){$action= "gtab_erg";}else{$action = "gtab_deterg";}
            $gresult[$gtabid]["LOCK"]["USER"][$ID] = $userdat["vorname"][$lck["user"]]." ".$userdat["name"][$lck["user"]];
            $gresult[$gtabid]["LOCK"]["TIME"][$ID] = $lck["time_left"];
            lmb_log::error('lock_data - lock failed: dataset is already locked', "$lang[763]\\n$lang[1721] \"".$gresult[$gtabid]["LOCK"]["USER"][$ID]."\"\\n$lang[1722] ".$lck["time_left"], $gtabid, null, $ID);
        }elseif($lck["isselflocked"]){
            $gresult[$gtabid]["LOCK"]["SELF"][$ID] = $userdat["vorname"][$session["user_id"]]." ".$userdat["name"][$session["user_id"]];
            $gresult[$gtabid]["LOCK"]["TIME"][$ID] = $lck["time_left"];
        }else{
            if(!lock_data_set($gtabid,$ID,$session["user_id"])){return false;}
        }
    }

    return true;
}

/*
 * delete all 1:n / n:m relations to dataset (i:n direct relations where deleted with dataset itselv)
 */
function del_record_refint($gtabid,$ID){
    global $db;

    $sqlquery = "SELECT TAB_ID,FIELD_ID,MD5TAB
    FROM LMB_CONF_FIELDS 
    WHERE VERKNTABLETYPE = 1 AND DATA_TYPE != 25 AND VERKNTABID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {
        return false;
    }

    while(lmbdb_fetch_row($rs)) {
        $md5tab = lmbdb_result($rs, "MD5TAB");

        $sqlquery1 = "DELETE FROM $md5tab WHERE VERKN_ID = $ID";
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs1) {
            return false;
        }

    }

    return true;
}


/**
 * recusive deletion of related records
 *
 * @param number $gtabid
 * @param number $ID
 * @param string $typ (delete | hide)
 * @param null $delete_recursive (only this tables)
 * @param array $deleteTrace
 * @return bool
 */
function del_record_recursive($gtabid,$ID,$typ,$delete_recursive=null){
    global $db;
    global $gtab;
    global $gfield;

    # get all relation definitions of table
    $sqlquery1 = "SELECT DISTINCT FIELD_NAME,DATA_TYPE,FIELD_TYPE,VERKNTABID,VERKNFIELDID,MD5TAB,REFINT 
    FROM LMB_CONF_FIELDS 
    WHERE TAB_ID = ".$gtabid." AND FIELD_TYPE = 11 AND VERKNTABLETYPE = 1 AND VERKNTREE IS NULL";
    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs1) {return false;}
    while(lmbdb_fetch_row($rs1)) {
        unset($delvrk);
        $skiprelation = 0;
        $md5tab = lmbdb_result($rs1,"MD5TAB");
        $datatype = lmbdb_result($rs1,"DATA_TYPE");
        $refint = lmbdb_result($rs1,"REFINT");
        $rel_tabid = lmbdb_result($rs1,"VERKNTABID");

        // skip due to delete rule in table settings
        if($typ == 'delete' && !$gtab["recursiv_delete"][$rel_tabid]){
            $skiprelation = 1;
        }
        // skip due to archive rule in table settings
        else if($typ != 'delete' && !$gtab["recursiv_archive"][$rel_tabid]){
            $skiprelation = 1;
        }
        // skip if has no referential integrity
        //if(!$refint){
        //    $skiprelation = 1;
        //}

        if(!$skiprelation) {
            // read all related datasets
            // 1:n direct
            if ($datatype == 25) {
                $sqlquery3 = "SELECT ID FROM " . $gtab['table'][$rel_tabid] . " WHERE $md5tab = $ID";
            // 1:n / n:m
            } else {
                $sqlquery3 = "SELECT VERKN_ID FROM $md5tab WHERE ID = $ID";
            }
            $rs3 = lmbdb_exec($db, $sqlquery3) or errorhandle(lmbdb_errormsg($db), $sqlquery3, $GLOBALS['action'], __FILE__, __LINE__);
            if (!$rs3) {
                return false;
            }

            while (lmbdb_fetch_row($rs3)) {
                # 1:n
                if ($datatype == 27) {
                    $delvrk[] = lmbdb_result($rs3, 'VERKN_ID');
                # 1:n direct
                } elseif ($datatype == 25) {
                    $delvrk[] = lmbdb_result($rs3, 'ID');
                }
            }
        }

        # drop all relations
        if($typ == 'delete'){
            // 1:n / n:m relation
            if($datatype != 25) {
                $sqlquery2 = "DELETE FROM " . $md5tab . " WHERE ID = $ID";
                $rs2 = lmbdb_exec($db, $sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, $GLOBALS['action'], __FILE__, __LINE__);
                if (!$rs2) {return false;}
            // 1:n direct relation
            }elseif($datatype == 25) {
                $sqlquery2 = "UPDATE ".$gtab['table'][$rel_tabid]." SET $md5tab = NULL WHERE $md5tab = $ID";
                $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                if(!$rs2) {return false;}
            }
        }

        # drop related 1:n datasets
        if($delvrk){
            foreach($delvrk as $key => $value){

                // check if dataset has no additional relations
                if(!del_record_refintCheck($rel_tabid,$value)){
                    continue;
                }

                if($typ == 'delete'){
                    if(!del_data($rel_tabid,$value,$typ,$delete_recursive)){return false;}
                }else{
                    if(!hide_data($rel_tabid,$value,$typ)){return false;}
                }
            }
        }
    }

    return true;

}


/**
 * check for refential integrity violation
 *
 * @param number $gtabid
 * @param number $ID
 * @param array $delete_recursive (except this tables)
 * @return bool
 */
function del_record_refintCheck($gtabid,$ID){
    global $db;
    global $gtab;
    global $gfield;
    global $lang;

    #if(!is_numeric($gtabid)){$GLOBALS["commit"] = 1;return false;}

    # all relations to table
    $sqlquery = "SELECT DISTINCT ID,DATA_TYPE,FIELD_ID,TAB_ID,MD5TAB FROM LMB_CONF_FIELDS WHERE VERKNTABID = $gtabid AND VERKNTABLETYPE = 1";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {return false;}
    $commit = 0;
    while(lmbdb_fetch_row($rs)) {
        $vtabid = lmbdb_result($rs, "TAB_ID");
        $fieldid = lmbdb_result($rs,"FIELD_ID");
        $md5tab = lmbdb_result($rs,"MD5TAB");
        $datatype = lmbdb_result($rs,"DATA_TYPE");

        // do not delete if n:m relation definition exists
        if($datatype == 24){
            return false;
        // do not delete if dataset has 1:n relation
        }elseif($datatype == 27){
            # check for related datasets
            $sqlquery2 = "SELECT ID FROM $md5tab WHERE VERKN_ID = $ID";
            $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
            if(!$rs2) {return false;}
            if(lmbdb_result($rs2, 'ID')){
                return false;
            }
        // do not delete if dataset has 1:n direct relation
        }elseif($datatype == 25) {
            $sqlquery2 = "SELECT ID FROM ".$gtab['table'][$gtabid]." WHERE ID = $ID AND $md5tab IS NOT NULL";
            $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
            if(!$rs2) {return false;}
            if(lmbdb_result($rs2, 'ID')){
                return false;
            }
        }

    }

    return true;

}


/**
 * delete dataset
 *
 * @param number $gtabid
 * @param number $ID
 * @param string $typ (delete | hide)
 * @param array $delete_recursive
 * @return boolean
 */
function del_record($gtabid,$ID,$typ,$delete_recursive=null){
    global $db;
    global $umgvar;
    global $gtab;
    global $gfield;
    global $db;

    /* --- check if dataset exists ------*/
    if($gtab['datasync'][$gtabid] == 1) {
        $syncselect = ',LMB_SYNC_ID,LMB_SYNC_SLAVE';
    }
    $sqlquery = "SELECT ID $syncselect FROM ".$gtab["table"][$gtabid]." WHERE ID = $ID";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;return false;}

    // get sync-slave abd sync-id
    $SYNC_ID = 0;
    $SYNC_SLAVE = 0;
    if($gtab['datasync'][$gtabid] == 1) {
        $SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
        $SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
    }

    // check for dataset ID
    if(!lmbdb_result($rs, "ID")){
        lmb_log::error('del_record - dataset does not exist', null, $gtabid, null, $ID);
        return false;
    }

    // delete related datasets recursive
    if(!del_record_recursive($gtabid,$ID,$typ,$delete_recursive)){
        lmb_log::error('del_record - recursive deletion failed', null, $gtabid, null, $ID);
        return false;
    }

    // trigger before delete record
    if($gtab["trigger"][$gtabid]){
        if(execute_trigger("DELETE","BEFORE",$gtabid,0,$gtab["trigger"][$gtabid],$ID) === false){
            lmb_log::error('del_record - delete record fails because of trigger rule', null, $gtabid, null, $ID);
            return false;
        }
    }

    // ----- delet all relations of all tables to this dataset -------------------
    if(!del_record_refint($gtabid,$ID)){
        lmb_log::error('del_record - referential integrity failed', null, $gtabid, null, $ID);
        return false;
    }

    # ---------- Zus√§tze ----------
    # if LDMS_FILES
    if ($gtab["table"][$gtabid] == "LDMS_FILES") {

        # - sync cache entry -
        # --- workaround for ldms_files - sync needs LEVEL ----
        /*
        if($gtab["datasync"][$gtabid]){
            execute_sync($gtabid,0,$ID,$null,$SYNC_ID,$SYNC_SLAVE,1);
        }
        */

        require_once(COREPATH . 'extra/explorer/filestructure.lib');
        if (!del_document($ID)) {
            lmb_log::error('del_record - error on delete document [' . $ID . ']', null, $gtabid, null, $ID);
            return false;
        }
    }

    /* --- Datensatz l√∂schen ------*/
    $sqlquery = "DELETE FROM ".$gtab["table"][$gtabid]." WHERE ID = $ID";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;return false;}
    /* --- ZUSATZ_DATEN l√∂schen ------*/
    $sqlquery = "DELETE FROM LMB_GTAB_GROUPDAT WHERE DAT_ID = $ID AND TAB_ID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    /* --- reminder l√∂schen ------*/
    $sqlquery = "DELETE FROM LMB_REMINDER WHERE DAT_ID = $ID AND TAB_ID = $gtabid";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    /* --- MSELECT-Daten l√∂schen ------*/
    $sqlquery = "DELETE FROM LMB_SELECT_D WHERE DAT_ID = $ID AND TAB_ID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    /* --- ATTRIBUTE-Daten l√∂schen ------*/
    $sqlquery = "DELETE FROM LMB_ATTRIBUTE_D WHERE DAT_ID = $ID AND TAB_ID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    /* --- Indize-Daten l√∂schen ------*/
    $sqlquery = "DELETE FROM LMB_INDIZE_D WHERE REF = $ID AND TABID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $sqlquery = "DELETE FROM LMB_INDIZE_DS WHERE REF = $ID AND TABID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $sqlquery = "DELETE FROM LMB_RULES_DATASET WHERE DATID = $ID AND TABID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $sqlquery = "DELETE FROM LMB_WFL_INST WHERE DAT_ID = $ID AND TAB_ID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    $sqlquery = "DELETE FROM LMB_WFL_HISTORY WHERE DAT_ID = $ID AND TAB_ID = ".$gtabid;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}


    if($commit) {
        lmb_log::error('del_record - SQL error on delete', null, $gtabid, null, $ID);
        return false;
    }

    /* --- History-Eintrag (LMB_HISTORY_ACTION) ---------------------------------------- */
    history_action($gtabid, $ID, 11, 1);

    # trigger after delete record
    if($gtab["trigger"][$gtabid]){
        if(execute_trigger("DELETE","AFTER",$gtabid,0,$gtab["trigger"][$gtabid],$ID) === false){
            lmb_log::error('del_record - error on delete trigger', null, $gtabid, null, $ID);
            return false;
        }
    }

    # --- sync cache entry ----
    if($gtab["datasync"][$gtabid]){
        execute_sync($gtabid,0,$ID,$null,$SYNC_ID,$SYNC_SLAVE,1);
    }

    return true;

}

# --- archive / trash dataset ------
/**
 * @param $gtabid
 * @param $ID
 * @param $typ - archive, trash, restore
 * @return bool|void
 */
function hide_record($gtabid,$ID,$typ){
    global $db;
    global $umgvar;
    global $gtab;
    global $session;
    global $deletecount;
    static $recursive;

    // validate sync parameter
    if($gtab['syncparams'][$gtabid]){
        foreach($gtab['syncparams'][$gtabid] as $key => $params){
            $tres = eval(trim($params).";");
            if($tres === false) {
                return;
            }
        }
    }

    // archive related datasets recursive
    if(!del_record_recursive($gtabid,$ID,$typ)){
        lmb_log::error('archive_record - recursive archive failed', null, $gtabid, null, $ID);
        return false;
    }

    if ($typ == "archive" or $typ == "trash") {

        $status = parse_db_status($typ);

        # ------ Datensatz verstecken ------
        $sqlquery = "UPDATE " . $gtab["table"][$gtabid] . " SET LMB_STATUS = $status, DEL = " . LMB_DBDEF_TRUE . ", EDITUSER = " . $session["user_id"] . ", EDITDATUM = " . LMB_DBDEF_TIMESTAMP . " WHERE ID = $ID";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }

        # --- Indize-Daten l√∂schen ------
        $sqlquery = "DELETE FROM LMB_INDIZE_D WHERE REF = $ID AND TABID = " . $gtabid;
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        $sqlquery = "DELETE FROM LMB_INDIZE_DS WHERE REF = $ID AND TABID = " . $gtabid;
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        $linkid = 164;

    } elseif ($typ == "restore") {
        # ------ Datensatz wiederherstellen ------
        $sqlquery = "UPDATE " . $gtab["table"][$gtabid] . " SET LMB_STATUS = 0, DEL = " . LMB_DBDEF_FALSE . ", EDITUSER = " . $session["user_id"] . ", EDITDATUM = " . LMB_DBDEF_TIMESTAMP . " WHERE ID = $ID";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        $linkid = 166;
    }



    // --- History-Eintrag (LMB_HISTORY_ACTION) ---------------------
    history_action($gtabid, $ID, $linkid, 1);

    # --- sync cache entry - systemfields only----
    #if($gtab["datasync"][$gtabid] AND $umgvar['sync_mode'] == 1){ // todo
    if ($gtab["datasync"][$gtabid]) {
        execute_sync($gtabid, 0, $ID, $null, null, null, 3);
    }


    if($commit){
        return false;
    }else{
        return true;
    }
}



# ------------------ ANLEGEN -----------------------------

# Integrit√§tsverletzung pr√ºfen
function check_refint_add($md5tab,$v_id,$verknpf){
    global $db;
    global $gtab;
    global $lang;

    $sqlquery = "SELECT KEYID FROM $md5tab WHERE VERKN_ID = $v_id";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    if(lmbdb_fetch_row($rs)){
        $commit = 1;
        lmb_log::error('check_refint_add - referential integrity failed ['.$md5tab.']', $lang[1574], $md5tab, null, $v_id);
    }

    if(!$commit){return true;}else{$GLOBALS["commit"] = 1;return false;}
}


# --- Defaultwerte---------------------------------------
function getDefaultValues($gtabid,$ID,&$dflt_v,&$dflt_i){
    global $db;
    global $gtab;
    global $gfield;
    global $session;
    global $umgvar;

    # --- Gruppen Defaultwerte --------------------------------------
    foreach ($gfield[$gtabid]["id"] as $key => $value) {
        $fres = null;
        $def1 = array();
        $def2 = array();
        $default = null;

        if ($gfield[$gtabid]['deflt'][$key]) {
            $default = $gfield[$gtabid]['deflt'][$key];

        }
        // table based default - managed from database
        //elseif ($gfield[$gtabid]['table_deflt'][$key]) {
        //    $default = $gfield[$gtabid]['table_deflt'][$key];
        //}

        # ---- check for eval ----
        if ($default) {
            $def1[0] = $default;

            // eval if starts wit return
            if (lmb_substr($def1[0], 0, 6) == 'return') {
                $def1[0] = eval($def1[0] . ';');
            }

            $def2[0] = null;
        }

        # ---- select or attribute default ----
        if ($gfield[$gtabid]["field_type"][$key] == 4 or $gfield[$gtabid]["field_type"][$key] == 19 and $gfield[$gtabid]["select_pool"][$key]) {

            // multilang
            $sql_s = array();
            $sql_s[] = 'WERT';

            if ($gfield[$gtabid]['multilang'][$key] and $umgvar['multi_language']) {
                foreach ($umgvar['multi_language'] as $lkey => $lval) {
                    $sql_s[] = 'LANG' . $lval . '_WERT';
                }
            }

            if ($gfield[$gtabid]["field_type"][$key] == 19) {
                $tabtyp = "LMB_ATTRIBUTE";
            } else {
                $tabtyp = "LMB_SELECT";
            }
            $sqlquery = "SELECT ID," . implode(',', $sql_s) . " FROM " . $tabtyp . "_W WHERE POOL = " . $gfield[$gtabid]["select_pool"][$key] . " AND DEF = " . LMB_DBDEF_TRUE;
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
            while (lmbdb_fetch_row($rs)) {
                foreach ($sql_s as $lkey => $lval) {
                    $def1[] = lmbdb_result($rs, $lval);
                    $def2[] = lmbdb_result($rs, "ID");
                }
            }

            # ---- simple select ----
            if ($gfield[$gtabid]["data_type"][$key] == 12 or $gfield[$gtabid]["data_type"][$key] == 14) {
                if ($def1[0]) {
                    $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
                    $dflt_v[] = "'" . $def1[0] . "'";  // only use first default value
                }
                # ---- Select multible ----
            } elseif ($gfield[$gtabid]["data_type"][$key] == 19 or $gfield[$gtabid]["data_type"][$key] == 18 or $gfield[$gtabid]["data_type"][$key] == 31 or $gfield[$gtabid]["data_type"][$key] == 46 or $gfield[$gtabid]["data_type"][$key] == 32) {

                $bzm = 0;
                foreach ($def2 as $def_key => $def_val) {
                    $fres[] = array('action'=>'a','wid'=>$def2[$def_key],'id'=>$ID,'value'=>$def1[$def_key]);
                    $bzm++;
                }

                $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
                $dflt_v[] = $bzm;

                if ($fres) {
                    require_once(COREPATH . 'gtab/sql/add_select.dao');
                    pool_select_update($gtabid, $key, $ID, $fres);
                }

            }

        }

        # ---- date default ----
        elseif ($gfield[$gtabid]["field_type"][$key] == 2) {

            if (defined('LMB_DBREDEF_' . strtoupper($default)) && constant('LMB_DBREDEF_' . strtoupper($default)) == 'TIMESTAMP') {
                $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
                $dflt_v[] = convert_date(local_date());
            } elseif (defined('LMB_DBREDEF_' . strtoupper($default)) &&  constant('LMB_DBREDEF_' . strtoupper($default)) == 'DATE') {
                $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
                $dflt_v[] = convert_date(local_date(1));
            } elseif (convert_date($def1[0])) {
                $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
                $dflt_v[] = "'" . convert_date($def1[0]) . "'";
            }


        }

        # ---- field default ----
        elseif ($default) {
            $dflt_i[] = $gfield[$gtabid]["field_name"][$key];
            if ($gfield[$gtabid]["field_type"][$key] == 5 or $gfield[$gtabid]["field_type"][$key] == 14) {
                $dflt_v[] = parse_db_int($def1[0], $gfield[$gtabid]["size"][$key]);
            } elseif ($gfield[$gtabid]["field_type"][$key] == 10) {
                $dflt_v[] = parse_db_bool($def1[0]);
            } else {
                $dflt_v[] = "'" . parse_db_string($def1[0], $gfield[$gtabid]["size"][$key]) . "'";
            }
        }
    }


}

# --- Datensatz anlegen ---------------------------------------
function insert_newdata($gtabid,$ID,$copyid,$version,$insertdata=null){
    global $db;
    global $gtab;
    global $gfield;
    global $session;
    global $umgvar;
    global $lmmultitenants;

    $dflt_i = array();
    $dflt_v = array();

    # --- Gruppen Defaultwerte --------------------------------------
    if ($gfield[$gtabid]["id"] AND !$copyid AND !$version) {
        getDefaultValues($gtabid,$ID,$dflt_v,$dflt_i);
    }

    # Versioning
    if ($gtab["versioning"][$gtabid]) {
        $dflt_i[] = "VPID";
        $dflt_v[] = $ID;
    }

    # multitenant // ignore for Sync
    if ($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid] AND !defined('LMB_SYNC_PROC')) {
        if (!$lmmultitenants['mid'][$session['mid']]) {
            lmb_alert('you can not add data without multitenant ID');
            return false;
        }
        $dflt_i[] = "LMB_MID";
        $dflt_v[] = $lmmultitenants['mid'][$session['mid']];
    }

    // auto set syncslave in m,aster if present
    if ($gtab["datasync"][$gtabid] == 1 AND $umgvar['sync_mode'] != 1 AND $lmmultitenants['syncslave'][$session['mid']] AND !defined('LMB_SYNC_PROC')) {
        $dflt_i[] = "LMB_SYNC_SLAVE";
        $dflt_v[] = parse_db_int($lmmultitenants['syncslave'][$session['mid']]);
    }

    // insert extended data
    if(is_array($insertdata[$gtabid])){
        foreach($insertdata[$gtabid] as $key => $value){
            $dflt_i[] = $key;
            $dflt_v[] = $value;
        }
    }

    if ($dflt_v AND $dflt_i) {
        $dflti = "," . implode(",", $dflt_i);
        $dfltv = "," . implode(",", $dflt_v);
    }


    # trigger before insert record
    if ($gtab["trigger"][$gtabid]) {
        if(execute_trigger("INSERT","BEFORE",$gtabid,null,$gtab["trigger"][$gtabid],$ID) === false){return false;}
    }

    # --- Datensatz hinzuf√ºgen --------------------------------------
    $sqlquery = "INSERT INTO " . $gtab["table"][$gtabid] . " (ID,ERSTUSER,ERSTDATUM,EDITDATUM,INUSE_TIME,LMB_STATUS $dflti) VALUES ($ID," . $session["user_id"] . "," . LMB_DBDEF_TIMESTAMP . "," . LMB_DBDEF_TIMESTAMP . "," . LMB_DBDEF_TIMESTAMP . ", 0 $dfltv)";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
    if (!$rs) {
        lmb_log::error('insert_newdata - SQL error on insert', null, $gtabid, null, $ID);
        $commit = 1;
    } else {
        # --- History-Eintrag (LMB_HISTORY_ACTION) ----------------------------------------
        history_action($gtabid, $ID, 1, 1);
    }

    if($commit){
        return false;
    }else{
        # trigger after insert record
        if($gtab["trigger"][$gtabid] AND $gtabid != $gtab["argresult_id"]["LDMS_FILES"]){
            if(execute_trigger("INSERT","AFTER",$gtabid,null,$gtab["trigger"][$gtabid],$ID) === false){return false;}
        }

        # --- sync cache entry ----
        if($gtab["datasync"][$gtabid]){
            $syncAll = 0;
            if($copyid){$syncAll = 1;}
            execute_sync($gtabid,$syncAll,$ID,$null,null,null,2);
        }

        # set trigger off for comming update
        $GLOBALS["lmb_trigger_off"][$gtabid] = 1;
        return true;
    }
}

# --- create new dataset ---------------------------------------
function create_newdata($gtabid,$verkn,$verknpf,$copyid,$ID,$version=null,$norelation=null,$insertdata=null){
    global $db;
    global $gtab;
    global $gfield;
    global $session;


    // comes from relation copy
    if($verknpf == 2){
        $subrelation = 1;
    }

    # --- Verkn√ºpfung zuweisen / nicht bei Versionierung da schon verkn√ºpft -----------------------------------
    if($verknpf AND $verkn AND !$version){
        # --- 1:n Verkn√ºpfungen auf Integrit√§tsverletzung pr√ºfen ------
        if($verkn["typ"] == 27){$check = check_refint_add($verkn["md5tab"],$ID,$verknpf);}else{$check = 1;}
        if($check){
            # --- Insert Statement ----
            if(insert_newdata($gtabid,$ID,$copyid,$version,$insertdata)){

                // set relation
                $verkn["add_id"] = $ID;
                set_joins($gtabid,$verkn);

                # --- Datensatz kopieren -----
                if($copyid){
                    if(!copy_record($gtabid,$copyid,$ID,$version,$norelation,$verkn,$subrelation)){
                        lmb_log::error('create_newdata - copy data failed', 'copy new dataset failed', $gtabid, null, $ID);
                        $commit = 1;
                    }
                }

            }else{
                lmb_log::error('create_newdata - insert new data failed', 'crate new dataset failed', $gtabid, null, $ID);
                $commit = 1;
            }
        }else{
            lmb_log::error('create_newdata - referential integrity failed', 'crate new dataset failed', $gtabid, null, $ID);
        }
    }else{
        # --- Insert Statement ----
        if(insert_newdata($gtabid,$ID,$copyid,$version,$insertdata)){
            # --- Datensatz kopieren -----
            if($copyid){
                if(copy_record($gtabid,$copyid,$ID,$version,$norelation,$verkn,$subrelation)){
                    # Datensatz Versionieren
                    if($version AND !$commit AND $gtab["versioning"][$gtabid]){

                        // add version to alternative target
                        // todo - adding to GUI
                        if($version > 1) {  // todo - not work with dataset 1
                            $copyid = $version;
                        }
                        if(!version_record($gtabid,$copyid,$ID,1)){$commit = 1;}
                    }
                }else{
                    lmb_log::error('create_newdata - copy data failed', 'copy new dataset failed', $gtabid, null, $ID);
                    $commit = 1;
                }
            }

        }else{
            lmb_log::error('create_newdata - insert new data failed', 'create new dataset failed', $gtabid, null, $ID);
            $commit = 1;
        }
    }

    if(!$commit){return true;}else{$GLOBALS["commit"] = 1;return false;}
}

/**
 * alias to new_record
 *
 * @param int $gtabid
 * @param unknown_type $relation
 * @param unknown_type $copyid
 * @param unknown_type $version
 * @param unknown_type $forceNewID
 * @return int|false
 */
function new_data($gtabid,$relation=null,$copyid=null,$version=null,$forceNewID=null,$norelation=null,$insertdata=null){
    return new_record($gtabid,null,$relation[0],$relation[1],$relation[2],$copyid,$version,$forceNewID,$norelation,$insertdata);
}

/* --- neuer Datensatz 1:1 Verkn√ºpfungs Schleife --------------------------------------- */
/**
 * @param int $gtabid
 * @param array|null $verknpf
 * @param int|null $verkn_fieldid
 * @param int|null $verkn_tabid
 * @param int|null $verkn_ID
 * @param int|null $copyid
 * @param null $version
 * @param null $forceNewID
 * @param null $norelation
 * @return int|false
 */
function new_record($gtabid, $verknpf=null, $verkn_fieldid=null, $verkn_tabid=null, $verkn_ID=null, $copyid=null, $version=null, $forceNewID=null, $norelation=null, $insertdata=null){
    global $db;
    global $gtab;
    global $gfield;
    global $session;

    # --- Grundrechte Pr√ºfen --------------------------------------
    if(!$gtab["add"][$gtabid] OR !$gtabid OR !$GLOBALS["LINK"][1]){
        lmb_log::error('new_record - permission denied for table rule', null, $gtabid, null, $ID);
        return false;
    }

    # --- Verknpf-Zusatz --------------------------------------
    if($verkn_fieldid AND $verkn_tabid AND $verkn_ID){
        $verkn = set_verknpf($verkn_tabid,$verkn_fieldid,$verkn_ID,0,0,0,1);
        if(!$verknpf){$verknpf = 1;}
    }

    lmb_StartTransaction();

    $ID = 0;
    # -------- ID vorgeben --------------
    if(is_numeric($forceNewID) AND $forceNewID > 0){
        $forceNewID = parse_db_int($forceNewID,18);
        $sqlquery = "SELECT ID FROM ".$gtab["table"][$gtabid]." WHERE ID = $forceNewID";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS["action"],__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
        if(!lmbdb_fetch_row($rs)){
            $ID = $forceNewID;
        }else{
            lmb_log::error('new_record - primary Key ID already exists! ['.$forceNewID.']', null, $gtabid, null, $forceNewID);
            lmb_EndTransaction(0);
            return false;
        }
    }else{
        # -------- neue ID --------------
        # --- f√ºr alle 1:1 Verkn√ºpfungen ----
        if($gtab["raverkn"][$gtab["verkn"][$gtabid]]){
            foreach ($gtab["raverkn"][$gtab["verkn"][$gtabid]] as $key => $value){
                if($gtab["add"][$value]){
                    $newid[] = next_db_id($gtab["table"][$value],"ID",1);
                }
            }
            rsort($newid);
            $ID = $newid[0];
        }
    }

    if($ID == $copyid) {
        lmb_EndTransaction(0, $lang[2152] . "\\nID " . $ID_);
        return false;
    }

    # --- Datensatz anlegen -------------
    # --- f√ºr alle 1:1 Verkn√ºpfungen ----
    if($ID && $gtab["raverkn"][$gtab["verkn"][$gtabid]]){
        $raverkn = $gtab["raverkn"][$gtab["verkn"][$gtabid]];
        #krsort($raverkn); # ist richtig .. ansonsten foreign keys neu erstellen lassen
        foreach ($raverkn as $key => $value){
            if($gtabid == $value && $verknpf){$verknpf_ = $verknpf;}else{$verknpf_ = null;}
            if($version AND $gtab["versioning"][$gtabid]){
                // check if dataset is last version
                if(!check_version($copyid,$gtab["table"][$value])){
                    lmb_log::error('new_record - only the latest version can be versioned', null, $gtabid, null, $forceNewID);
                    lmb_EndTransaction(0,"ID ".$ID);
                    return false;
                }
            }
            # create data
            if(create_newdata($value,$verkn,$verknpf_,$copyid,$ID,$version,$norelation,$insertdata)){
                # --- Spezifische Userrechte hinzuf√ºgen --------------------------------------
                if($gtab["has_userrules"][$gtabid]){
                    #$userpara = $session["user_id"]."_u_v__1";
                    $userpara = array($session["user_id"],"u","v",null,1);
                    if(!add_GtabUserRules($value,array($ID),$userpara,1)){
                        lmb_log::error('new_record - unable to add userrules after insert', null, $gtabid, null, $ID);
                        $commit = 1;
                    }
                }
            }else{
                $commit = 1;
            }
        }
    }else{
        $commit = 1;
    }



    if($commit){
        lmb_EndTransaction(0,"ID ".$ID);
        return false;
    }else{
        lmb_EndTransaction(1);
        return $ID;
    }

}

// check if dataset is last version
function check_version($ID,$table){
    global $db;

    $sqlquery = "SELECT ID FROM $table WHERE VPID = (SELECT VPID FROM $table WHERE ID = $ID) AND VID = (SELECT MAX(VID) FROM $table WHERE VPID = (SELECT VPID FROM $table WHERE ID = $ID))";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {$commit = 1;}
    if(lmbdb_result($rs,"ID") != $ID){
        return false;
    }

    return true;
}

// resort VID
function resort_version($gtabid,$vpid){
    global $db;
    global $gtab;

    $sqlquery = "SELECT ID,VID FROM " . $gtab['table'][$gtabid] . " WHERE VPID = $vpid ORDER BY VID";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
    if(!$rs) {return false;}
    while(lmbdb_fetch_row($rs)) {
        $vdata[] = lmbdb_result($rs,'ID');
    }
    $count = lmb_count($vdata);

    $bzm=1;
    foreach($vdata as $key => $id_){
        if($count == $bzm){
            $sqlquery_vact = ", VACT = " . LMB_DBDEF_TRUE;
        }
        $sqlquery = "UPDATE " . $gtab['table'][$gtabid] . " SET VID = $bzm $sqlquery_vact WHERE ID = $id_";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
        if($gtab["datasync"][$gtabid]) {
            execute_sync($gtabid, 0, $id_, $null, null, null, 3);
        }

        $bzm++;
    }

    return true;
}


# -------- Datensatz vererben --------------
function inherit_record($gtabid,$ID,$source_ID){
    global $db;
    global $gtab;
    global $gfield;
    global $session;

    foreach($gfield[$gtabid]["id"] as $key => $value){
        $inherit_tab = $gfield[$gtabid]["inherit_tab"][$key];
        $inherit_field = $gfield[$gtabid]["inherit_field"][$key];

        if($inherit_tab AND $inherit_field){

            # --- Verkn√ºpfung 1:n / n:m ---
            if($gfield[$gtabid]["field_type"][$key] == 11){


                # --- Auswahlfeld mehrfach ---
            }elseif($gfield[$gtabid]["data_type"][$key] == 18 OR $gfield[$gtabid]["data_type"][$key] == 31 OR $gfield[$gtabid]["data_type"][$key] == 32 OR $gfield[$gtabid]["data_type"][$key] == 46){


            }elseif($gfield[$gtabid]["field_type"][$key] != 9 AND $gfield[$gtabid]["field_type"][$key] != 19 AND $gfield[$gtabid]["field_type"][$key] != 6 AND $gfield[$gtabid]["data_type"][$key] != 47){
                $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$key]." = (SELECT ".$gfield[$inherit_tab]["field_name"][$inherit_field]." FROM ".$gtab["table"][$inherit_tab]." WHERE ID = $source_ID) WHERE ID = $ID";
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                if(!$rs) {$commit = 1;}
            }

        }
    }
}

# -------- Datensatz kopieren --------------
function copy_record($gtabid,$copyid,$ID,$version=null,$norelation=null,$verkn=null,$subrelation=null){
    global $db;
    global $gtab;
    global $gfield;
    global $session;
    global $umgvar;
    static $initAction;

    if(!$initAction){
    if($version){
        $initAction = 'versioning';
    }else{
        $initAction = 'copy';
    }}

    if($gfield[$gtabid]["copy"]){

        // filter multitenants
        if($umgvar['multitenant'] AND $gtab["multitenant"][$gtabid] AND !$session["superadmin"]) {
            global $lmmultitenants;
            $mt = 'AND LMB_MID IN (' . implode(',', $lmmultitenants['mid']) . ')';
        }

        $sqlquery = "SELECT * FROM ".$gtab["table"][$gtabid]." WHERE ID = $copyid $mt";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

        if(!$rs OR !lmbdb_fetch_row($rs) OR !lmbdb_result($rs, 'ID')){
            lmb_log::error('copy_record - origin dataset not found or authorised', $lang[1317], $gtabid, null, $copyid);
            return false;
        }

        // get sync-slave abd sync-id
        if ($gfield[$gtabid]["sync"][$fieldid]) {
            $SYNC_ID = lmbdb_result($rs, 'LMB_SYNC_ID');
            $SYNC_SLAVE = lmbdb_result($rs, 'LMB_SYNC_SLAVE');
        }

        if(!is_array($verkn)){
            $verkn = array();
        }

        foreach($gfield[$gtabid]["id"] as $key => $value){
            $val = null;
            $VERKN_ID = null;
            # nur leere Felder √ºberschreiben && Versiondescription nicht kopieren
            if($gfield[$gtabid]["copy"][$key] AND $gfield[$gtabid]["data_type"][$key] != 43 AND $gfield[$gtabid]["data_type"][$key] != 22 AND $gfield[$gtabid]["field_type"][$key] != 14 AND $gfield[$gtabid]["field_type"][$key] != 15){

                # --- Verkn√ºpfung 1:n / n:m ---
                if($gfield[$gtabid]["data_type"][$key] == 24 OR $gfield[$gtabid]["data_type"][$key] == 27) {

                    // version_record handle backward relation
                    if($version AND $gfield[$gtabid]["verkntabletype"][$key] == 2){continue;}


                    # except recursiv relation with field rules
                    if ($verkn['tabid'] == $gfield[$gtabid]["verkntabid"][$key] AND $verkn['fieldid'] == $gfield[$gtabid]["hasrecverkn"][$key]) {
                        continue;
                    }

                    // skip
                    if ($gfield[$gtabid]["verkntabletype"][$key] == 3) {
                        continue;
                    }

                    # backward relation
                    if ($gfield[$gtabid]["verkntabletype"][$key] == 2) {
                        $ID_FIELD = "VERKN_ID";
                        $VKN_FIELD = "ID";
                        $VKN_TABLE = $gfield[$gfield[$gtabid]["verkntabid"][$key]]["md5tab"][$gfield[$gtabid]["hasrecverkn"][$key]];
                        $verkn_gtabid = $gfield[$gfield[$gtabid]["verkntabid"][$key]]["verknparams"][$gfield[$gtabid]["hasrecverkn"][$key]];
                        #$LEFT_TABLEID = $gfield[$gtabid]['verkntabid'][$key];
                        #$LEFT_FIELDID = $gfield[$gtabid]['hasrecverkn'][$key];
                        # default relation
                    } else {
                        $ID_FIELD = "ID";
                        $VKN_FIELD = "VERKN_ID";
                        $VKN_TABLE = $gfield[$gtabid]["md5tab"][$key];
                        $verkn_gtabid = $gfield[$gtabid]["verknparams"][$key];
                        #$LEFT_TABLEID = $gtabid;
                        #$LEFT_FIELDID = $key;
                    }

                    # Parametrisierte Zusatzfelder der md5 verkn-Tabelle
                    $md5tab_fields = null;
                    if ($verkn_gtabid) {
                        foreach ($gfield[$verkn_gtabid]["copy"] as $vpkey => $vpvalue) {
                            $md5tab_fields[] = $gfield[$verkn_gtabid]["field_name"][$vpkey];
                        }
                    }

                    $sqlquery1 = "SELECT * FROM $VKN_TABLE WHERE $ID_FIELD = $copyid ORDER BY KEYID";
                    $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $GLOBALS['action'], __FILE__, __LINE__);
                    if (!$rs1) {$commit = 1;}
                    while (lmbdb_fetch_row($rs1)) {

                        # new dataset
                        $nextid = next_db_id($VKN_TABLE, "KEYID", 1);
                        $VSORT = parse_db_int(lmbdb_result($rs1, "SORT"));
                        $keyid = lmbdb_result($rs1, "KEYID");
                        $VERKN_ID = lmbdb_result($rs1, $VKN_FIELD);

                        # Parametrisierte Zusatzfelder der md5 verkn-Tabelle
                        $sql_i = array();
                        $sql_v = array();
                        if ($md5tab_fields) {
                            foreach ($md5tab_fields as $key1 => $value1) {
                                $sql_i[] = $value1;
                                $sql_v[] = "(SELECT $value1 FROM $VKN_TABLE as A$key1 WHERE KEYID = $keyid)";
                            }
                        }
                        if ($sql_i[0]) {
                            $sql_i = "," . implode(",", $sql_i);
                            $sql_v = "," . implode(",", $sql_v);
                        } else {
                            $sql_i = "";
                            $sql_v = "";
                        }

                        # 1:n
                        if ($gfield[$gtabid]["data_type"][$key] == 27) {
                            # sets versioning typ to "fix"
                            $GLOBALS["ltmp_isRecursivVersion"] = 1;
                            # copy
                            $VERKN_ID = new_record($gfield[$gtabid]["verkntabid"][$key], 2, null, null, null, $VERKN_ID, $version_null, null, $VKN_TABLE); // $version(_null) deprecated
                            # reset versioning typ
                            $GLOBALS["ltmp_isRecursivVersion"] = 0;
                            $sqlquery2 = "INSERT INTO $VKN_TABLE (KEYID,ERSTUSER,ERSTDATUM,$ID_FIELD,$VKN_FIELD,SORT $sql_i) VALUES($nextid," . $session["user_id"] . "," . LMB_DBDEF_TIMESTAMP . ",$ID," . $VERKN_ID . "," . $VSORT . " $sql_v)";
                        # n:m
                        } elseif ($gfield[$gtabid]["data_type"][$key] == 24) {
                            $sqlquery2 = "INSERT INTO $VKN_TABLE (KEYID,ERSTUSER,ERSTDATUM,$ID_FIELD,$VKN_FIELD,SORT $sql_i) VALUES($nextid," . $session["user_id"] . "," . LMB_DBDEF_TIMESTAMP . ",$ID," . $VERKN_ID . "," . $VSORT . " $sql_v)";
                        }

                        // prevent relation endless loop
                        if ($norelation != $VKN_TABLE) {
                            #$verknp = init_relation($LEFT_TABLEID, $LEFT_FIELDID, $ID, $VERKN_ID, 0, 0, 1);
                            #set_relation($verknp);
                            $rs2 = lmbdb_exec($db, $sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, $GLOBALS['action'], __FILE__, __LINE__);
                            if (!$rs2) {
                                $commit = 1;
                            }
                        }
                    }

                    # --- sync cache entry - relations not included in new_data sync
                    if ($VERKN_ID AND $gfield[$gtabid]["sync"][$key]) {
                        $null = null;
                        execute_sync($gtabid, $key, $ID, $null, $SYNC_ID, $SYNC_SLAVE, 3);
                    }

                    # --- Verkn√ºpfung 1:n direct ---
                }elseif($gfield[$gtabid]["data_type"][$key] == 25){

                    # except recursiv relation with field rules
                    if ($verkn['tabid'] == $gfield[$gtabid]["verkntabid"][$key] AND $verkn['fieldid'] == $gfield[$gtabid]["hasrecverkn"][$key]) {
                        continue;
                    }

                    // skip
                    if ($gfield[$gtabid]["verkntabletype"][$key] == 3) {
                        continue;
                    }

                    # backward relation
                    if ($gfield[$gtabid]['verkntabletype'][$key] == 2) {

                        $VKN_FIELD = $gfield[$gfield[$gtabid]["verkntabid"][$key]]["md5tab"][$gfield[$gtabid]["hasrecverkn"][$key]];
                        $VKN_TABLE = $gfield[$gtabid]['verkntabid'][$key];
                        $ID_FIELD = $gfield[$gtabid]['hasrecverkn'][$key];

                        // prevent relation endless loop
                        if($norelation != $VKN_FIELD) {
                            $sqlquery1 = "SELECT $VKN_FIELD FROM " . $gtab['table'][$gtabid] . " WHERE ID = $copyid AND $VKN_FIELD > 0";
                            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $GLOBALS['action'], __FILE__, __LINE__);
                            if (!$rs1) {$commit = 1;}
                            if($VERKN_ID = lmbdb_result($rs1, $VKN_FIELD)) {
                                $verknp = set_verknpf($VKN_TABLE, $ID_FIELD, $VERKN_ID, $ID, 0, 0, 1);
                                set_joins($gtabid, $verknp);
                            }
                        }

                    # default relation
                    } else {
                        $ID_FIELD = "ID";
                        $VKN_FIELD = $gfield[$gtabid]["md5tab"][$key];
                        $VKN_TABLE = $gtab['table'][$gfield[$gtabid]['verkntabid'][$key]];

                        $sqlquery1 = "SELECT $ID_FIELD FROM $VKN_TABLE WHERE $VKN_FIELD = $copyid ORDER BY ID";
                        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $GLOBALS['action'], __FILE__, __LINE__);
                        if (!$rs1) {$commit = 1;}
                        while (lmbdb_fetch_row($rs1)) {
                            $VERKN_ID = lmbdb_result($rs1, $ID_FIELD);
                            # copy relation dataset
                            $VERKN_ID = new_record($gfield[$gtabid]['verkntabid'][$key], 2, $key, $gtabid, $ID, $VERKN_ID, $version_null, null, $VKN_FIELD);  // $version(_null) deprecated
                        }
                    }

                    # --- sync cache entry - relations not included in new_data sync
                    if ($VERKN_ID AND $gfield[$gtabid]["sync"][$key]) {
                        $null = null;
                        execute_sync($gtabid, $key, $ID, $null, $SYNC_ID, $SYNC_SLAVE, 3);
                    }

                    # --- Auswahlfeld mehrfach ---
                }elseif($gfield[$gtabid]["data_type"][$key] == 18 OR $gfield[$gtabid]["data_type"][$key] == 31 OR $gfield[$gtabid]["data_type"][$key] == 32 OR $gfield[$gtabid]["data_type"][$key] == 46){
                    # SELECT / ATTRIBUTE
                    if($gfield[$gtabid]["field_type"][$key] == 19){$tabtyp = "LMB_ATTRIBUTE";}else{$tabtyp = "LMB_SELECT";}
                    $sqlquery1 = "SELECT * FROM ".$tabtyp."_D WHERE TAB_ID = $gtabid AND FIELD_ID = $key AND DAT_ID = $copyid";
                    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs1) {$commit = 1;}
                    $bzm1 = 1;
                    while(lmbdb_fetch_row($rs1)) {
                        $insname = "";
                        $insvalue = "";
                        if($gfield[$gtabid]["field_type"][$key] == 19){
                            $insname = ",VALUE_NUM,VALUE_STRING";
                            $insvalue = ",".parse_db_int(lmbdb_result($rs1, "VALUE_NUM"),16).",'".parse_db_string(lmbdb_result($rs1, "VALUE_STRING"),250)."'";
                        }
                        $nextid = next_db_id("".$tabtyp."_D","ID");
                        $sqlquery2 = "INSERT INTO ".$tabtyp."_D (ID,ERSTUSER,TAB_ID,FIELD_ID,DAT_ID,W_ID".$insname.") VALUES($nextid,".$session["user_id"].",".parse_db_int(lmbdb_result($rs1, "TAB_ID")).",".parse_db_int(lmbdb_result($rs1, "FIELD_ID")).",".parse_db_int($ID).",".parse_db_int(lmbdb_result($rs1, "W_ID")).$insvalue.")";
                        $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                        if(!$rs2) {$commit = 1;}
                        $bzm1++;
                    }

                    if($bzm1 > 1){$cpy[] = $gfield[$gtabid]["field_name"][$key]." = ".parse_db_int(($bzm1-1));}
                    # --- Dateien ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 6){
                    $sqlquery1 = "SELECT ID,LEVEL FROM LDMS_FILES WHERE TABID = $gtabid AND FIELDID = $key AND DATID = $copyid AND TYP = 3";
                    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs1) {$commit = 1;}
                    while(lmbdb_fetch_row($rs1)) {
                        $copy_file = lmbdb_result($rs1, "ID");
                        $level = $gfield[$gtabid]["file_level"][$key];
                        $tabrelation = array("datid" => $ID, "gtabid" => $gtabid, "fieldid" => $key);
                        if($nfid = copy_file(array($copy_file),$level,null,$tabrelation)){
                            $sqlquery2 = "UPDATE LDMS_FILES SET DATID = $ID WHERE ID = $nfid";
                            $rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$GLOBALS['action'],__FILE__,__LINE__);
                            if(!$rs2) {$commit = 1;}
                        }
                    }
                    # --- W√§hrung ---
                }elseif($gfield[$gtabid]["data_type"][$key] == 30){
                    $val = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]);
                    $val2 = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]."_C");
                    if($val){
                        $cpy[] = $gfield[$gtabid]["field_name"][$key]." = ".parse_db_float($val,$gfield[$gtabid]["size"][$key]).",".$gfield[$gtabid]["field_name"][$key]."_C = '".parse_db_string($val2,10)."'";
                    }
                    # --- Long ---
                }elseif($gfield[$gtabid]["data_type"][$key] == 39){
                    $sqlquery0 = "SELECT ".$gfield[$gtabid]["field_name"][$key]." FROM ".$gtab["table"][$gtabid]." WHERE ID = $copyid";
                    $rs0 = lmbdb_exec($db,$sqlquery0) or errorhandle(lmbdb_errormsg($db),$sqlquery0,$GLOBALS['action'],__FILE__,__LINE__);
                    $val = lmbdb_result($rs0, $gfield[$gtabid]["field_name"][$key]);
                    if($val){
                        $prepare_string = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$key]." = ? WHERE ID = $ID";
                        if(!lmb_PrepareSQL($prepare_string,array($val),__FILE__,__LINE__)){$commit = 1;}
                    }
                    # --- Boolean ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 10){
                    $val = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]);
                    $cpy[] = $gfield[$gtabid]["field_name"][$key]." = ".parse_db_bool($val);
                    # --- validity LMB_VALIDFROM ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 24 AND $gfield[$gtabid]["field_name"][$key] == 'LMB_VALIDFROM'){
                    # no validity_versioning and action not version
                    if($initAction == 'copy' OR $gtab['validity'][$gtabid] != 2){
                        $LMB_VALIDFROM = lmbdb_result($rs,'LMB_VALIDFROM');
                        $cpy[] = "LMB_VALIDFROM = ".($LMB_VALIDFROM ? "'$LMB_VALIDFROM'" : "NULL");
                    }
                    # --- validity LMB_VALIDTO ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 24 AND $gfield[$gtabid]["field_name"][$key] == 'LMB_VALIDTO'){
                    # no validity_versioning and action not version
                    if($initAction == 'copy' OR $gtab['validity'][$gtabid] != 2){
                        $LMB_VALIDTO = lmbdb_result($rs,'LMB_VALIDTO');
                        $cpy[] = "LMB_VALIDTO = ".($LMB_VALIDTO ? "'$LMB_VALIDTO'" : "NULL");
                    }
                    # --- Integer ---
                }elseif($gfield[$gtabid]["parse_type"][$key] == 1){
                    $val = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]);
                    if($val OR $val == 0){
                        $cpy[] = $gfield[$gtabid]["field_name"][$key]." = ".parse_db_int($val,$gfield[$gtabid]["size"][$key]);
                    }
                    # --- Float ---
                }elseif($gfield[$gtabid]["parse_type"][$key] == 6){
                    $val = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]);
                    if($val OR $val == 0){
                        $cpy[] = $gfield[$gtabid]["field_name"][$key]." = ".parse_db_float($val,$gfield[$gtabid]["size"][$key]);
                    }
                }else{
                    $val = lmbdb_result($rs, $gfield[$gtabid]["field_name"][$key]);
                    if($val){
                        $cpy[] = $gfield[$gtabid]["field_name"][$key]." = '".parse_db_string($val)."'";
                    }
                }

                // multilang
                if($gfield[$gtabid]['multilang'][$key] AND $umgvar['multi_language']){
                    foreach($umgvar['multi_language'] as $lkey => $lval){
                        $lfieldname = "LANG".$lval."_".$prefix.$gfield[$gtabid]["rawfield_name"][$key];
                        $cpy[] = $lfieldname." = '".parse_db_string(lmbdb_result($rs, $lfieldname))."'";
                    }
                }
            }
        }


        // copy all versioned relations from one dataset and set origin VID and new VPID
        // $subrelation means new_record() from copy_record() (itself)
        if($initAction == 'versioning' AND $gtab['validity'][$gtabid] == 2 AND $subrelation) {

            static $newVPID;
            $VID = lmbdb_result($rs, 'VID');
            $VPID = lmbdb_result($rs, 'VPID');

            // set first ID to new VPID
            if (!$newVPID[$gtabid][$VPID]) {
                $newVPID[$gtabid][$VPID] = $ID;
            }

            $cpy[] = "VID = " . parse_db_int(lmbdb_result($rs, 'VID')) . ", VPID = " . parse_db_int($newVPID[$gtabid][$VPID]) . ", VACT = " . parse_db_bool(lmbdb_result($rs, 'VACT'));

            // copy VALIDITY
            if(lmbdb_result($rs,'LMB_VALIDFROM')){$cpy[] = "LMB_VALIDFROM = '".lmbdb_result($rs,'LMB_VALIDFROM')."'";}
            if(lmbdb_result($rs,'LMB_VALIDTO')){$cpy[] = "LMB_VALIDTO = '".lmbdb_result($rs,'LMB_VALIDTO')."'";}

        }

        # --- Datensatz √§ndern --------------------------------------
        if($cpy){
            $cpy = implode(",",$cpy);
            $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET $cpy WHERE ID = $ID";
            $rs1 = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            if(!$rs1) {$commit = 1;}else{
                /* --- History-Eintrag (LMB_HISTORY_ACTION) ---------------------------------------- */
                history_action($gtabid,$ID,201,1);
                $GLOBALS["ltmp"]["history_action"] = 1;
            }
        }

    }

    $initalaction = null;
    if(!$commit){return true;}else{return false;}
}

# --- check for dublicates -----------------------------------
function lmb_gtabIfIsUnique($gtabid,$result){
    global $db;
    global $gtab;

    if(!$result){return false;}
    $sqlquery = "SELECT ID FROM ".$gtab["table"][$gtabid]." WHERE $result";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS["action"],__FILE__,__LINE__);
    if(lmbdb_result($rs,"ID")){
        return true;
    }
    return false;
}


/**
* routines before update
 *
 * @param $gtabid
 * @param $dataid
 * @param $query_dataid
 * @param $query_result
 * @param $old_gresult
 * @return bool
 */
function update_data_precheck($gtabid,$dataid,&$query_dataid,&$query_result,&$old_gresult,&$triggerResult,$notrigger=false){

    global $gtab;
    global $gfield;
    global $lang;
    global $umgvar;
    global $session;


    // ignore if SYNC Process
    if(defined('LMB_SYNC_PROC')){return true;}

    if($gtab["lockable"][$gtabid] OR $gtab["versioning"][$gtabid]){
        $lck = lock_data_check($gtabid,$dataid,$session['user_id'],$old_gresult[$gtabid]["INUSE_TIME"][0],$old_gresult[$gtabid]["INUSE_USER"][0],$old_gresult[$gtabid]["VACT"][0]);

        # --- check if dataset is locked ----
        if($lck["islocked"]){
            lmb_log::error('update_data - permission denied for locked dataset', $lang[763], $gtabid, null, $dataid);
            return false;
        }

        # --- check if version is locked ----
        #if ($gtab["versioning"][$gtabid] and $old_gresult and !$old_gresult[$gtabid]['VACT'][0]) {
        if ($lck["isversion"] AND !$gtab['editver'][$gtabid]) {
            lmb_log::error('update_data - not allowed to update old version', $lang[2147], $gtabid, null, $dataid);
            return false;
        }
    }

    # --- Edit Permission from Table-Rule ----
    if($gtab["editrule"][$gtabid]){
        if(check_GtabRules($dataid,$gtabid,null,$gtab["editrule"][$gtabid],0,$old_gresult)){
            lmb_log::error('update_data - permission denied for multitenant rule', $lang[1317], $gtabid, null, $dataid);
            return false;
        }
    }

    # ----------- Edit Permission from multitenant -----------
    if($umgvar['multitenant'] AND !check_MultitenantRules($dataid,$gtabid)){
        lmb_log::error('update_data - permission denied for multitenant rule', $lang[1317], $gtabid, null, $dataid);
        return false;
    }

    # --- Edit Permission from Dataset-Rule ----
    if($gtab["has_userrules"][$gtabid] AND !$gtab["edit_userrules"][$gtabid]){
        if(!check_GtabUserRules($gtabid,$dataid,$session["user_id"],"edit")){
            lmb_log::error('update_data - permission denied for dataset rule', $lang[1317], $gtabid, null, $dataid);
            return false;
        }
    }

    # --- Edit Permission from Field-Rule ----
    if($gfield[$gtabid]["editrule"]) {
        foreach ($query_dataid as $fieldid => $value) {
            if ($gfield[$gtabid]["editrule"][$fieldid]) {
                # ----------- Edit Permission from Field-Rule -----------
                if (check_GtabRules($dataid, $gtabid, $fieldid, $gfield[$gtabid]["editrule"][$fieldid], 0, $old_gresult)) {
                    lmb_log::error('update_data - permission denied for field rule', $lang[1317], $gtabid, $fieldid, $dataid);
                    return false;
                }
            }
        }
    }

    # --- check unique fields ----
    if($gfield[$gtabid]["unique"] AND is_array($query_result)){
        foreach($gfield[$gtabid]["unique"] as $fieldid => $value) {
            if ($query_result[$gtabid][$dataid][$fieldid] AND lmb_gtabIfIsUnique($gtabid, $query_result[$gtabid][$dataid][$fieldid])) {
                lmb_log::error('update_data - ' . $gfield[$gtabid]["spelling"][$fieldid] . ' is unique', $gfield[$gtabid]["spelling"][$fieldid] . " " . $lang[2605], $gtabid, $fieldid, $ID);
                return false;
            }
        }
    }

    # --- trigger before update table ----
    if(!$notrigger) {
        if ($gtab["trigger"][$gtabid]) {
            $triggerResult = execute_trigger("UPDATE", "BEFORE", $gtabid, null, $gtab["trigger"][$gtabid], $dataid, $query_dataid, $old_gresult);
            if ($triggerResult === false) {
                return false;
            }
        }

        # --- trigger before update field ----
        if ($gfield[$gtabid]["trigger"]) {
            foreach ($query_dataid as $fieldid => $value) {
                if ($gfield[$gtabid]["trigger"][$fieldid]) {
                    $triggerResult = execute_trigger("UPDATE", "BEFORE", $gtabid, $fieldid, $gfield[$gtabid]["trigger"][$fieldid], $dataid, $value, $old_gresult);
                    if ($triggerResult === false) {
                        return false;
                    }
                }
            }
        }
    }

    return true;

}

/**
 * routines after update
 *
 * @param $gtabid
 * @param $dataid
 * @param $query_dataid
 * @param $old_gresult
 * @param $triggerResult
 */
function update_data_postcheck($gtabid,$dataid,&$query_dataid,&$old_gresult,&$triggerResult,$nometa=null,$notrigger=null){

    global $gtab;
    global $gfield;
    global $lang;
    global $session;
    global $db;
    $logging = 0;

    // ignore if SYNC Process
    if(defined('LMB_SYNC_PROC')){return true;}

    # --- trigger after update table ----
    if ($gtab["trigger"][$gtabid] AND !$notrigger) {
        $triggerResult = execute_trigger("UPDATE", "AFTER", $gtabid, null, $gtab["trigger"][$gtabid], $dataid, $query_dataid, $old_gresult, $triggerResult);
        if($triggerResult === false){
            return false;
        }
    }
    # --- History-Eintrag (history_action) ---------
    if($session["logging"] AND $actionid = history_action($gtabid, $dataid, 3, 1) AND $gtab["logging"][$gtabid]){
        $logging = 1;
    }

    // logging / trigger  / sync hash
    if ($logging OR $gfield[$gtabid]["trigger"] OR $gfield[$gtabid]["sync"]) {

        foreach ($query_dataid as $fieldid => $value) {

            # --- History-Eintrag (history_update) ---------
            if ($logging) {
                if(!history_update($gtabid, $fieldid, $dataid, $actionid, $value, $old_gresult[$gtabid][$fieldid][0])){
                    lmb_log::error('update_data - history update failed', null, $gtabid, $fieldid, $dataid);
                }
            }

            # --- trigger after update field ----
            if ($gfield[$gtabid]["trigger"][$fieldid] AND !$notrigger) {
                $triggerResult = execute_trigger("UPDATE", "AFTER", $gtabid, $fieldid, $gfield[$gtabid]["trigger"][$fieldid], $dataid, $value, $old_gresult, $triggerResult);
                if($triggerResult === false){
                    return false;
                }
            }

            # --- sync after update field ----
            if ($gfield[$gtabid]["sync"][$fieldid]) {
                $SYNC_ID = $old_gresult[$gtabid]['SYNC_ID'][0];
                $SYNC_SLAVE = $old_gresult[$gtabid]['SYNC_SLAVE'][0];

                # --- sync cache entry ----
                if(!execute_sync($gtabid, $fieldid, $dataid, $value, $SYNC_ID, $SYNC_SLAVE, 3)){
                    return false;
                }
            }
        }
    }

    // create data cashe
    if($gtab["checksum"][$gtabid] && $gfield[$gtabid]['checksum']) {
        lmb_calculateChecksum($gtabid, $dataid);
    }


    # ---  LDMS_FILES & LDMS_META Zusatz ---------
    if($gtab["typ"][$gtabid] == 3 AND $gtab["table"][$gtabid] != 'LDMS_FILES' AND !$nometa){
        require_once(COREPATH . 'extra/explorer/metadata.lib');
        refreshmeta_to_db($dataid);
    }

    
    if(intval($gtab['typ'][$gtabid]) === 8) {
        TemplateSelector::resetTemplateCache(intval($gtabid));
    }
    
    return true;

}

/**
 * update data
 *
 * @param array or string $history_fields
 * @param string $typ
 * @param array $verkn
 * @return unknown
 */
function update_data($history_fields,$typ=null,$verkn=null,$nometa=null){
    global $db;
    global $session;
    global $umgvar;
    global $gtab;
    global $gfield;
    global $LINK;
    global $action;
    global $lmcurrency;
    global $lang;
    $newdataid = null;
    $newdata = null;
    $query_result = null;

    if(!$history_fields){return true;}

    require_once(COREPATH . 'gtab/gtab_type_update.lib');

    lmb_StartTransaction();

    # make array if is not
    if(!is_array($history_fields)){
        $history_fields = explode(";",$history_fields);
        if (is_array($history_fields)) {
            $history_fields = array_unique($history_fields);
        }
    }

    $forbidenfields = array('ID','ERSTUSER','EDITUSER','ERSTDATUM','EDITDATUM','DEL','LMB_STATUS');
    $ID = true;
    $bzm=0;

    foreach($history_fields as $key => $value){

        # key is number, value is fieldef, form is value
        if(is_numeric($key)){
            if(!$value){continue;}
            $history = explode(",",$value);
            # key is fieldef, value is value
        }else{
            if(!$key){continue;}
            $history = explode(",",$key);
            $typ = 3;
        }

        $gtab_id = trim($history[0]);
        $gtabid = trim($gtab_id);
        $field_id = trim($history[1]);
        $data_id = trim($history[2]);
        $parentage = trim($history[3]);
        $language = trim($history[4]);
        if($data_id < 0){continue;}

        # create new dataset if ID = 0 / reserve ID
        if($gtab_id AND $field_id AND $data_id == '0' AND $LINK[1] AND $gtab["add"][$gtab_id]){
            if(!$newdataid[$gtab_id]){
                // empty relation fields in forms - if relation field is empty add new empty relation dataset
                if($parentage){
                    $parentage = explode('_',$parentage);
                    if($parentage[0] AND $parentage[1] AND $parentage[2]) {
                        // check if relation is already set in same form use new this data_id
                        // todo - select statement for searching if relation is already set
                        foreach($history_fields as $key_ => $value_) {
                            $history_ = explode(",",$value_);
                            if ($history_[0] == $parentage[0] AND $history_[1] == $parentage[1] AND $history_[2] == $parentage[2]){
                                $data_id = $_REQUEST[$gfield[$parentage[0]]["form_name"][$parentage[1]]];
                                break;
                            }
                        }

                        if(!$data_id) {
                            $data_id = new_record($gtab_id, 1, $parentage[1], $parentage[0], $parentage[2]);
                        }
                    }
                }else{
                    $data_id = new_record($gtab_id,$verkn["verknpf"],$verkn["fieldid"],$verkn["tabid"],$verkn["id"]);
                    $newdata = 1;
                }
                $newdataid[$gtab_id] = $data_id;

                if(!$data_id){
                    lmb_log::error('update_data - create new dataset failed', 'create new dataset failed', $gtab_id);
                    continue;
                }
            }else{
                $data_id = $newdataid[$gtab_id];
            }
        }
        $ID = $data_id;

        // extension
        if($field_id AND !is_numeric($field_id)){
            $query_result[$gtab_id][$data_id][$field_id] = "$field_id = $value";
            $query_value[$gtab_id][$data_id][$field_id] = $value;
            $bzm++;
            continue;
        }

        # check plausibility
        if($data_id < 0 OR !is_numeric($data_id) OR !$data_id OR !is_numeric($field_id) OR !is_numeric($gtab_id)){
            lmb_log::error('update_data - plausibility check failed, no valid ID', 'null', $gtab_id,$field_id,$ID);
            continue;
        }

        # ignore intern fields
        if(in_array($gfield[$gtab_id]["field_name"][$field_id],$forbidenfields)){
            lmb_log::error('update_data - ignore intern fields', 'ignore intern fields', $gtab_id,$field_id,$ID);
            continue;
        }

        # ignore duplicate
        if($query_result[$gtab_id][$data_id][$field_id]){
            lmb_log::error('update_data - ignore duplicate values', null, $gtab_id,$field_id,$ID);
            continue;
        }

        # edit permission from field / table
        if(!$gtab["edit"][$gtab_id] OR !$gfield[$gtab_id]["perm_edit"][$field_id]){
            lmb_log::error('update_data - permission denied for edit field or table', $lang[1317], $gtab_id, $field_id, $ID);
            continue;
        }

        // language
        $formname = $gfield[$gtab_id]["form_name"][$field_id];
        if($language){
            $formname = 'LANG' . $history[4] . '_'.$formname;
        }

        $change_value = null;
        if($typ == 3){
            $change_value = $value;
        }elseif(isset($_REQUEST[$formname])){
            $change_value = $_REQUEST[$formname];
        }elseif(isset($_REQUEST[$formname."_".$history[2]])){
            $change_value = $_REQUEST[$formname."_".$history[2]];
        }

        # check version
        if($gfield[$gtab_id]["ver"][$field_id]){
            $query_ver[$gtab_id][$data_id] = $gfield[$gtab_id]["ver"][$field_id];
        }

        # ---- name of update function -----
        if(function_exists("uftyp_".$gfield[$gtab_id]["funcid"][$field_id])){
            $fname = "uftyp_".$gfield[$gtab_id]["funcid"][$field_id];
        }else{
            $fname = "uftyp_2";
        }
        # ---- name of extended update function -----
        if($gfield[$gtab_id]["ext_type"][$field_id]){
            if(function_exists("lmbu_".$gfield[$gtab_id]["ext_type"][$field_id])){
                $fname = "lmbu_".$gfield[$gtab_id]["ext_type"][$field_id];
            }
        }

        // call update function
        $result = $fname($gtab_id,$field_id,$data_id,$change_value,$language);

        // fill update array
        if($result === true){
            $success = 1;
        }elseif($result){
            $query_result[$gtab_id][$data_id][$field_id] = $result;
            $query_value[$gtab_id][$data_id][$field_id] = $change_value;
        }elseif($result === false){
            $failed[$gtab_id] = $data_id;
            lmb_log::error('update_data - function failed (' .$fname. ', ' . $field_id . ')' , null, $gtab_id, null, $data_id);
        }
        $bzm++;
    }


    // nothing to do
    if(!$bzm){
        lmb_log::error('update_data - nothing todo', null, $gtabid, null, $dataid);
        lmb_EndTransaction(1);
        return true;
    }

    # --- Datensatz Update ----
    if($query_value){

        # Tabellen
        foreach($query_value as $gtabid => $query_gtabid){

            # Datens√§tze
            foreach($query_gtabid as $dataid => $query_dataid){
                $old_gresult = null;

                # --- old value ----
                if($gtab["trigger"][$gtabid] OR $gtab["editrule"][$gtabid] OR $gfield[$gtabid]["editrule"] OR $gfield[$gtabid]["trigger"] OR $gtab["logging"][$gtabid] OR $gtab["versioning"][$gtabid] OR $gtab["lockable"][$gtabid] OR $gfield[$gtabid]["sync"]){
                    $triggerResult = null;
                    $old_gresult = get_gresult($gtabid,1,null,null,null,null,$dataid);
                }

                // precheck routine
                if(!update_data_precheck($gtabid,$dataid,$query_dataid,$query_result,$old_gresult,$triggerResult)){
                    lmb_log::error('update_data - update_data_precheck return false', null, $gtabid, null, $dataid);
                    $failed[$gtabid] = $dataid;
                    continue;
                }

                # autom. Versionierung
                $queryResultId = $dataid;
                if($gtab["ver"][$gtabid] == 2 AND $query_ver[$gtabid][$dataid]){
                    if($newid = new_record($gtabid,null,null,null,null,$dataid,1)){
                        $dataid = $newid;
                        if($action == "gtab_change"){$GLOBALS["ID"] = $dataid;}
                    }
                }

                # ----- Datensatz Update ------
                if($query_result[$gtabid][$queryResultId]) {
                    $sqlquery = implode(",", $query_result[$gtabid][$queryResultId]);
                    if ($sqlquery) {
                        $sqlquery .= ',';
                    }
                    $sqlquery = 'UPDATE ' . $gtab['table'][$gtabid] . ' SET ' . $sqlquery;
                    $sqlquery .= 'EDITDATUM = ' . LMB_DBDEF_TIMESTAMP . ',';
                    $sqlquery .= 'EDITUSER = ' . $session['user_id'];
                    $sqlquery .= ' WHERE ' . $gtab['keyfield'][$gtabid] . ' = ' . $dataid;

                    ########### UPDATE QUERY ##############
                    #error_log($sqlquery);
                    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $GLOBALS['action'], __FILE__, __LINE__);
                    #######################################
                }

                if(!$rs){
                    lmb_log::error('update_data - SQL error on update data', null, $gtabid, null, $dataid);
                    $failed[$gtabid] = $dataid;
                    continue;
                }else{
                    // postcheck routine
                    if(!update_data_postcheck($gtabid,$dataid,$query_dataid,$old_gresult,$triggerResult,$nometa)){
                        lmb_log::error('update_data - update_data_postcheck return false', null, $gtabid, null, $dataid);
                        $failed[$gtabid] = $dataid;
                        continue;
                    }
                }
                $success = 1;
            }
        }
    }

    if(!$success){ lmb_EndTransaction(0);return false;}        # failed complete
    elseif($failed){ lmb_EndTransaction(1);return $failed;}    # success partially
    elseif($newdata){ lmb_EndTransaction(1);return $ID;}     # success with new dataid
    else{ lmb_EndTransaction(1);return true;}                  # success complete
}

# ------- Zellen/Reihen-Farben ------
function gfield_colors($td_color){
    global $db;
    global $gtab;
    global $session;
    global $gfield;

    lmb_StartTransaction();

    $cells = explode(";",$td_color);
    $NEXTID = next_db_id("LMB_GTAB_GROUPDAT");
    $bzm = 0;
    while($cells[$bzm]){
        $cellval = explode("_",$cells[$bzm]);
        if($cellval[0] == 'elrow'){
            if($cellval[3] == 'transparent'){$cellval[3] = '';}
            $gtabid = $cellval[2];
            if($cellval[3]){
                $sqlquery = "SELECT ID FROM LMB_GTAB_GROUPDAT WHERE GROUP_ID = ".$session["group_id"]." AND DAT_ID = ".$cellval[1]." AND TAB_ID = ".$gtabid;
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                if(lmbdb_fetch_row($rs)){
                    $sqlquery = "UPDATE LMB_GTAB_GROUPDAT SET COLOR = '$cellval[3]' WHERE GROUP_ID = ".$session["group_id"]." AND DAT_ID = $cellval[1] AND TAB_ID = ".$gtabid;
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                }else{
                    $sqlquery = "INSERT INTO LMB_GTAB_GROUPDAT (ID,GROUP_ID,TAB_ID,DAT_ID,COLOR) VALUES ($NEXTID,{$session['group_id']},".$gtab['tab_id'][$gtabid].",$cellval[1],'$cellval[3]')";
                    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
                    if(!$rs) {$commit = 1;}
                }
            }else{
                $sqlquery = "DELETE FROM LMB_GTAB_GROUPDAT WHERE GROUP_ID = ".$session["group_id"]." AND DAT_ID = $cellval[1] AND TAB_ID = ".$gtabid;
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            }
        }elseif($cellval[0] == 'td'){
            $gtabid = $cellval[2];
            if($cellval[3] == 'transparent'){$cellval[3] = '';}
            $sqlquery = "UPDATE LMB_RULES_FIELDS SET COLOR = '$cellval[3]' WHERE TAB_ID = ".$gtabid." AND GROUP_ID = ".$session["group_id"]." AND FIELD_ID = $cellval[1] AND EDIT = ".LMB_DBDEF_TRUE;
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            $gfield[$gtabid]['color'][$cellval[1]] = $cellval[3];
        }
        $bzm++;
    }

    lmb_EndTransaction(!$commit);
}

/**
 * sql where generator per field
 *
$gsr[tabid][filedid][count] ...
["txt"] = 1 : %$%
["txt"] = 2 : ==
["txt"] = 3 : $%
["txt"] = 4 : Metaphone
["txt"] = 5 : %$
["txt"] = 7 : #NULL
["txt"] = 8 : #NOTNULL

["num"] = 1 : =
["num"] = 2 : >
["num"] = 3 : <
["num"] = 4 : <=
["num"] = 5 : >=
["num"] = 6 : !=
["num"] = 7 : #NULL
["num"] = 8 : #NOTNULL

["cs"] = 0 : lower()
["cs"] = 1 : ==

[andor] = 1 : and
[andor] = 2 : or
[andor] = 3 : and attribute value
[andor] = 4 : or attribute value
 *
[string] = 1: whole sentance (index serach)

[neg] = 1: negotiation
 *
 * @param int $key field ID
 * @param int $gtabid table ID
 * @param array $gsr filter array
 * @param array $vquery ['child_alias' => string, 'rec_count' => number] used to store alias for tables with same name
 *                      in query, e.g. when table is joined recursively
 * @return array(
 *   'from_' => array(string) table names
 *   'where' => array(string) where conditions
 *   'where_glob' => array(string) global where conditions (e.g. for joining)
 *   'distinct' => bool whether to include 'distinct' in select query
 * )
 */
function get_where($key,$gtabid,&$gsr,$vquery = null){
    global $gtab;
    global $gfield;
    global $umgvar;
    global $session;
    global $case_sens_e;
    global $style_sens_e;
    static $quwac;

    $tab = $gtab['table'][$gtabid];
    $field = $gfield[$gtabid]["field_name"][$key];
    if($vquery['child_alias']){
        $tab = $vquery['child_alias'];
    }
    $query["from_"] = array();
    $bzm2 = 0;

    if(!is_array($gsr[$gtabid][$key])){return $query;}

    // get real key for next key++
    foreach ($gsr[$gtabid][$key] as $key1 => $value1) {
        if(!is_numeric($key1) OR !$gfield[$gtabid]['id'][$key]){
            if(!$gfield[$gtabid]['sort'][$key]) {
                lmb_log::error('get_where - missing gfield description or permission', null, $gtabid, $key, level: E_WARNING);
            }
            continue;
        }
        $gsrnext[] = $key1;
    }

    $bzm = 0;
    foreach ($gsr[$gtabid][$key] as $key1 => $value1) {

        // todo workaround for string keys ('eg txt') - have to change
        if(!is_numeric($key1) OR !$gfield[$gtabid]['id'][$key]){
            if(!$gfield[$gtabid]['sort'][$key]) {
                lmb_log::error('get_where - missing gfield description or permission', null, $gtabid, $key, level: E_WARNING);
            }
            continue;
        }

        # default settings
        $case_sens_b = "%";
        $case_sens_e = "%";
        $style_sens_b = "lower(";
        $style_sens_e = ")";
        $like_sens_b = "=";

        unset($whr);
        $gsrres = $gsr[$gtabid][$key][$key1];				# searchvalue
        $gsstxt = $gsr[$gtabid][$key]["txt"][$key1];		# text sensitive
        $gssnum = $gsr[$gtabid][$key]["num"][$key1];		# numeric
        $gsscs = $gsr[$gtabid][$key]["cs"][$key1];			# case sensitive
        $gsandor = $gsr[$gtabid][$key]["andor"][$key1]; 	# and or
        $gsstring = $gsr[$gtabid][$key]["string"][$key1];	# find all words
        $gsneg = $gsr[$gtabid][$key]["neg"][$key1];			# negation


        // redirect searchvalue to extension function
        if(is_string($gsrres) && substr($gsrres,0,1) == '#'){
            $fnc = 'dfext_'.substr($gsrres,1);
            if(function_exists($fnc)){
                $gsrres = $fnc($gtabid,$gsrres,$gsr);
            }
        }

        if($gsr[$gtabid][$key]["txt"][$key1] == 7){$gsrres = "#NULL#";$gsstxt = 0;}
        elseif($gsr[$gtabid][$key]["txt"][$key1] == 8){$gsrres = "#NOTNULL#";$gsstxt = 0;}
        elseif($gsr[$gtabid][$key]["num"][$key1] == 7){$gsrres = "#NULL#";$gssnum = 0;}
        elseif($gsr[$gtabid][$key]["num"][$key1] == 8){$gsrres = "#NOTNULL#";$gssnum = 0;}

        # recursive search for relations
        if (is_array($gsrres) and $gfield[$gtabid]['field_type'][$key] == 11 /* relation */) {
            $verk_tabid = $gfield[$gtabid]['verkntabid'][$key];

            # check that only entry is correct table id
            if (lmb_count($gsrres) != 1) {
                lmb_log::error("Recursive gsrres has wrong number of entries: Expected only index $verk_tabid", null, $gtabid, $key);
                continue;
            } else if (!array_key_exists($verk_tabid, $gsrres)) {
                $otherTabID = key($gsrres);
                lmb_log::error("Recursive gsrres has wrong tabid: Expected $verk_tabid, got $otherTabID", null, $gtabid, $key);
                continue;
            }

            # self-relation handling
            $LIMBAS_CHILD = $gtab["table"][$verk_tabid]; // name of joined table
            $aliasName = ''; // alias to current table
            if($gtab["sverkn"][$gtabid]){
                $vquery['rec_count']++;
                if ($vquery['rec_count'] > 2) { # maximum amount of recursive calls to get_where
                    lmb_log::error('get_where -  maximum amount of recursive calls', null, $gtabid );
                    continue;
                }

                # new unique alias name
                if ($vquery['child_alias']) {
                    $aliasName = $vquery['child_alias'] . '_REC';
                } else {
                    $aliasName = 'LIMBAS_ALIAS';
                }

                $LIMBAS_CHILD = $aliasName;
                $vquery['child_alias'] = $LIMBAS_CHILD;
            }

            # iterate over every entry in recursive gsr (== fields of linked table)
            $fieldWheres = array();
            foreach ($gsrres[$verk_tabid] as $verk_fieldid => $fieldGsr) {
                # relation params (for old 1:n)
                $verk_tabid_ = $verk_tabid;
                if($gfield[$gtabid]["verknparams"][$key] AND $verk_fieldid > 1000){
                    $verk_tabid_ = $gfield[$gtabid]["verknparams"][$key];
                }

                # check access rights
                if (!$gfield[$verk_tabid_]["sort"][$verk_fieldid]) {
                    lmb_log::error('get_where - missing gfield description or permission', null, $verk_tabid_, $verk_fieldid,level:E_WARNING );
                    continue;
                }

                # get sub-where for field
                $tmpGsr = array();
                $tmpGsr[$verk_tabid_][$verk_fieldid] = &$fieldGsr;
                $fieldWhere = get_where($verk_fieldid, $verk_tabid_, $tmpGsr, $vquery);

                # get where clause for temporary gresult
                if ($fieldWhere['from_']) { # is JOIN
                    # additional where clauses
                    $tmpWhere = '';
                    if ($fieldWhere['where']) {
                        $tmpWhere = '(' . implode(' OR ', $fieldWhere['where']) . ')';
                    }

                    # global where is JOIN condition
                    if ($fieldWhere['where_glob']) {
                        if ($tmpWhere) {
                            $tmpWhere .= ' AND ';
                        }
                        $tmpWhere .= implode(' AND ', $fieldWhere['where_glob']);
                    }

                    # transform JOIN to EXISTS
                    $fieldWheres[] = '
                        EXISTS (
                            SELECT 1
                            FROM ' . implode(',', array_unique($fieldWhere['from_'])) . '
                            WHERE ' . $tmpWhere . '
                        )';
                } else if ($fieldWhere['where']) { # no JOIN, simple condition
                    $fieldWheres = array_merge($fieldWheres, $fieldWhere['where']);
                }
            }

            # merge where conditions of all queried fields
            if($fieldWheres){
                # use global andor for multiple fields
                $op = ' AND ';
                if ($gsrres[$verk_tabid]['andor'] == 2) {
                    $op = ' OR ';
                }

                if ($gfield[$gtabid]['data_type'][$key] == 25) { # new direct 1:n
                    if($gsneg){$like_neg = "NOT";}else{$like_neg = "";}
                    if ($gfield[$gtabid]['verkntabletype'][$key] == 2) {
                        # direct backward relation
                        $forwardRelationFieldid = $gfield[$gtabid]['hasrecverkn'][$key];
                        $relationFieldname = $gfield[$verk_tabid]['md5tab'][$forwardRelationFieldid];
                        $matchingLinkedIDs = "(SELECT {$LIMBAS_CHILD}.{$gtab['keyfield'][$verk_tabid]} FROM {$gtab['table'][$verk_tabid]} {$aliasName} WHERE (" . implode($op, $fieldWheres) . "))";
                        $whr[] = "({$tab}.{$relationFieldname} {$like_neg} IN {$matchingLinkedIDs})";
                    } else {
                        # direct forward relation
                        $verk_fieldname = $gfield[$gtabid]['md5tab'][$key];
                        $matchingLinkedIDs = "(SELECT {$LIMBAS_CHILD}.{$verk_fieldname} FROM {$gtab['table'][$verk_tabid]} {$aliasName} WHERE (" . implode($op, $fieldWheres) . "))";
                        // use $whr for correct handling of $gsr[<tab>][<field>]['andor'][<key1>]
                        $whr[] = "({$tab}.{$gtab['keyfield'][$gtabid]} {$like_neg} IN {$matchingLinkedIDs})";
                    }
                } else { # old relation
                    # relation table and target table
                    $query['from_'][] = $gtab["table"][$verk_tabid] . ' ' . $aliasName;
                    $query['from_'][] = $gfield[$gtabid]["md5tab"][$key];

                    # merge conditions
                    $whr[] = '(' . implode($op, $fieldWheres) . ')'; // use $whr for correct handling of $gsr[<tab>][<field>]['andor'][<key1>]

                    # relation conditions
                    $query["where_glob"][] = "{$tab}.ID = {$gfield[$gtabid]["md5tab"][$key]}.ID";
                    $query["where_glob"][] = "{$gfield[$gtabid]["md5tab"][$key]}.VERKN_ID = {$LIMBAS_CHILD}.ID";

                    # distinct to prevent duplicate datasets caused by join
                    $query["distinct"] = 1;
                }
            }

            # skip other steps (go directly to $whr handling)
            $gsrres = null;
        }

        # Schnellsuche in Zahlen & Datum
        if ($gsrres && !$vquery && (($gfield[$gtabid]["parse_type"][$key] == 1 OR $gfield[$gtabid]["parse_type"][$key] == 4 OR $gfield[$gtabid]["parse_type"][$key] == 5 OR $gfield[$gtabid]["parse_type"][$key] == 6) && ($gfield[$gtabid]["field_type"][$key] != 4 && $gfield[$gtabid]["field_type"][$key] != 19 && $gfield[$gtabid]["field_type"][$key] != 11))) {
            $gsrres = preg_replace("/^>=|^<=|^!=|^>|^<|^=|^!/", "\\0 ", $gsrres); # Leerzeichen hinter Sonderzeichen setzen (f√ºr explode)
            list($op, $searchString) = explode(" ", $gsrres, 2);
            if ($op == "!=" OR $op == "!") {
                $gsneg = 1;
                $gsrres = trim($searchString);
            } elseif ($op == ">" OR $op == "<" OR $op == "<=" OR $op == ">=" OR $op == "=") {
                $like_sens_b = $op;
                $gsrres = trim($searchString);
            }
        } elseif ($gsrres && !$vquery) {
            $gsrres = preg_replace("/^!=/", "\\0 ", $gsrres); # Leerzeichen hinter Sonderzeichen setzen (f√ºr explode)
            list($op, $searchString) = explode(" ", $gsrres, 2);
            if ($op == '!=' OR $op == '!') {
                $gsneg = 1;
                $gsrres = trim($searchString);
            }
        }

        # build search parameter
        if(!$gsandor) {$gsandor = 1;}
        if($gsstxt == 1){$case_sens_b = "%";$case_sens_e = "%";}elseif($gsstxt == 3){$case_sens_b = "";$case_sens_e = "%";}elseif($gsstxt == 2){$case_sens_b = "";$case_sens_e = "";}elseif($gsstxt == 5){$case_sens_b = "%";$case_sens_e = "";}
        if($gssnum == 2){$like_sens_b = ">";}elseif($gssnum == 3){$like_sens_b = "<";}elseif($gssnum == 4){$like_sens_b = "<=";}elseif($gssnum == 5){$like_sens_b = ">=";}elseif($gssnum == 6){$like_sens_b = "!=";}elseif(!$like_sens_b){$like_sens_b = "=";}
        if($gsscs){$style_sens_b = "";$style_sens_e = "";}
        if($gsneg){$like_neg = "NOT";}else{$like_neg = "";}
        if($gsrres === "IS NULL" OR $gsrres === "IS NOT NULL" OR $gsrres === "#NULL#" OR $gsrres === "#NULL#" OR $gsrres === "#NOTNULL#" OR $gsrres === "#NOT#"){
            $like_sens_b = "";$case_sens_b="";$case_sens_e="";$style_sens_b="";$style_sens_e="";$noeregi = 1;
        }
        $gsparams = [];
        $gsparams['gsandor'] = $gsandor;
        $gsparams['gsstxt'] = $gsstxt;
        $gsparams['like_neg'] = $like_neg;
        $gsparams['gssnum'] = $gssnum;
        $gsparams['like_sens_b'] = $like_sens_b;
        $gsparams['case_sens_b'] = $case_sens_b;
        $gsparams['case_sens_e'] = $case_sens_e;
        $gsparams['style_sens_b'] = $style_sens_b;
        $gsparams['style_sens_e'] = $style_sens_e;
        $gsparams['tab'] = $tab;

        // force hole word search if type select & artleiste
        if($gfield[$gtabid]["artleiste"][$key] && $gfield[$gtabid]["field_type"][$key] == 4) {
            $gsparams['case_sens_b'] = '';
            $gsparams['case_sens_e'] = '';
        }

        if($gsrres OR $gsrres == '0') {
            if($noeregi OR preg_match("/".$gfield[$gtabid]["regel"][$key]."/", $gsrres)){

                # --- SQL Argument -----
                if($gfield[$gtabid]["argument_typ"][$key] == 47){
                    $argument = '('.$gfield[$gtabid]["argument"][$key].')';

                    # number int
                    if($gfield[$gtabid]["parse_type"][$key] == 1){
                        $whr[] = gftype_numeric($gtabid,$key,$argument,$gsparams,$gsrres);
                        # number float
                    }elseif($gfield[$gtabid]["parse_type"][$key] == 6){
                        $whr[] = gftype_numeric($gtabid,$key,$argument,$gsparams,$gsrres);
                        # string
                    }elseif($gfield[$gtabid]["parse_type"][$key] == 2){
                        $whr[] = gftype_string($gtabid,$key,$argument,$gsparams,$gsrres);
                        $whr[] = $style_sens_b.$gfield[$gtabid]["argument"][$key].$style_sens_e." $like_neg LIKE $style_sens_b'$case_sens_b".ltrim(parse_db_string($gsrres,250))."$case_sens_e'$style_sens_e ";
                        # date
                    }elseif($gfield[$gtabid]["parse_type"][$key] == 4){
                        $whr[] = gftype_date($gtabid,$key,$argument,$gsparams,$gsrres);
                    }
                    # --- DATUM --
                }elseif($gfield[$gtabid]["parse_type"][$key] == 4){
                    $whr[] = gftype_date($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);

                    # --- Zeit --
                }elseif($gfield[$gtabid]["field_type"][$key] == 7){
                    $whr[] = gftype_time($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);

                    # --- Zahlen --
                }elseif($gfield[$gtabid]["field_type"][$key] == 5 OR $gfield[$gtabid]["field_type"][$key] == 12){
                    $whr[] = gftype_numeric($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);

                    # ------- BOOLEAN -------
                }elseif($gfield[$gtabid]["field_type"][$key] == 10){
                    $whr[] = gftype_boolean($gtabid,$key,$tab.'.'.$field, $gsparams,$gsrres);

                    # --- Mimetype --
                }elseif($gfield[$gtabid]["data_type"][$key] == 45) {
                    $whr[] = $tab . "." . $field . " = LMB_MIMETYPES.ID AND " . $style_sens_b . "LMB_MIMETYPES.MIMETYPE" . $style_sens_e . " LIKE $style_sens_b'$case_sens_b" . ltrim(parse_db_string($gsrres, $gfield[$gtabid]["size"][$key])) . "$case_sens_e'$style_sens_e ";
                    $query["from_"][] = "LMB_MIMETYPES";

                    # --- Select artleiste -----
                #}elseif($gfield[$gtabid]["field_type"][$key] == 4 AND $gfield[$gtabid]["artleiste"][$key]){
                #    $whr[] = gftype_string($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);

                    # --- User/Group List -----
                }elseif($gfield[$gtabid]["field_type"][$key] == 16){
                    $whr = gftype_usergroup($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres,$query);

                    # --- Memo /File Index -----
                }elseif(($gfield[$gtabid]["data_type"][$key] == 39 AND !$gfield[$gtabid]["longhandle"][$key]) OR $gfield[$gtabid]["field_type"][$key] == 6 OR $gfield[$gtabid]["field_type"][$key] == 20){
                    $mresult = gftype_long($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres,$query);
                    $whr[] = $mresult[0];
                    $view_query = $mresult[1];
                    $view_orquery = $mresult[2];
                    $tb = $mresult[3];
                    $df = $mresult[4];
                    $s = $mresult[5];
                    $rf = $mresult[6];
                    $tf = $mresult[7];
                    $tr = $mresult[8];

                    # --- Erst/Edit-User -----
                }elseif($gfield[$gtabid]["field_type"][$key] == 14){
                    $whr = gftype_systemuser($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres,$query);

                    # --- M-Select/Attribute -----
                }elseif($gfield[$gtabid]["data_type"][$key] == 31 OR $gfield[$gtabid]["data_type"][$key] == 32 OR $gfield[$gtabid]["data_type"][$key] == 18 OR $gfield[$gtabid]["data_type"][$key] == 46){
                    $gsparams['key'] = $key1;
                    $gsparams['tablename']  = $tab;
                    $gsparams['andor'] = $gsr[$gtabid][$key]["andor"][$key1];
                    $gsparams['nextandor'] = $gsr[$gtabid][$key]["andor"][$gsrnext[$bzm + 1]];

                    $mresult = gftype_mselect($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);

                    $whr[] = $mresult[0];
                    $whr3 = $mresult[1];
                    $openbracket = $mresult[2];
                    $closebracket = $mresult[3];

                    # --- Sync Slave ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 22) {
                    $fieldName = $gtab["table"][$gtabid].".".$gfield[$gtabid]["field_name"][$key];
                    if($gsrres === "#NULL#"){
                        $whr[] = "$fieldName IS NULL";
                    }elseif($gsrres=="#NOTNULL#"){
                        $whr[] = "$fieldName IS NOT NULL";
                    }else{
                        $query['from_'][] = 'LMB_SYNC_CLIENTS';
                        $whr[] = "(" . $tab.".".$gfield[$gtabid]["field_name"][$key] . " = LMB_SYNC_CLIENTS.ID AND (" . $like_neg." ".$tab.".".$gfield[$gtabid]["field_name"][$key]." $like_sens_b ".parse_db_int($gsrres)." OR " .$style_sens_b."LMB_SYNC_CLIENTS.NAME".$style_sens_e." $like_neg LIKE $style_sens_b'$case_sens_b".ltrim(parse_db_string($gsrres,250))."$case_sens_e'$style_sens_e ))";
                    }
                    # --- multitenant ---
                }elseif($gfield[$gtabid]["field_type"][$key] == 23) {
                    $fieldName = $gtab["table"][$gtabid].".".$gfield[$gtabid]["field_name"][$key];
                    $query['from_'][] = 'LMB_MULTITENANT';
                    $whr[] = "$fieldName = LMB_MULTITENANT.MID";

                    if(is_numeric($gsrres)){
                         $whr[] = "LMB_MULTITENANT.MID = ".parse_db_int($gsrres);
                    }else{
                         $whr[] = $style_sens_b."LMB_MULTITENANT.NAME".$style_sens_e." $like_neg LIKE $style_sens_b'$case_sens_b".ltrim(parse_db_string($gsrres,250))."$case_sens_e'$style_sens_e";
                    }

                # relation 1:n direct
                }elseif($gfield[$gtabid]['data_type'][$key] == 25) {
                    // additional filters are already handled by target table in get_where recursive call
                    if($key1 > 0){break;}

                    if ($gfield[$gtabid]['verknsearch'][$key]) {
                        # target table
                        $verk_tabid = $gfield[$gtabid]['verkntabid'][$key];
                        $verk_fieldname = $gfield[$gtabid]['md5tab'][$key];

                        if ($gsrres === '#NULL#') { # no relation
                            if ($gfield[$gtabid]['verkntabletype'][$key] == 2) {
                                # backward relation
                                $forwardRelationFieldid = $gfield[$gtabid]['hasrecverkn'][$key];
                                $relationFieldname = $gfield[$verk_tabid]['md5tab'][$forwardRelationFieldid];
                                $query['where'][] = "({$tab}.{$relationFieldname} IS NULL)";
                            } else {
                                # forward relation
                                $allLinkedIDs = "(SELECT {$verk_fieldname} FROM {$gtab['table'][$verk_tabid]} WHERE {$verk_fieldname} != 0)";
                                $query['where'][] = "({$tab}.{$gtab['keyfield'][$gtabid]} NOT IN {$allLinkedIDs})";
                            }
                        } elseif ($gsrres == '#NOTNULL#') {
                            if ($gfield[$gtabid]['verkntabletype'][$key] == 2) {
                                # backward relation
                                $forwardRelationFieldid = $gfield[$gtabid]['hasrecverkn'][$key];
                                $relationFieldname = $gfield[$verk_tabid]['md5tab'][$forwardRelationFieldid];
                                $query['where'][] = "({$tab}.{$relationFieldname} IS NOT NULL)";
                            } else {
                                # forward relation
                                $allLinkedIDs = "(SELECT {$verk_fieldname} FROM {$gtab['table'][$verk_tabid]} WHERE {$verk_fieldname} != 0)";
                                $query['where'][] = "({$tab}.{$gtab['keyfield'][$gtabid]} IN {$allLinkedIDs})";
                            }
                        } else {
                            $LIMBAS_CHILD = $gtab["table"][$verk_tabid]; // name of joined table
                            $aliasName = ''; // alias to current table

                            # self-relation handling
                            if($gtab["sverkn"][$gtabid]){
                                $vquery['rec_count']++;
                                if ($vquery['rec_count'] > 2) { # maximum amount of recursive calls to get_where
                                    lmb_log::error('get_where -  maximum amount of recursive calls', null, $gtabid );
                                    continue;
                                }

                                # new unique alias name
                                if ($vquery['child_alias']) {
                                    $aliasName = $vquery['child_alias'] . '_REC';
                                } else {
                                    $aliasName = 'LIMBAS_ALIAS';
                                }

                                $LIMBAS_CHILD = $aliasName;
                                $vquery['child_alias'] = $LIMBAS_CHILD;
                            }

                            # for every field that should be searched in the relation
                            $fieldWheres = array();
                            foreach ($gfield[$gtabid]['verknsearch'][$key] as $verk_fieldid){
                                # (relation params not supported for direct 1:n relation)

                                # check access rights
                                if (!$gfield[$verk_tabid]['sort'][$verk_fieldid]){
                                    lmb_log::error('get_where - missing gfield description or permission', null, $verk_tabid, $verk_fieldid,level:E_WARNING);
                                    continue;
                                }

                                # get sub-where for field
                                $tmpGsr = array();
                                $tmpGsr[$verk_tabid][0] = $gsr[$gtabid][0]; // full text search
                                $tmpGsr[$verk_tabid][$verk_fieldid] = $gsr[$gtabid][$key];
                                $tmpGsr[$verk_tabid][$verk_fieldid]["neg"] = null;
                                $fieldWhere = get_where($verk_fieldid, $verk_tabid, $tmpGsr, $vquery);

                                # get where clause for temporary gresult
                                if ($fieldWhere['from_']) { # is JOIN
                                    # additional where clauses
                                    $tmpWhere = '';
                                    if ($fieldWhere['where']) {
                                        $tmpWhere = '(' . implode(' OR ', $fieldWhere['where']) . ')';
                                    }

                                    # global where is JOIN condition
                                    if ($fieldWhere['where_glob']) {
                                        if ($tmpWhere) {
                                            $tmpWhere .= ' AND ';
                                        }
                                        $tmpWhere .= implode(' AND ', $fieldWhere['where_glob']);
                                    }

                                    # transform JOIN to EXISTS
                                    $fieldWheres[] = '
                                    EXISTS (
                                        SELECT 1
                                        FROM ' . implode(',', array_unique($fieldWhere['from_'])) . '
                                        WHERE ' . $tmpWhere . '
                                    )';
                                } else if ($fieldWhere['where']) { # no JOIN, simple condition
                                    $fieldWheres = array_merge($fieldWheres, $fieldWhere['where']);
                                }
                            }

                            if ($fieldWheres){
                                if ($gfield[$gtabid]['verkntabletype'][$key] == 2) {
                                    # backward relation
                                    $forwardRelationFieldid = $gfield[$gtabid]['hasrecverkn'][$key];
                                    $relationFieldname = $gfield[$verk_tabid]['md5tab'][$forwardRelationFieldid];
                                    $matchingLinkedIDs = "(SELECT {$LIMBAS_CHILD}.{$gtab['keyfield'][$gtabid]} FROM {$gtab['table'][$verk_tabid]} {$aliasName} WHERE (" . implode(' OR ', $fieldWheres) . "))";
                                    $query['where'][] = "({$tab}.{$relationFieldname} {$like_neg} IN {$matchingLinkedIDs})";
                                } else {
                                    # forward relation
                                    $matchingLinkedIDs = "(SELECT {$LIMBAS_CHILD}.{$verk_fieldname} FROM {$gtab['table'][$verk_tabid]} {$aliasName} WHERE (" . implode(' OR ', $fieldWheres) . "))";
                                    $query['where'][] = "({$tab}.{$gtab['keyfield'][$gtabid]} {$like_neg} IN {$matchingLinkedIDs})";
                                }
                            }
                        }
                    }

                # --- Verkn√ºpfung --
                }elseif($gfield[$gtabid]["field_type"][$key] == 11){
                    // additional filters are already handled by target table in get_where recursive call
                    if($key1 > 0){break;}

                    unset($vwhr);
                    # --- falls zu durchsuchende Verkn√ºpfungsfelder -----
                    if($gfield[$gtabid]["verknsearch"][$key]){

                        $verk_tabid = $gfield[$gtabid]["verkntabid"][$key];

                        if ($gsrres === '#NULL#') { # no relation
                            $query['where'][] = "(".$tab.".{$gtab['keyfield'][$gtabid]} NOT IN (SELECT ID FROM ".$gfield[$gtabid]["md5tab"][$key]."))";
                        } elseif ($gsrres == '#NOTNULL#') { # has any relation
                            $query['where'][] = "(".$tab.".{$gtab['keyfield'][$gtabid]} IN (SELECT ID FROM ".$gfield[$gtabid]["md5tab"][$key]."))";
                        } else {
                            $LIMBAS_CHILD = $gtab["table"][$verk_tabid]; // name of joined table
                            $aliasName = ''; // alias to current table

                            # self-relation handling
                            if($gtab["sverkn"][$gtabid]){
                                $vquery['rec_count']++;
                                if ($vquery['rec_count'] > 2) { # maximum amount of recursive calls to get_where
                                    lmb_log::error('get_where -  maximum amount of recursive calls', null, $gtabid );
                                    continue;
                                }

                                # new unique alias name
                                if ($vquery['child_alias']) {
                                    $aliasName = $vquery['child_alias'] . '_REC';
                                } else {
                                    $aliasName = 'LIMBAS_ALIAS';
                                }

                                $LIMBAS_CHILD = $aliasName;
                                $vquery['child_alias'] = $LIMBAS_CHILD;
                            }

                            # for every field that should be searched in the relation
                            $fieldWheres = array();
                            foreach($gfield[$gtabid]["verknsearch"][$key] as $_key => $verk_fieldid){

                                ######### relation params ###########
                                $verk_tabid_ = $verk_tabid;
                                if($gfield[$gtabid]["verknparams"][$key] AND $verk_fieldid > 1000){
                                    $verk_tabid_ = $gfield[$gtabid]["verknparams"][$key];
                                }
                                ######### /relation params ###########

                                # check access rights
                                if(!$gfield[$verk_tabid_]["sort"][$verk_fieldid]){
                                    lmb_log::error('get_where - missing gfield description or permission', null, $verk_tabid_, $verk_fieldid,level:E_WARNING );
                                    continue;
                                }

                                # get sub-where for field
                                $tmpGsr = array();
                                $tmpGsr[$verk_tabid_][0] = $gsr[$gtabid][0]; // full text search
                                $tmpGsr[$verk_tabid_][$verk_fieldid] = $gsr[$gtabid][$key];
                                $tmpGsr[$verk_tabid_][$verk_fieldid]["neg"] = null;
                                $fieldWhere = get_where($verk_fieldid, $verk_tabid_, $tmpGsr, $vquery);

                                # get where clause for temporary gresult
                                if ($fieldWhere['from_']) { # is JOIN
                                    # additional where clauses
                                    $tmpWhere = '';
                                    if ($fieldWhere['where']) {
                                        $tmpWhere = '(' . implode(' OR ', $fieldWhere['where']) . ')';
                                    }

                                    # global where is JOIN condition
                                    if ($fieldWhere['where_glob']) {
                                        if ($tmpWhere) {
                                            $tmpWhere .= ' AND ';
                                        }
                                        $tmpWhere .= implode(' AND ', $fieldWhere['where_glob']);
                                    }

                                    # transform JOIN to EXISTS
                                    $fieldWheres[] = '
                                        EXISTS (
                                            SELECT 1
                                            FROM ' . implode(',', array_unique($fieldWhere['from_'])) . '
                                            WHERE ' . $tmpWhere . '
                                        )';
                                } else if ($fieldWhere['where']) { # no JOIN, simple condition
                                    $fieldWheres = array_merge($fieldWheres, $fieldWhere['where']);
                                }
                            }

                            if($fieldWheres){
                                # relation table and target table
                                $query['from_'][] = $gtab["table"][$verk_tabid] . ' ' . $aliasName;
                                $query['from_'][] = $gfield[$gtabid]["md5tab"][$key];

                                # merge conditions
                                $query['where'][] = '(' . implode(' OR ', $fieldWheres) . ')';

                                # relation conditions
                                $query["where_glob"][] = "{$tab}.ID = {$gfield[$gtabid]["md5tab"][$key]}.ID";
                                $query["where_glob"][] = "{$gfield[$gtabid]["md5tab"][$key]}.VERKN_ID = {$LIMBAS_CHILD}.ID";

                                # distinct to prevent duplicate datasets caused by join
                                $query["distinct"] = 1;
                            }
                        }
                    }
                    # --- Default --
                }else{
                    $whr[] = gftype_string($gtabid,$key,$tab.'.'.$field,$gsparams,$gsrres);
                }
                $bzm2++;
            }else{
                $whr[] = "1 = 2";
            }
        }

        // for $key1 == 0: $whr will be filled -> $whr2 is set initially
        // for $key1  > 0: $whr2 is set and will be concatenated with $whr using and/or
        if($whr){

            // open bracket
            if($openbracket) {
                $openbracket = null;
                $bracketcounter++;
                $bracket = ' ( ';
            }

            $whr = array_unique($whr);
            if($whr2 AND ($gsandor == 1 OR $gsandor == 3)){
                if(lmb_count($whr) > 1){
                    $whr2 .= " AND $bracket (".implode(" AND ",$whr).")";
                }else{
                    $whr2 .= " AND $bracket ".$whr[0];
                }
            }elseif($whr2 AND ($gsandor == 2 OR $gsandor == 4)){
                if(lmb_count($whr) > 1){
                    $whr2 .= " OR $bracket (".implode(" AND ",$whr).")";
                }else{
                    $whr2 .= " OR $bracket ".$whr[0];
                }
            }else{
                if(lmb_count($whr) > 1){
                    $whr2 .= $bracket."(".implode(" AND ",$whr).")";
                }else{
                    $whr2 .= $bracket.$whr[0];
                }
            }

        }

        // close bracket or close bracket in last element
        if(($closebracket AND $bracketcounter) OR (!$gsr[$gtabid][$key][$gsrnext[$bzm + 1]] AND $bracketcounter)) {
            $closebracket = null;
            $bracketcounter--;
            $whr2 .= ' ) ';
        }

        $bracket = null;
        $bzm++;

    }

    # --- M-Select/Attribute -----
    if($gfield[$gtabid]["data_type"][$key] == 31 OR $gfield[$gtabid]["data_type"][$key] == 32 OR $gfield[$gtabid]["data_type"][$key] == 18 OR $gfield[$gtabid]["data_type"][$key] == 46){

        // recursive
        if($GLOBALS['gselectpool'][$mselecttype]['recursivemode'][$gfield[$gtabid]["select_pool"][$key]]) {
            gftype_mselect_merge_recursive($gtabid, $key, $tab, $whr2, $whr3, $query);
        // default
        }else{
            gftype_mselect_merge($gtabid, $key, $tab, $whr2, $whr3, $query);
        }

    }

    # ---  Memo /File Index -----
    else if(($view_query OR $view_orquery) AND (($gfield[$gtabid]["data_type"][$key] == 39 AND !$gfield[$gtabid]["longhandle"][$key]) OR $gfield[$gtabid]["field_type"][$key] == 6 OR $gfield[$gtabid]["field_type"][$key] == 20)){

        # ODER Abfrage
        if($view_orquery){
            $view_query[] = "SELECT DISTINCT LMB_INDIZE_$df$s.$rf AS LMB_INDIZE_REF_".$gfield[$gtabid]["form_name"][$key]." FROM LMB_INDIZE_$df$s ,(SELECT ID AS LMB_INDIZE_ID_".$gfield[$gtabid]["form_name"][$key]."  FROM LMB_INDIZE_W WHERE ".implode(" OR ",$view_orquery).") AS QUWB".($quwbc++)." WHERE LMB_INDIZE_ID_".$gfield[$gtabid]["form_name"][$key]."  = LMB_INDIZE_$df$s.WID $tf";
        }
        if($view_query){
            $query["from_"][] = "((".implode(") INTERSECT (",$view_query).")) AS QUWA".($quwac++);
            $query["where"][] = "(".$tb.".ID = LMB_INDIZE_REF_".$gfield[$gtabid]["form_name"][$key].$tr.")";
        }

    }elseif($whr2){
        $query["where"][] = "(".$whr2.")";
    }

    return $query;
}

# ------------ Gruppenfilter/Rechte------------
function get_queryrules($gtabid){
    global $gfield;
    global $gtab;
    global $session;

    $query["from"] = array();
    $query["where"] = array();
    $where1 = array();
    $where2 = array();
    $where3 = array();

    # ------------ list of active filters ------------
    foreach($gfield[$gtabid]["filter"] as $fieldid => $val){
        if($gfield[$gtabid]["data_type"][$fieldid] == 18 OR $gfield[$gtabid]["data_type"][$fieldid] == 31){$query["distinct"] = 1;}

        $where1 = array();
        foreach ($gfield[$gtabid]["filter"][$fieldid] as $fkey => $fval){
            # filter rule
            if($gfield[$gtabid]["filtertyp"][$fieldid][$fkey] == 1){
                $gsr[$gtabid][$fieldid] = unserialize($fval);
                $qu = get_where($fieldid,$gtabid,$gsr);
                if($qu['where_glob']){$query["where"] = array_merge($query["where"],$qu['where_glob']);}
                $query["from"] = array_merge($qu["from_"],$query["from"]);
                $where1[] = implode(" AND ",$qu["where"]);
                # manual filter
            }elseif($gfield[$gtabid]["filtertyp"][$fieldid][$fkey] == 2){
                # function based extension (return MyExt_)
                if(lmb_substr($fval,0,6) == 'return'){
                    $qu = eval($fval);
                    $where1 = $qu['where'];
                    if($qu['from']){$query['from'] = array_merge($query['from'],$qu['from']);}
                    # fieldbased extension (mytable.name = 'name')
                }else{
                    eval("\$filter_2 = \"".$fval."\";");
                    $query["from"][] = $gtab["table"][$gtabid];
                    $where1[] = $filter_2;
                }
            }
        }

        if(lmb_count($where1) > 1){
            $where2[0] = "(".implode(") OR (",$where1).")";
            $distinct = "DISTINCT";
        }elseif(lmb_count($where1) == 1){
            $where2[0] = $where1[0];
        }

        $where3 = array_merge($where3,$where2);


    }
    # --- Gruppenfilter --------
    if(lmb_count($where3) > 1){
        $query["where"][] = "(".implode(" AND ",$where3).")";
    }elseif($where3){
        $query["where"][] = "(".$where3[0].")";
    }

    return $query;
}


/**
 * validity query
 *
 * @param $validity
 * @param $gtabid
 * @return string
 */
function get_validity($gtabid,$validity,&$where){
    global $gtab;

    // all valid to future
    if($validity == 'allfrom'){
        $validity = stampToDate(local_stamp(),1);
        $allto = 'OR '.$gtab['table'][$gtabid] . '.LMB_VALIDTO > '.LMB_DBDEF_TIMESTAMP.' OR '.$gtab['table'][$gtabid].'.LMB_VALIDTO IS NULL';
    // all valid from past
    }elseif($validity == 'allto'){
        $validity = stampToDate(local_stamp(),1);
        $allto = 'OR '.$gtab['table'][$gtabid] . '.LMB_VALIDFROM < '.LMB_DBDEF_TIMESTAMP.' OR '.$gtab['table'][$gtabid].'.LMB_VALIDFROM IS NULL';
    // all active / last version
    }elseif($validity == 'allactive' AND $gtab['versioning'][$gtabid]){
        $where[] = $gtab['table'][$gtabid] . 'VACT = '.LMB_DBDEF_TRUE;
    }elseif(!$validity){
        $validity = stampToDate(local_stamp(),1);
    }

    if($validity AND $validity = convert_date($validity)  ) {
        $where[] = '((\'' . $validity . '\' BETWEEN ' . $gtab['table'][$gtabid] . '.LMB_VALIDFROM AND ' . $gtab['table'][$gtabid] . '.LMB_VALIDTO)
        OR (' . $gtab['table'][$gtabid] . '.LMB_VALIDFROM IS NULL AND ' . $gtab['table'][$gtabid] . '.LMB_VALIDTO IS NULL)
        OR (' . $gtab['table'][$gtabid] . '.LMB_VALIDFROM IS NULL AND ' . $gtab['table'][$gtabid] . '.LMB_VALIDTO >= \'' . $validity . '\')
        OR (' . $gtab['table'][$gtabid] . '.LMB_VALIDTO IS NULL AND ' . $gtab['table'][$gtabid] . '.LMB_VALIDFROM <= \'' . $validity . '\') '.$allto.' )';
    }
}




/**
 * create sqlquery
 *
 * @param int $gtabid
 * @param int $utyp
 * @param array $filter
 * @param array $gsr
 * @param array $verkn
 * @param array $onlyfield	array[gtabid][array[filedid]]
 * @param int|null $single returns only the dataset with this id
 * @param array $extension
 * @return array
 */
function get_sqlquery($gtabid,$utyp,$filter,$gsr,$verkn,$onlyfield=null,$single=null,$extension=null){

    unset($orderque);
    unset($where_over);

    global $gtab;
    global $gfield;
    global $session;
    global $umgvar;
    global $db;
    global $action;
    global $gform;
    global $LINK;


    # extension for relations // deprecated
    /*
    if($verkn["relext"] AND !$verkn["showonly"]){
        if($a = eval($verkn["relext"])){return $a;}
        $extselect = $select;
        $extfrom = $from;
        $extwhere = $where;
        $extojoin = $join;
        $extorder = $order;
    }
    */

    # extension for snapshot
    if($filter["extension"][$gtabid]){
        $extension = $filter["extension"][$gtabid];
    }

    // global filter
    if($gtab['globalfilter'][$gtabid]){
        foreach($gtab['globalfilter'][$gtabid] as $gfkey => $gffunc) {
            if (function_exists($gffunc)) {
                $gffunc($gtabid, $extension);
            }
        }
    }

    $query["where"] = array();
    $query["from"] = array();
    $query["select"] = array();
    $query["from_"] = array();
    $select = array();
    $from = array();
    $where = array();
    $tablist = array();
    $ojoin = array();
    if(!$gsr){$gsr = array();}

    # full text search
    if ($gsr[$gtabid] and is_array($gsr[$gtabid])) {
        $search_text = $gsr[$gtabid][0][0];

        if ($search_text) {
            # set global 'or'
            $gsr[$gtabid]['andor'] = 2;

            # set distinct
            $distinct = "DISTINCT";

            # holds all wheres, will be joined by ORs
            $fieldWheres = array();

            $andor = 2;
            if(substr($search_text,0,1) == '"'){
                $andor = 1;
                $search_text = str_replace('"','',$search_text);
            }

            # for every field of the table
            foreach ($gfield[$gtabid]['fullsearch'] as $fieldId => $someKey) {
                # ignore full text search entry
                if ($fieldId == 0) { continue; }

                # add search text to temporary gsr
                $tmpGsr = array();

                $search_text_ = explode(' ',$search_text);
                foreach($search_text_ as $txtk => $txtv){
                    $tmpGsr[$gtabid][0][$txtk] = $txtv;
                    $tmpGsr[$gtabid][$fieldId][$txtk] = $txtv;
                    $tmpGsr[$gtabid][$fieldId]['txt'][$txtk] = 1; // contains
                    $tmpGsr[$gtabid][$fieldId]['andor'][$txtk] = $andor; // or
                }

                # get where clause for temporary gsr
                $fieldWhere = get_where($fieldId, $gtabid, $tmpGsr);

                if ($fieldWhere['from_']) { # is JOIN
                    # global where is JOIN condition
                    $tmpGlobalWhere = "";
                    if ($fieldWhere['where_glob']) {
                        $tmpGlobalWhere = ' AND ' . implode(' AND ', $fieldWhere['where_glob']);
                    }

                    # transform JOIN to EXISTS
                    $fieldWheres[] = '
                		EXISTS (
                			SELECT 1
                			FROM ' . implode(',', array_unique($fieldWhere['from_'])) . '
                			WHERE (' . implode(' OR ', $fieldWhere['where']) . ')
                			' . $tmpGlobalWhere . '
                		)
                	';
                } else if ($fieldWhere['where']) { # no JOIN, simple condition
                    $fieldWheres = array_merge($fieldWheres, $fieldWhere['where']);
                }
            }
            if ($fieldWheres) {
                $where[] = '(' . implode(' OR ', $fieldWheres) . ')';
            }
        }
    }

    # Tabellenliste bei 1:1 Verkn√ºpfung auch ohne Rechte
    if($gtab["raverkn"][$gtab["verkn"][$gtabid]]){
        foreach($gtab["raverkn"][$gtab["verkn"][$gtabid]] as $key => $ragtabid){
            $tablist[] = $ragtabid;
        }
    }

    # Feldliste f√ºr definierte Felder
    if($onlyfield){
        if(is_array($onlyfield)){
            foreach($onlyfield as $fgtabid => $fieldarray){
                if(is_array($fieldarray)){
                    foreach($fieldarray as $key => $fieldid){

                        // permission
                        if(!$gfield[$fgtabid]["id"][$fieldid]){
                            if($fieldid < 1000) {
                                lmb_log::error('get_where - missing gfield description or permission', null, $fgtabid, $fieldid,level:E_WARNING);
                            }
                            continue;
                        }
                        // only 1:1 relation | 1:x relation not supported here | 1:x only for reports | simulate 1:1 for relationparams
                        if($fgtabid != $gtabid AND $gtab["verkn"][$fgtabid] != $gtab["verkn"][$gtabid] AND !$verkn['verknparams'] AND !$filter['report'][$gtabid]){continue;}
                        // no systemfields
                        if($gfield[$fgtabid]['field_type'][$fieldid] == 14 AND $gfield[$fgtabid]['field_type'][$fieldid] != 15 AND $gfield[$fgtabid]['field_type'][$fieldid] != 100){continue;}
                        // no LONG without support - do not use long fiels in some databases with "distinct" / use allways for reports
                        if($gfield[$fgtabid]["data_type"][$fieldid] == 39 AND !$gfield[$fgtabid]["longhandle"][$fieldid] AND !$filter['report'][$fgtabid]){continue;}

                        // SQL Argument
                        if($gfield[$fgtabid]["argument_typ"][$fieldid] == 47 AND !$gfield[$fgtabid]["argument_edit"][$fieldid]){
                            $select[] = $gfield[$fgtabid]["select"][$fieldid];
                            #if(!$gfield[$fgtabid]["argument"][$fieldid]){$arg = "''";}else{$arg = $gfield[$fgtabid]["argument"][$fieldid];}
                            #$select[] = $arg." AS ".$gfield[$fgtabid]["form_name"][$fieldid];
                        // backward 1:n direct
                        }elseif($gfield[$fgtabid]['data_type'][$fieldid] == 25 AND $gfield[$fgtabid]['verkntabletype'][$fieldid] == 2){
                            $select[] = $gfield[$fgtabid]["select"][$fieldid];
                            #$select[] = $gtab["table"][$fgtabid].".".$gfield[$gfield[$fgtabid]['verkntabid'][$fieldid]]['md5tab'][$gfield[$fgtabid]['hasrecverkn'][$fieldid]]." AS ".$gfield[$fgtabid]["form_name"][$fieldid];
                        # Zusatz W√§hrung
                        }elseif($gfield[$fgtabid]["data_type"][$fieldid] == 30){
                            $select[] = $gfield[$fgtabid]["select"][$fieldid];
                            #$select[] = $gtab["table"][$fgtabid].".".$gfield[$fgtabid]["field_name"][$fieldid]."_C AS ".$gfield[$fgtabid]["form_name"][$fieldid]."_C";
                        // default
                        }else {
                            $select[] = $gtab["table"][$fgtabid] . "." . $gfield[$fgtabid]["field_name"][$fieldid] . " AS " . $gfield[$fgtabid]["form_name"][$fieldid];
                        }
                        $query["from_"][] = $gtab["table"][$fgtabid];
                        # extension fields as string
                        #} // todo
                        #elseif($fieldid AND is_string($fieldid) AND substr($fieldid,0,1) == '#'){
                            #$fieldid = substr($fieldid,1);
                            #$select[] = $fieldid;
                        #}
                    }
                }
                # 1:1 Verkn√ºpfung
                if($fgtabid != $gtabid AND $gtab["verkn"][$fgtabid] == $gtab["verkn"][$gtabid]){
                    $where[] = $gtab["table"][$gtabid].".ID = ".$gtab["table"][$fgtabid].".ID";
                    $query["from_"][] = $gtab["table"][$fgtabid];
                }

                # table and ID from relation params and relation tables
                if($fgtabid != $gtabid AND $verkn){
                    $tablist[] = $fgtabid;
                    $query["from_"][] = $gtab["table"][$fgtabid];
                    // get relation table IDs with ID_X
                    $select[] = $gtab["table"][$fgtabid].".".$gtab["keyfield"][$fgtabid]." AS ".$gtab["keyfield"][$fgtabid]."_".$fgtabid;
                }

            }
        }

    # alle Felder
    }elseif($gfield[$gtabid]["select"]){
        $select = $gfield[$gtabid]["select"];
    }

    # Tabellen-Array
    $tablist = array_unique($tablist);

    # --- Orderfeld extrahieren ----------
    if(is_array($filter["order"][$gtabid])){
        $orderset = $filter["order"][$gtabid];
    }elseif($filter["order"][$gtabid]){
        $orderset = explode("#",$filter["order"][$gtabid]);
        if(!is_array($orderset)){
            $orderset[0] = $filter["order"][$gtabid];
        }
    }else{
        $orderset = array();
    }

    # --- Spezifische Datensatzrechte -----------------------------------
    if($gtab["has_userrules"][$gtabid] AND !$gtab["edit_userrules"][$gtabid]){
        $query["from_"][] = "LMB_RULES_DATASET";
        $where[] = "(".$gtab["table"][$gtabid].".ID = LMB_RULES_DATASET.DATID AND LMB_RULES_DATASET.TABID = $gtabid AND (LMB_RULES_DATASET.USERID = ".$session["user_id"]." OR LMB_RULES_DATASET.GROUPID IN (".implode(",",$session["subgroup"]).")))";
        $distinct = "DISTINCT";
    }

    # Schleife √ºber 1:1 Tabellen
    foreach($tablist as $key0 => $fgtabid){

        # --- Spezifische Datensatzrechte -----------------------------------
        #if($gtab["has_userrules"][$fgtabid] AND !$gtab["edit_userrules"][$fgtabid]){
        #	$query["from_"][] = "LMB_RULES_DATASET";
        #	$where[] = "(".$gtab["table"][$gtabid].".ID = LMB_RULES_DATASET.DATID AND LMB_RULES_DATASET.TABID = $fgtabid AND (LMB_RULES_DATASET.USERID = ".$session["user_id"]." OR LMB_RULES_DATASET.GROUPID IN (".implode(",",$session["subgroup"]).")))";
        #}

        $query["where2"] = array();
        $query["where1"] = array();

        # ------------ Suchkriterien ------------
        if($utyp AND $gsr[$fgtabid]){

            foreach($gsr[$fgtabid] as $key => $val){
                $qu = get_where($key,$fgtabid,$gsr);

                # falls Suchkriterium
                if(lmb_count($qu["where"])>0){

                    // override version or validity filter by searching in this field
                    if(($gtab['versioning'][$fgtabid] OR $gtab['validity'][$fgtabid]) AND $gfield[$fgtabid]['searchversion'][$key] AND $qu){
                        $filter['searchversion'][$fgtabid] = 1;
                    }

                    # 1:1 Verkn√ºpfungen einbinden
                    if($fgtabid != $gtabid AND $gtab["verkn"][$fgtabid] == $gtab["verkn"][$gtabid]){
                        $qu["where"][] = $gtab["table"][$gtabid].'.'.$gtab["keyfield"][$gtabid].' = '.$gtab["table"][$fgtabid].'.'.$gtab["keyfield"][$fgtabid];
                        $qu["from_"][] = $gtab["table"][$fgtabid];
                    }
                }

                $query["from_"] = array_merge($qu["from_"],$query["from_"]);

                # globale where in oberster Ebene
                if($qu['where_glob']){
                    $where = array_merge($where,$qu['where_glob']);
                }

                if($qu["where"]){
                    $query["where1"][] = implode(" AND ",$qu["where"]);
                }
                # Verkn√ºpfungsbaum Unterabfragen
                if($qu["vwhere"]){
                    $query["where1"][] = "(".implode(" OR ",$qu["vwhere"]).")";
                }

                # Distinct auch f√ºr rowcount (maxdb workaround) ($umgvar["showcount"])
                # Bei Soap unbedingt $umgvar["showcount"] = 1 setzen !! (wegen LONG Feldern)
                #if($qu["distinct"] OR !$umgvar["showcount"]){$distinct = "DISTINCT";}
                if($qu["distinct"]){$distinct = "DISTINCT";}

            }
            # --- Suchkriterien --------
            if($gsr[$fgtabid]["andor"] == 2){$andor = "OR";}else{$andor = "AND";}
            if($query["where1"]){if(lmb_count($query["where1"]) > 1){$where[] = "(".implode(" $andor ",$query["where1"]).")";}else{$where[] = $query["where1"][0];}}
        }

        foreach($gfield[$fgtabid]["indize"] as $key => $val){
            if($gfield[$fgtabid]["indize"][$key] AND $single AND $gtabid == $fgtabid AND !$filter['report'][$gtabid]){
                $select[] = $gtab["table"][$fgtabid].".IND_$key,".$gtab["table"][$fgtabid].".INDD_$key";
            }
        }

        # ------------ Gruppenfilter/Rechte------------
        if(lmb_count($gfield[$fgtabid]["filter"]) > 0){
            $qrules = get_queryrules($fgtabid);
            $query["from_"] = array_merge($query["from_"],$qrules["from"]);
            $where = array_merge($where,$qrules["where"]);
            if($qrules["distinct"]){$distinct = "DISTINCT";}
        }

    }

    $query["from_"][] = $gtab["table"][$gtabid];
    $from = $query["from_"];

    /*----------------- Select-Array -------------------*/
    # is view
    if($gtab["typ"][$gtabid] == 5 ){

        if($gtab["keyfield"][$gtabid] and $gtab["keyfield"][$gtabid] != 'NULL'){
            $select[] = $gtab["table"][$gtabid].'.'.$gtab["keyfield"][$gtabid];
        }

        /*----------------- multitenant -------------------*/
        if($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid]){
            $select[] = $gtab["table"][$gtabid].".LMB_MID";
        }

    # is table
    }elseif($gtab["typ"][$gtabid] != 5){
        $select[] = $gtab["table"][$gtabid].".".$gtab["keyfield"][$gtabid];
        $select[] = $gtab["table"][$gtabid].".DEL";
        $select[] = $gtab["table"][$gtabid].".LMB_STATUS";
        $select[] = $gtab["table"][$gtabid].".ERSTDATUM";
        $select[] = $gtab["table"][$gtabid].".EDITDATUM";
        $select[] = $gtab["table"][$gtabid].".EDITUSER";
        $select[] = $gtab["table"][$gtabid].".ERSTUSER";
        $select[] = $gtab["table"][$gtabid].".INUSE_TIME";
        $select[] = $gtab["table"][$gtabid].".INUSE_USER";

        /*
        // deprecated
        if($filter["unhide"][$gtabid] == -1){

        }elseif($filter["unhide"][$gtabid]){
            $where[] = $gtab["table"][$gtabid].".DEL = ".LMB_DBDEF_TRUE;
        }elseif(!$single AND !$extension["showdelete"]){
            $where[] = $gtab["table"][$gtabid].".DEL = ".LMB_DBDEF_FALSE;
        }
        */

        /*----------------- Zusatz Wiedervorlage -------------------*/
        if($filter['reminder'][$gtabid]){ #AND !$onlyfield
            global $greminder;

            $gtabid_reminder = $greminder["argresult_id"][$filter['reminder'][$gtabid]];

            if(!$greminder[$gtabid_reminder]['name'][$filter['reminder'][$gtabid]]){
                $filter['reminder'][$gtabid] = 'true';
            }

            $reminderID = $filter['reminder'][$gtabid];

            # filter explizit nach GruppenID
            if($filter['reminder_group'][$reminderID]){
                $where[] = "LMB_REMINDER_GROUP.GROUP_ID = ".parse_db_int($filter['reminder_group'][$reminderID]);
                # filter explizit nach UserID
            }elseif($filter['reminder_user'][$reminderID]){
                $where[] = "LMB_REMINDER_GROUP.USER_ID = ".parse_db_int($filter['reminder_user'][$reminderID]);
                # filter nach Zugeh√∂rigkeit Gruppe&User
            }elseif($greminder[$gtabid_reminder]["groupbased"][$filter["reminder"][$gtabid]]){
                $where[] = "(LMB_REMINDER_GROUP.GROUP_ID IN (".implode(",",$session["subgroup"]).") OR LMB_REMINDER.USER_ID = ".$session["user_id"].")";
                # filter nach Zugeh√∂rigkeit User
            }else{
                $where[] = "LMB_REMINDER_GROUP.USER_ID = ".$session["user_id"];
            }

            ############# in date ##########
            # after given date (gtab_erg)
            if($filter['reminder_from'][$reminderID] AND $d=convert_date($filter['reminder_from'][$reminderID])){
                $where[] = "LMB_REMINDER.FRIST >= '$d'";
            }

            # specific date
            if($filter['reminder_date'][$reminderID]){
                if(lmb_substr($filter['reminder_date'][$reminderID],0,1) == '<' OR lmb_substr($filter['reminder_date'][$reminderID],0,1) == '>'){
                    $where[] = "LMB_REMINDER.FRIST ".lmb_substr($filter['reminder_date'][$reminderID],0,1)." '".trim(convert_date(substr($filter['reminder_date'][$reminderID],1)))."'";
                }else{
                    $where[] = "LMB_REMINDER.FRIST = '".convert_date($filter['reminder_date'][$reminderID])."'";
                }
                # before given date (gtab_erg)
            }elseif($filter['reminder_to'][$reminderID] AND $d=convert_date($filter['reminder_to'][$reminderID])){
                $where[] = "LMB_REMINDER.FRIST <= '$d'";
                # default date before NOW
            }else{
                $where[] = "LMB_REMINDER.FRIST <= ".LMB_DBDEF_TIMESTAMP;
            }

            ############# from user ##########
            # create from user NAME / ID
            if($filter['reminder_create'][$reminderID]){
                if(is_numeric($filter['reminder_create'][$reminderID])){
                    $where[] = "LMB_REMINDER.FROMUSER = ".parse_db_int($filter['reminder_create'][$reminderID]);
                }else{
                    $from[] = "LMB_USERDB";
                    $where[] = "LMB_REMINDER.FROMUSER = LMB_USERDB.USER_ID";
                    $where[] = "LOWER(LMB_USERDB.VORNAME".LMB_DBFUNC_CONCAT."' '".LMB_DBFUNC_CONCAT."LMB_USERDB.NAME) LIKE '%".lmb_strtolower(parse_db_string($filter['reminder_create'][$reminderID],30))."%'";
                }
            }

            # default order
            if(!lmb_count($orderset)){
                $extension["order"][] = 'LMB_REMINDER.FRIST';
            }
            $from[] = "LMB_REMINDER";
            $from[] = "LMB_REMINDER_GROUP";

            $where[] = "LMB_REMINDER.ID = LMB_REMINDER_GROUP.REMINDER_ID";
            $where[] = "LMB_REMINDER.TAB_ID = ".$gtabid;
            $where[] = "LMB_REMINDER.DAT_ID = ".$gtab["table"][$gtabid].".ID";
            $where[] = "LMB_REMINDER.CATEGORY = ".parse_db_int($filter["reminder"][$gtabid]);

            $select[] = "LMB_REMINDER.ID AS LMBREM_ID";
            $select[] = "LMB_REMINDER.FRIST AS LMBREM_FRIST";
            $select[] = "LMB_REMINDER.DESCRIPTION AS LMBREM_DESCR";
            $select[] = "LMB_REMINDER.FROMUSER AS LMBREM_USER";
            $select[] = "LMB_REMINDER.TAB_ID AS LMBREM_TABID";
            $select[] = "LMB_REMINDER.DAT_ID LMBREM_DATID";
            $select[] = "LMB_REMINDER.CONTENT AS LMBREM_CONTENT";
            $select[] = "LMB_REMINDER.WFL_INST AS LMBREM_WFLINST";
            $nosverkn = 1;
        }

        /*----------------- validity -------------------*/
        if($gtab['validity'][$gtabid]){
            $select[] = $gtab["table"][$gtabid].".LMB_VALIDFROM";
            $select[] = $gtab["table"][$gtabid].".LMB_VALIDTO";
        }

        /*----------------- zeige gesperrte Datens√§tze -------------------*/
        if($filter["locked"][$gtabid]){
            $where[] = "(".$gtab["table"][$gtabid].".INUSE_TIME  > ".LMB_DBDEF_TIMESTAMP.")";
        }

        /*----------------- verstecke gesperrte Datens√§tze -------------------*/
        if($filter["hidelocked"][$gtabid]){
            $where[] = "(".$gtab["table"][$gtabid].".INUSE_TIME IS NULL OR ".$gtab["table"][$gtabid].".INUSE_TIME <= ".LMB_DBDEF_TIMESTAMP." OR INUSE_USER = ".$session["user_id"].")";
        }

        /*----------------- Versionierung -------------------*/
        if($gtab["versioning"][$gtabid]){
            $select[] = $gtab["table"][$gtabid].".VID,".$gtab["table"][$gtabid].".VPID,".$gtab["table"][$gtabid].".VACT,".$gtab["table"][$gtabid].".VDESC";
        }

        /*----------------- Syncronisation -------------------*/
        if($gtab["datasync"][$gtabid] == 1){
            $select[] = $gtab["table"][$gtabid].".LMB_SYNC_ID,".$gtab["table"][$gtabid].".LMB_SYNC_SLAVE";
        }

        /*----------------- multitenant -------------------*/
        if($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid]){
            $select[] = $gtab["table"][$gtabid].".LMB_MID";
        }

    }

    # Nur f√ºr Detail
    if($single AND $gtab["keyfield"][$gtabid]){
        if(!is_numeric($single)){return false;}
        $where[] = $gtab["table"][$gtabid].'.'.$gtab["keyfield"][$gtabid].' = '.$single;

    # Nur f√ºr Tabellenliste
    }else{
        # no view
        if($gtab["typ"][$fgtabid] != 5){
            //----------------- filterstatus - trash / archive -------------------
            if($filter["status"][$gtabid] == -1 OR defined('LMB_SYNC_PROC')) {
                // get all datasets (sync)
            }elseif($filter["status"][$gtabid]) {
                $where[] = $gtab["table"][$gtabid].".LMB_STATUS = ".parse_db_int($filter["status"][$gtabid]);
            }else{
                $where[] = $gtab["table"][$gtabid].".LMB_STATUS = 0";
            }

            #if($filter["viewversion"][$gtabid] == 'false'){$filter["viewversion"][$gtabid] = false;}

            /*----------------- Farbhinterlegung -------------------*/
            if($LINK[140] AND $gtab["linecolor"][$gtabid] AND !$onlyfield){
                $ojoin[$gtab["table"][$gtabid]]["LMB_GTAB_GROUPDAT"][] = $gtab["table"][$gtabid].".ID = LMB_GTAB_GROUPDAT.DAT_ID AND LMB_GTAB_GROUPDAT.GROUP_ID = ".$session["group_id"]." AND LMB_GTAB_GROUPDAT.TAB_ID = ".$gtabid;
                $select[] = "LMB_GTAB_GROUPDAT.COLOR AS LMB_GCOLOR";
                $distinct = "DISTINCT";
            }

            /*----------------- Verk√ºpfungsfilter -------------------
            # $verkn[verknpf] = 1 =>  Verkn√ºpfung von links nach rechts (default)
            # $verkn[verknpf] = 2 =>  Verkn√ºpfung von rechts nach links
            ist nicht gleich zu setzen mit R√ºckwertiger Verkn√ºpfung sondern beschreibt 2 Arten der Forw√§rtigen Verkn√ºpfung
            */

            #--- R√ºckwertige Verkn√ºpfung ---
            /*
            if($verkn["verknpf"] == 2 AND $verkn["md5tab"]){
                $select[] = $gtab["table"][$gtabid].".ID";
                $select[] = $verkn["md5tab"].".VERKN_ID AS VERKN_ID";
                #$select[] = $verkn["md5tab"].".ID AS HERK_ID";
                $where[] = $gtab["table"][$gtabid].".ID = ".$verkn["md5tab"].".ID";
                $where[] = $verkn["md5tab"].".VERKN_ID = ".$verkn["id"];
                $from[] = $verkn["md5tab"];
                $orderbysort = 1;
                $distinct = "DISTINCT";
            */
            # --- zeige nur verkn√ºpfte Datens√§tze ---
            if($verkn["showonly"]){

                // direct 1:n relation
                if($verkn['typ'] == 25) {
                    // backward relation
                    if($gfield[$verkn["tabid"]]["verkntabletype"][$verkn["fieldid"]] == 2){
                        #$where[] = "EXISTS         ## alternative serach - try performance
                        #(SELECT ".$gtab["table"][$verkn['tabid']].".ID
                        #FROM ".$gtab["table"][$verkn['tabid']]."
                        #WHERE ".$gtab["table"][$verkn['tabid']].".".$gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]]." = ".$gtab["table"][$gtabid].".ID AND ".$gtab["table"][$verkn['tabid']].".ID=".$verkn["id"].")";

                        // self relation
                        if($gtab["table"][$gtabid] == $gtab["table"][$verkn['tabid']]){
                            $where[] = $gtab["table"][$verkn['tabid']].".ID = LMB_S.".$gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]]." 
                            AND LMB_S.ID=".$verkn["id"];
                            $from[] = $gtab["table"][$gtabid].' AS LMB_S';
                        }else {
                            $where[] = $gtab["table"][$gtabid] . ".ID = " . $gtab["table"][$verkn['tabid']] . "." . $gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]] . " 
                            AND " . $gtab["table"][$verkn['tabid']] . ".ID = " . $verkn["id"];
                            $from[] = $gtab["table"][$verkn['tabid']];
                        }
                    }else {
                        // right to left join
                        if($verkn["verknpf"] == 2) {
                            $where[] = $gtab["table"][$verkn['vtabid']] . ".ID = " . $verkn["id"];
                            $where[] = $gtab["table"][$verkn['vtabid']] . "." . $verkn['md5tab'] . " = ".$gtab["table"][$gtabid] .".ID";
                            $from[] = $gtab['table'][$verkn['vtabid']];

                        // left to right join (default)
                        }else{
                            $select[] = $gtab["table"][$gtabid] . ".ID AS ID";
                            $select[] = $gtab["table"][$gtabid] . ".ID AS VERKN_ID";
                            $where[] = $gtab["table"][$verkn['vtabid']] . "." . $verkn['md5tab'] . " = " . $verkn["id"];
                            $from[] = $gtab['table'][$verkn['vtabid']];
                        }
                    }
                }else {
                    // right to left join
                    if($verkn["verknpf"] == 2) {
                        $select[] = $gtab["table"][$gtabid] . ".ID";
                        $select[] = $verkn["md5tab"] . ".VERKN_ID AS VERKN_ID";
                        $select[] = $verkn["md5tab"] . ".KEYID AS VERKN_KEYID";
                        $where[] = $gtab["table"][$gtabid] . ".ID = " . $verkn["md5tab"] . ".ID";
                        #if($verkn["showonly"] != 2){$where[] = $verkn["md5tab"] . ".VERKN_ID = " . $verkn["id"];} todo
                        $where[] = $verkn["md5tab"] . ".VERKN_ID = " . $verkn["id"];
                        $from[] = $verkn["md5tab"];
                        $orderbysort = 1;
                        // validity paramrelation
                        if($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']]) {
                            $validity_filter[1] = array($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']], $gtabid);
                        }

                    // left to right join (default)
                    }else {
                        $select[] = $gtab["table"][$gtabid] . ".ID";
                        $select[] = $verkn["md5tab"] . ".VERKN_ID AS VERKN_ID";
                        $select[] = $verkn["md5tab"] . ".KEYID AS VERKN_KEYID";
                        $where[] = $gtab["table"][$gtabid] . ".ID = " . $verkn["md5tab"] . ".VERKN_ID";
                        #if($verkn["showonly"] != 2){$where[] = $verkn["md5tab"] . ".ID = " . $verkn["id"];} todo
                        $where[] = $verkn["md5tab"] . ".ID = " . $verkn["id"];
                        $selfRelation = ($verkn['tabid'] == $verkn['vtabid']);
                        if (!$selfRelation && in_array($verkn["tab"], $query["from_"])) {
                            $where[] = $verkn["md5tab"] . ".ID = " . $verkn["tab"] . ".ID";
                        }
                        // validity paramrelation
                        if($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']]) {
                            $validity_filter[1] = array($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']], $verkn['vtabid']);
                        }
                    }

                    // validity
                    $from[] = $verkn["md5tab"];
                    $orderbysort = 1;
                }


            # --- zeige nur "nicht" verkn√ºpfte Datens√§tze ---
            #}elseif($verkn["verknpf"] AND !$gtab["sverkn"][$gtabid]){ // todo
            }elseif($verkn["verknpf"] AND $verkn["tabid"] != $gtabid){

                // --- 1:n | zeige nur "nicht" verkn√ºpfte Datens√§tze ---
                if($verkn["typ"] == 27){
                    $where[] = "NOT EXISTS(SELECT DISTINCT ".$verkn["md5tab"].".VERKN_ID FROM ".$verkn["md5tab"]." WHERE ".$gtab["table"][$gtabid].".ID = ".$verkn["md5tab"].".VERKN_ID)";

                // --- n:m | zeige alle Datens√§tze und verkn√ºpfte markiert (nur bei nicht unique) ---
                }elseif($verkn["typ"] == 24 AND !$gfield[$verkn["tabid"]]["unique"][$verkn["fieldid"]]){
                    $select[] = $gtab["table"][$gtabid].".ID";
                    $select[] = $verkn["md5tab"] . ".VERKN_ID AS VERKN_ID";
                    $select[] = $verkn["md5tab"] . ".KEYID AS VERKN_KEYID";
                    #$select[] = $verkn["md5tab"].".ID AS HERK_ID";
                    $ojoin[$gtab["table"][$gtabid]][$verkn["md5tab"]][] = $verkn["md5tab"].".VERKN_ID = ".$gtab["table"][$gtabid].".ID";
                    $ojoin[$gtab["table"][$gtabid]][$verkn["md5tab"]][] = $verkn["md5tab"].".ID = ".$verkn["id"];
                    $orderbysort = 1;
                    $distinct = "DISTINCT";

                    // validity paramrelation
                    if($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']]) {
                        $validity_filter[1] = array($gfield[$verkn['tabid']]['verknparams'][$verkn['fieldid']], $gtabid);
                    }

                // direct 1:n relation | zeige nur "nicht" verkn√ºpfte Datens√§tze ---
                }elseif($verkn['typ'] == 25) {
                    // backward relation
                    if($gfield[$verkn["tabid"]]["verkntabletype"][$verkn["fieldid"]] == 2){
                        // show all - nothing to_do

                        #$where[] = "NOT EXISTS         ## alternative serach - try performance
                        #(SELECT ".$gtab["table"][$verkn['tabid']].".ID
                        #FROM ".$gtab["table"][$verkn['tabid']]."
                        #WHERE ".$gtab["table"][$verkn['tabid']].".".$gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]]." = ".$gtab["table"][$gtabid].".ID)";

                        #$ojoin[$gtab["table"][$gtabid]][$gtab["table"][$verkn['tabid']]][] = $gtab["table"][$verkn['tabid']].".".$gfield[$gfield[$verkn['tabid']]['verkntabid'][$verkn['fieldid']]]['md5tab'][$gfield[$verkn['tabid']]['hasrecverkn'][$verkn['fieldid']]]." = ".$gtab["table"][$gtabid].".ID";
                        #$where[] = $gtab["table"][$verkn['tabid']].".ID IS NULL";

                    }else {
                        $where[] = $gtab["table"][$gtabid] . "." . $verkn["md5tab"] . " IS NULL";
                    }
                    #$where[] = "(".$gtab["table"][$gtabid].".".$verkn["md5tab"]." IS NULL OR ".$gtab["table"][$gtabid].".".$verkn["md5tab"]." = 0)";
                }


            # --- Zeige nur "nicht" verkn√ºpfte Datens√§tze bei Selbstverkn√ºpfungen ---
           # }elseif($verkn["verknpf"] AND $gtab["sverkn"][$gtabid] AND !$nosverkn AND !$filter["nosverkn"][$gtabid]){ // todo
            }elseif($verkn["verknpf"] AND $verkn["tabid"] == $gtabid AND !$nosverkn AND !$filter["nosverkn"][$gtabid]){
                // 1:n direct
                if ($verkn['typ'] == 25) {
                    if ($gfield[$verkn['tabid']]['verkntabletype'][$verkn['fieldid']] == 2) {
                        # direct backward relation
                        $where[] = "{$gtab["table"][$gtabid]}.ID NOT IN (SELECT DISTINCT {$gtab["smd5tab"][$gtabid]} FROM {$gtab["table"][$gtabid]} WHERE {$gtab["smd5tab"][$gtabid]} IS NOT NULL)";
                    } else {
                        # direct forward relation
                        $where[] = "{$gtab["table"][$gtabid]}.{$gtab["smd5tab"][$gtabid]} IS NULL";
                    }
                // 1:n
                } elseif($verkn['typ'] == 27) {
                    $where[] = "NOT EXISTS(SELECT DISTINCT " . $gtab["smd5tab"][$gtabid] . ".VERKN_ID FROM " . $gtab["smd5tab"][$gtabid] . " WHERE " . $gtab["table"][$gtabid] . ".ID = " . $gtab["smd5tab"][$gtabid] . ".VERKN_ID)";
                }
            }

            // validity for parent relation setting
            if($verkn['tabid']){
                $validity_filter[0] = array($gtabid,$verkn['tabid']);
            }

            if($gtab['validity'][$gtabid] AND !$filter['validity'][$gtabid]) {
                #$filter['validity'][$gtabid] = convert_stamp(local_stamp());
            }

            # ----------------- validity -------------------
            if(!$validity_filter[0]) {
                $validity_filter[0] = array($gtabid, $gtabid);
            }

            foreach($validity_filter as $vkey => $vvalue) {
                $validity = null;
                if($filter['validity'][$gtabid]){$validity = $filter['validity'][$gtabid];}
                elseif($filter['validity'][$vvalue[1]]){$validity = $filter['validity'][$vvalue[1]];}
                elseif($GLOBALS['filter']['validity'][$vvalue[1]]){$validity = $GLOBALS['filter']['validity'][$vvalue[1]];}
                else {$validity = $GLOBALS['filter']['validity'][$vvalue[1]] = stampToDate(local_stamp(),1);}

                if($validity == 'all' OR $filter["searchversion"][$vvalue[1]]){continue;}
                if($gtab['validity'][$vvalue[0]] AND $validity AND !$filter["searchversion"][$vvalue[1]] AND !$filter['reminder'][$gtabid]) {
                    get_validity($vvalue[0], $validity, $where);
                }
            }
            unset($validity_filter);

            # Versionierte Datens√§tze filtern
            if($gtab["versioning"][$gtabid] AND !$filter["viewversion"][$gtabid] AND !$GLOBALS["view_version_status"] AND !$filter["searchversion"][$fgtabid]){
                // validity check
                if($gtab['validity'][$gtabid] != 2) {
                    $where[] = $gtab["table"][$gtabid] . ".VACT = " . LMB_DBDEF_TRUE;
                }
            }

            # ----------------- Versionsstatus Datens√§tze -------------------
            if($GLOBALS["view_version_status"] AND $gtab["viewver"][$gtabid]){
                $vdate = convert_date($GLOBALS["view_version_status"]);
                if($vdate){
                    $where[] = "(" .  $gtab["table"][$gtabid] . ".ERSTDATUM < '" . $vdate . "' AND " .  $gtab["table"][$gtabid] . ".EDITDATUM > '" . $vdate . "' OR
					 " .  $gtab["table"][$gtabid] . ".EDITDATUM < '" . $vdate . "' AND VACT = ".LMB_DBDEF_TRUE.")";
                }else{$GLOBALS["view_version_status"] = "";}
            }



            # Sondertypen
            if($gsr[$gtabid]["ID"]){
                $where[] = $gtab["table"][$gtabid].".ID = ".$gsr[$gtabid]["ID"];
            }

        }

        # Typ Files
        #if($gtab["typ"][$gtabid] == 3){
        #$require = "extra/explorer/filestructure.lib";
        #require_once($require);
        #$subd = get_subdir(0,1);

        #if($gtab["table"][$gtabid] != "LDMS_FILES"){
        #	$from[] = "LDMS_FILES";
        #	$where[] = $gtab["table"][$gtabid].".ID = LDMS_FILES.ID";
        #}
        #$where[] = "LDMS_FILES.LEVEL IN (".implode(",",$subd).")";
        #}


        # page count  ## todo
        /*
		if(!$filter["anzahl"][$gtabid]){$filter["anzahl"][$gtabid] = $session["maxresult"];$filter["anzahl"][$gtabid] = $session["maxresult"];}
		elseif($exp_typ == 2 OR $filter["anzahl"][$gtabid] == "all"){$filter["anzahl"][$gtabid] = $gresult[$gtabid]["max_count"];}
		elseif($filter["anzahl"][$gtabid] > $gresult[$gtabid]["res_count"]){$filter["anzahl"][$gtabid] = $gresult[$gtabid]["res_count"];}
		$limit_ = $filter["anzahl"][$gtabid];
		*/


        /*
		 * set resulcache limit
		 * rowno only order resultcashe (maxdb)
		 * use limit for maxdb
		 */
        $limit_ = $umgvar["resultspace"];
        if($filter["nolimit"][$gtabid]){$limit_ = false;}
        if($extension['limit'][$gtabid]){$limit_ = $extension['limit'][$gtabid];}

        if($limit_){
            if(defined('LMB_DBFUNC_LIMIT')){
                $limit = LMB_DBFUNC_LIMIT." ".$limit_;
            }elseif(defined('LMB_DBFUNC_ROWNO')){
                $where[] = LMB_DBFUNC_ROWNO." <= ".$limit_;
            }
        }

        /* --------------------------- Order ----------------------------------- */

        // custom order
        foreach($orderset as $okey => $order){
            if(!is_array($order) AND $order){
                $order = explode("&",$order);
            }
            if ($order[2] AND strcasecmp($order[2], 'ASC') != 0 AND strcasecmp($order[2], 'DESC') != 0) {
                continue;
            }
            if ($order[0] AND $gfield[$order[0]]['sort'][$order[1]]) {
                $order_type = $gfield[$order[0]]['parse_type'][$order[1]];
                $sort_field_name = $gtab['table'][$order[0]] . '.' . $gfield[$order[0]]['field_name'][$order[1]];

                if ($gfield[$order[0]]['argument_typ'][$order[1]] == 47 AND !$gfield[$order[0]]['argument_edit'][$order[1]]) {
                    # sort by argument
                    if ($gfield[$order[0]]['argument'][$order[1]]) {
                        $orderque[] = $gfield[$order[0]]['argument'][$order[1]] . ' ' . $order[2];
                    }
                } else if ($order_type != 2) {        /*--- numeric ----*/
                    $orderque[] = $sort_field_name . ' ' . $order[2];
                    $select[] = $sort_field_name;
                    $ordersel[] = $sort_field_name;
                } else {                       /*---- sonstige -----*/
                    $orderque[] = 'lower(' . $sort_field_name . ') ' . $order[2];
                    $select[] = 'lower(' . $sort_field_name . ')';
                    $ordersel[] = 'lower(' . $sort_field_name . ')';
                }
            }
        }

        // default order
        if (!$orderque AND !$extension['order']) {

            // order by relation SORT
            if ($orderbysort) {
                $orderque[] = $verkn['md5tab'] . '.SORT';
                $select[] = $verkn['md5tab'] . '.SORT';

            // order by version ID
            } elseif($gtab["viewver"][$gtabid] AND $filter["viewversion"][$gtabid] AND $utyp != 2){
                #$orderque = null;
                $orderque[] = $gtab["table"][$gtabid].".VPID,".$gtab["table"][$gtabid].".VID";
                $ordersel[] = $gtab["table"][$gtabid].".VPID";
                $ordersel[] = $gtab["table"][$gtabid].".VID";
            // order by ID / default order
            } else {
                if ($gtab['orderby'][$gtabid]) {
                    foreach($gtab['orderby'][$gtabid] as $obk => $orderby) {
                        $orderby_f = $orderby[0];
                        $orderby_d = $orderby[1];
                        $sort_field_id = $gfield[$gtabid]['argresult_name'][$orderby_f];

                        if ($gfield[$gtabid]['argument_typ'][$sort_field_id] == 47 AND !$gfield[$gtabid]['argument_edit'][$sort_field_id]) {
                            # sort by argument
                            if ($gfield[$gtabid]['argument'][$sort_field_id]) {
                                $orderque[] = $gfield[$gtabid]['argument'][$sort_field_id] . ' ' . $orderby_d;
                                if($distinct or $extension["distinct"]){
                                    $select[] = $gfield[$gtabid]['argument'][$sort_field_id];
                                }
                            }
                        } else {
                            $orderque[] = $orderby_f . ' ' . $orderby_d;
                            // In SELECT DISTINCT statements field must exist in select list
                            if($distinct or $extension["distinct"]){
                                $select[] = $orderby_f;
                            }
                        }
                    }

                } elseif ($gtab['typ'][$fgtabid] != 5) {
                    $orderque[] = $gtab['table'][$gtabid] . '.ID';
                }
            }

        }

    }

    ################### f√ºr alle #####################

    # Multitenant
    if($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid] AND !$session["superadmin"]) {
        global $lmmultitenants;

        if(!$session['mid']){
            lmb_alert('you can not access data without multitenant ID');
            return false;
        }
        /* - todo char based
        if($filter["multitenant"][$gtabid] OR $single){
            $where[] = $gtab['table'][$gtabid] . '.LMB_MID IN (\'' . implode('\',\'',$lmmultitenants['mid']).'\')';
        }else{
            $where[] = $gtab['table'][$gtabid] . ".LMB_MID = '".$lmmultitenants['mid'][$session['mid']]."'";
        }
        */
        if($filter["multitenant"][$gtabid] OR $single){
            $where[] = $gtab['table'][$gtabid] . '.LMB_MID IN ('.implode(',',$lmmultitenants['mid']) .')';
        }else{
            $where[] = $gtab['table'][$gtabid] . '.LMB_MID = '.$lmmultitenants['mid'][$session['mid']];
        }
    }

    # Extension
    if($extension){
        if ($extension["select"]) {$select = array_merge($extension["select"],$select);}
        if ($extension["where"]) {$where = array_merge($extension["where"],$where);}
        if ($extension["from"]) {$from = array_merge($extension["from"],$from);}
        if ($extension["order"]) {$orderque = $extension["order"];}
        if ($extension["ojoin"]) {$ojoin = array_merge($extension["ojoin"],$ojoin);}
        if ($extension["distinct"]) {$distinct = $extension["distinct"];}
    }

    $from = array_unique($from);
    # set from unique for outer joins
    if($ojoin){
        $ojoin = array_unique($ojoin);
        foreach ($ojoin as $jkey => $jval){
            if(($joinkey = array_search(lmb_strtoupper($jkey),array_map('strtoupper',$from)))!==false){
                unset($from[$joinkey]);
            }
            $fromlj = array();
            foreach ($jval as $onjkey => $onjval){
                $fromlj[] = "LEFT JOIN $onjkey ON (".implode(" AND ",$onjval).")";
            }
            $from[] = $jkey." ".implode(" ",$fromlj);
        }
    }

    # set query unique
    $query["where"] = array_unique($where);
    $query["from"] = array_unique($from);
    $query["select"] = array_unique($select);
    $query["ordersel"] = $ordersel;
    $query["distinct"] = $distinct;



    // inject view query with params
    if($gtab["typ"][$gtabid] == 5 AND $gtab['useviewparams'][$gtabid]) {

        // get params from extension
        if(!$extension['params']){
            // get params from default view definition
            eval($gtab['params2'][$gtabid]);
        }

        // get view definition
        $sqlqueryV = "SELECT LMB_CONF_VIEWS.VIEWDEF FROM LMB_CONF_VIEWS WHERE LMB_CONF_VIEWS.ID  = $gtabid";
        $rsV = lmbdb_exec($db,$sqlqueryV) or errorhandle(lmbdb_errormsg($db),$sqlqueryV,$action,__FILE__,__LINE__);
        if($rsV) {
            $view_def = lmbdb_result($rsV, "VIEWDEF");
        }

        if($view_def) {

            // get from key
            $fkey = array_search($gtab['table'][$gtabid], $query['from']);

            // inject
            $query_inject = eval("return \"" . $view_def . "\";");

            // new subquery from
            $query['from'][$fkey] = '(' . $query_inject . ') AS ' . $gtab['table'][$gtabid];
        }
    }

    if($select){$select = implode(",",$query["select"]);}
    if($from){$from = implode(",",$query["from"]);}
    if($orderque){
        $query["order"] = array_unique($orderque);
        $orderque  = " ORDER BY ".implode(",",$query["order"]);
    }
    if($where){$where  = " WHERE ".implode(" AND ",$query["where"]);}else{$where = "";}

    /*----------------- Where_over-Array (suche √ºber alles) -------------------*/
    if($where_over AND $where){$where  = "$where AND (".implode(" OR ",array_unique($where_over)).")";}
    elseif($where_over AND !$where){$where = "WHERE ".implode(" OR ",array_unique($where_over)).")";}

    /* --- SQL-Query --------------------------------------------- */
    if(!$select OR !$from){
        lmb_log::error('query could not be executed - no select or from in query', null, $gtabid);
        #lmb_alert('query could not be executed!');
        #error_showalert($GLOBALS['alert']);
        return false;
        #die("</BODY>");
    }


    // use Limit & Offset instead of Cursor (PDO)
    if(defined('LMB_DBFUNC_OFFSET') AND (!$single OR !$gtab["keyfield"][$gtabid])) {
        $limit = null;

        if (!$filter["page"][$gtabid] OR $filter["page"][$gtabid] < 1) {
            $filter["page"][$gtabid] = 1;
        }
        if (!$filter["anzahl"][$gtabid]) {
            $filter["anzahl"][$gtabid] = $session["maxresult"];
        }

        # ---- Z√§hlerbeginn
        if(is_numeric($filter["anzahl"][$gtabid])) {

            $offset = (($filter["anzahl"][$gtabid] * $filter["page"][$gtabid]) - $filter["anzahl"][$gtabid] + LMB_DBFUNC_OFFSET_START);
        }else{$offset = LMB_DBFUNC_OFFSET_START;}

        if ($GLOBALS['exp_typ'] == 2 OR $filter["anzahl"][$gtabid] == 'all') {
            if ($filter["nolimit"][$gtabid]) {
                $limit = null;
            } else {
                $limit = "LIMIT " . $umgvar["resultspace"] . " OFFSET $offset";
            }
        } elseif (is_numeric($filter["anzahl"][$gtabid])) {
            $limit = "LIMIT " . $filter["anzahl"][$gtabid] . " OFFSET $offset";
        } else {
            $limit = "LIMIT " . $session["maxresult"] . " OFFSET $offset";
        }

        // pointer for single result in view
        if($single AND !$gtab["keyfield"][$gtabid]) {
            $limit = 'LIMIT 1 OFFSET '.($offset + $single - 1);
        }

    }

    // +++++++++++++++++++++++ QUERY ++++++++++++++++++++++++++
    $query["sql"] = "SELECT $distinct $select FROM $from $where $orderque $limit";


    /* --- SQL-COUNT-Query --------------------------------------------- */
    if(LMB_DBFUNC_ROWNO){
        $where = explode("AND ROWNO",$where);
    }else{
        $where = explode("ORDER BY",$where);
    }
    $query["count"] = "SELECT COUNT(*) AS RESULT FROM $from ".$where[0];

    if($filter['verbose'][$gtabid]) {
        errorhandle('get_gresult query',$query["sql"],$action,__FILE__,__LINE__);
    }

    #error_log($query["count"]);
    return $query;
}


/**
 * execute sqlquery
 *
 * @param int $gtabid
 * @param array $query
 * @param array $verkn
 * @param array $filter
 * @param array $onlyfield
 * @param int $single
 * @return bool|\PDOStatement|resource
 */
function get_sqlresult($gtabid,$query,$verkn,$filter=null,$onlyfield=null,$single=null,$pointer=null,$utyp=null){

    global $db;
    global $gtab;
    global $gfield;
    global $action;
    global $session;
    global $umgvar;
    global $LINK;

    $zeit_main = gettime();

    if(!$filter){$filter = array();}

    # echo $query["sql"]."<br><br>";
    # error_log($query["sql"]);
    # error_log(' ');
    $rs = lmbdb_exec($db,$query["sql"]) or errorhandle(lmbdb_errormsg($db),$query["sql"],'result_query',__FILE__,__LINE__);

    # ---------------- Anzahl Reihen -------------
    $num_rows = lmb_num_rows($rs,$query["count"],$gtab["numrowcalc"][$gtabid]);
    $gresult[$gtabid]["res_count"] = $num_rows;

    # ---------------- Anzahl Ergebnisse -------------
    if($num_rows >= $umgvar["resultspace"] AND !$single){
        if($gtab["numrowcalc"][$gtabid] == 2){
            $gresult[$gtabid]["over_limit"] = 2;
        }elseif($filter["nolimit"][$gtabid]){
            $gresult[$gtabid]["over_limit"] = 0;
        }else{
            $gresult[$gtabid]["over_limit"] = 1;
        }
    }

    $zeit_now = gettime();
    $gresult[$gtabid]["need_time"] = round(($zeit_now - $zeit_main),3);

    # use pointer not ID
    if($single){
        $filter["anzahl"][$gtabid] = 1;
        # if view & view has no KEYID
        if($gtab["typ"][$gtabid] == 5 AND !$gtab["keyfield"][$gtabid]){
            $bzm = $single;
            $pointer = $single;
        }else{
            $bzm = 1;
        }
        # Datensatzliste
    }else{
        # Max. Anzahl Ergebnisse in resultcache;
        if($gresult[$gtabid]["res_count"] > $umgvar["resultspace"] AND !$filter["nolimit"][$gtabid]){
            $gresult[$gtabid]["max_count"] = $umgvar["resultspace"];
        }else{
            $gresult[$gtabid]["max_count"] = $gresult[$gtabid]["res_count"];
        }

        # ---- Max. Anzahl anzuzeigender Datens√§tze
        if(!$filter["anzahl"][$gtabid]){
            $filter["anzahl"][$gtabid] = $session["maxresult"];
        }elseif($exp_typ == 2 OR $filter["anzahl"][$gtabid] == "all"){
            $filter["anzahl"][$gtabid] = $gresult[$gtabid]["max_count"];
        }elseif($filter["anzahl"][$gtabid] > $gresult[$gtabid]["res_count"]){
            $filter["anzahl"][$gtabid] = $gresult[$gtabid]["res_count"];
        }

        # ---- anzuzeigende Seite / bei Verkn√ºpfungsdarstellung ($utyp == 2) immer Seite 1
        if($filter["anzahl"][$gtabid] AND $utyp != 2){
            if (!$filter["page"][$gtabid] OR $filter["page"][$gtabid] < 1 OR $filter["page"][$gtabid] > (ceil($gresult[$gtabid]["max_count"]/$filter["anzahl"][$gtabid])) ){$filter["page"][$gtabid] = 1;$GLOBALS["filter"]["page"][$gtabid] = 1;}
        }
        if(!$filter["page"][$gtabid]){$filter["page"][$gtabid] = 1;}

        # ---- Z√§hlerbeginn
        $gresult[$gtabid]["res_next"] = ($filter["anzahl"][$gtabid] * $filter["page"][$gtabid] - $filter["anzahl"][$gtabid] + 1);
        $bzm = $gresult[$gtabid]["res_next"];
        // use Limit & Offset instead of Cursor (PDO)
        if(defined('LMB_DBFUNC_OFFSET')) {$bzm = 1;}

        # Verkn√ºpfung anzeigen
        if($verkn AND lmb_strpos($query["sql"],"VERKN_ID AS VERKN_ID")){
            $show_verkn = 1;
        }
    }

    # Feldliste
    if(is_array($onlyfield)){
        foreach($onlyfield as $fgtabid => $fieldarray){
            # only 1:1 relation | 1:x relation not supported here | simulate 1:1 for relationparams
            if($fgtabid != $gtabid AND $gtab["verkn"][$fgtabid] != $gtab["verkn"][$gtabid] AND !$verkn['verknparams']){continue;}
            if(is_array($fieldarray)){
                $tablist[] = $fgtabid;
                foreach($fieldarray as $key => $value){
                    if($gfield[$fgtabid]["id"][$value]){
                        $fieldlist[$fgtabid][] = $value;
                        # extension fields
                    }elseif (is_string($value)){
                        $fieldlist[$fgtabid][] = $value;
                    }
                }
            }
        }
    }elseif ($onlyfield === "ID"){
        $tablist[] = $gtabid;
        $fieldlist[$gtabid] = null;
    }else{
        $tablist[] = $gtabid;
        $fieldlist[$gtabid] = $gfield[$gtabid]["id"];
    }

    for($i=0; $i < $filter['anzahl'][$gtabid]; $i++) {
        if(lmbdb_fetch_row($rs,$bzm)) {
            if($tablist){
                foreach ($tablist as $key0 => $fgtabid){
                    if($fieldlist[$fgtabid]){
                        foreach ($fieldlist[$fgtabid] as $key => $value){
                            # --- LONG --
                            if($gfield[$fgtabid]["data_type"][$value] == 39 AND !$gfield[$fgtabid]["longhandle"][$value]){
                                if($single OR $filter["getlongval"][$fgtabid]){
                                    $sqlquery1 = "SELECT ".$gfield[$fgtabid]["field_name"][$value]." AS LNG FROM ".$gtab["table"][$fgtabid]." WHERE ID = ".lmbdb_result($rs, "ID");
                                    $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                                    $gresult[$fgtabid][$value][$i] = trim(lmbdb_result($rs1,"LNG")); # longtext handle
                                    if($single AND $gfield[$fgtabid]["indize"][$value] AND $gtabid == $fgtabid AND !$filter['report'][$gtabid]){
                                        $gfield[$fgtabid]["INDIZE_TIME"][$value] = get_date(lmbdb_result($rs, "INDD_$value"),2);
                                        $gfield[$fgtabid]["INDIZE"][$value] = lmbdb_result($rs, "IND_$value");
                                    }
                                }else{
                                    $gresult[$fgtabid][$value][$i] = "...";
                                }
                                # currency
                            }elseif($gfield[$fgtabid]["data_type"][$value] == 30) {
                                $gresult[$fgtabid][$value][$i]['C'] = lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value]."_C");
                                $gresult[$fgtabid][$value][$i]['V'] = convert_FloatRound(lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value]));
                                # Float handling
                            }elseif($gfield[$fgtabid]["parse_type"][$value] == 6) {
                                $gresult[$fgtabid][$value][$i] = convert_FloatRound(lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value]));
                                # Boolean handling
                            }elseif($gfield[$fgtabid]["field_type"][$value] == 10) {
                                $gresult[$fgtabid][$value][$i] = lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value]);
                                # decryption handling
                            }elseif($gfield[$fgtabid]['data_type'][$value] == 55) {
                                $encresult = lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value]);
                                if (empty($gfield[$fgtabid]['encryption_mode'][$value]) && !empty($encresult)) {
                                    $encresult = lmb_decrypt($encresult);
                                }
                                $gresult[$fgtabid][$value][$i] = $encresult;
                                # 1:n direct backward relation value - show always relation ID
                            }elseif($gfield[$fgtabid]["data_type"][$value] == 25 AND $gfield[$fgtabid]['verkntabletype'][$value] == 2){
                                if(defined('LMB_SYNC_PROC')) {
                                    $gresult[$fgtabid][$value][$i] = [lmbdb_result($rs, $gfield[$fgtabid]['form_name'][$value])];
                                } else {
                                    $gresult[$fgtabid][$value][$i] = lmbdb_result($rs, $gfield[$fgtabid]['form_name'][$value]);
                                }
                                # get relation ID instead of count of relations
                            }elseif(is_array($filter) && array_key_exists('relationval',$filter) && $filter['relationval'][$gtabid] && $gfield[$fgtabid]["field_type"][$value] == 11){
                                $sqlquery1 = null;
                                // 1:n direct
                                if($gfield[$fgtabid]['data_type'][$value] == 25) {
                                    $sqlquery1 = "SELECT ID AS VERKN_ID FROM " . $gtab['table'][$gfield[$fgtabid]['verkntabid'][$value]] . " WHERE " . $gfield[$fgtabid]['md5tab'][$value] . " = " . lmbdb_result($rs, 'ID');
                                // 1:n / 1:m
                                }else {
                                    $sqlquery1 = "SELECT VERKN_ID FROM " . $gfield[$fgtabid]["md5tab"][$value] . " WHERE ID = " . lmbdb_result($rs, "ID");
                                }
                                if($sqlquery1){
                                $gresult[$fgtabid][$value][$i] = array();
                                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $GLOBALS['action'], __FILE__, __LINE__);
                                while (lmbdb_fetch_row($rs1)) {
                                    $gresult[$fgtabid][$value][$i][] = lmbdb_result($rs1, 'VERKN_ID');
                                }}

                                # all limbas fields
                            }elseif($gfield[$fgtabid]["form_name"][$value] AND $gfield[$fgtabid]["field_type"][$value] != 14 AND $gfield[$fgtabid]["field_type"][$value] != 15) {
                                $gresult[$fgtabid][$value][$i] = trim(lmbdb_result($rs, $gfield[$fgtabid]["form_name"][$value])); # longtext handle
                                # extension fields
                            }elseif(!is_numeric($value) AND $value){
                                $gresult[$fgtabid][$value][$i] = lmbdb_result($rs,$value);
                            }else{
                                $gresult[$fgtabid][$value][$i] = 0;
                            }
                        }
                    }
                    /*----------------- system fields -------------------*/
                    # only view
                    if($gtab["typ"][$fgtabid] == 5){
                        # check if view has ID
                        if($gtab["keyfield"][$gtabid]){
                            $id = lmbdb_result($rs, $gtab["keyfield"][$gtabid]);
                        # use pointer
                        }else{
                            $id = $bzm;
                        }
                    }else{
                        // get relation table IDs with ID_X
                        if($fgtabid != $gtabid AND $verkn AND $onlyfield){
                            $id = lmbdb_result($rs, $gtab["keyfield"][$fgtabid].'_'.$fgtabid);
                        // get ID
                        }else {
                            $id = lmbdb_result($rs, $gtab["keyfield"][$fgtabid]);
                        }
                        $gresult[$fgtabid]["ERSTDATUM"][$i] = get_date(lmbdb_result($rs, "ERSTDATUM"),2);
                        $gresult[$fgtabid]["EDITDATUM"][$i] = get_date(lmbdb_result($rs, "EDITDATUM"),2);
                        $gresult[$fgtabid]["EDITUSER"][$i] = lmbdb_result($rs, "EDITUSER");
                        $gresult[$fgtabid]["ERSTUSER"][$i] = lmbdb_result($rs, "ERSTUSER");
                        $gresult[$fgtabid]["DEL"][$i] = lmbdb_result($rs, "DEL");
                        $gresult[$fgtabid]["LMB_STATUS"][$i] = lmbdb_result($rs, "LMB_STATUS");
                        $gresult[$fgtabid]["INUSE_TIME"][$i] = lmbdb_result($rs, "INUSE_TIME");
                        $gresult[$fgtabid]["INUSE_USER"][$i] = lmbdb_result($rs, "INUSE_USER");
                        if(lmbdb_result($rs, "ERSTUSER") == $session["user_id"]){$gresult[$fgtabid]["IS_OWN_USER"][$i] = 1;}
                        // validity
                        if($gtab['validity'][$fgtabid]){
                            $gresult[$fgtabid]["LMB_VALIDFROM"][$i] = lmbdb_result($rs, "LMB_VALIDFROM");
                            $gresult[$fgtabid]["LMB_VALIDTO"][$i] = lmbdb_result($rs, "LMB_VALIDTO");
                        }
                    }

                    #------------------- get primary keyfield --------------------------------
                    $gresult[$fgtabid]["id"][$i] = $id;

                    #------------------- Wiedervorlage --------------------------------
                    if($LINK[109] AND $single AND !$filter['report'][$gtabid]){
                        $gresult[$fgtabid]["REMINDER"][$i] = lmb_getReminder($fgtabid,$id);
                    }

                }
            }

            if($show_verkn){ // mark already joint in relation quicksearch
                $gresult[$gtabid]["verkn_id"][$i] = lmbdb_result($rs, "VERKN_ID");
                // multirelation
                $gresult[$gtabid]["verkn_keyid"][$i] = lmbdb_result($rs, "VERKN_KEYID");
                #$gresult[$gtabid]["origin_id"][$i] = lmbdb_result($rs, "HERK_ID"); // todo not used?
            }


            if($LINK[140] AND $gtab["linecolor"][$gtabid] AND !$onlyfield AND !$single){$gresult[$gtabid]["color"][$i] = lmbdb_result($rs, "LMB_GCOLOR");}

            # --- Sync Infos -----------
            if($gtab["datasync"][$gtabid] == 1){
                $gresult[$gtabid]["SYNC_ID"][$i] = lmbdb_result($rs, "LMB_SYNC_ID");
                $gresult[$gtabid]["SYNC_SLAVE"][$i] = lmbdb_result($rs, "LMB_SYNC_SLAVE");
            }

            # --- Versionierungs Infos -----------
            if($gtab["versioning"][$gtabid]){
                $gresult[$gtabid]["VID"][$i] = lmbdb_result($rs, "VID");
                $gresult[$gtabid]["VPID"][$i] = lmbdb_result($rs, "VPID");
                $gresult[$gtabid]["VACT"][$i] = lmbdb_result($rs, "VACT");
                $gresult[$gtabid]["VDESC"][$i] = lmbdb_result($rs, "VDESC");

                if($gtab["viewver"][$gtabid]){
                    if($single AND !$filter['report'][$gtabid] AND $gresult[$gtabid]["VPID"][$i]){
                        $sqlquery1 = "SELECT ID,VID FROM ".$gtab["table"][$gtabid]." WHERE VPID = ".parse_db_int($gresult[$gtabid]["VPID"][$i])." ORDER BY VID";
                        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$GLOBALS['action'],__FILE__,__LINE__);
                        if(!$rs1) {$commit = 1;}

                        while(lmbdb_fetch_row($rs1)){
                            $gresult[$gtabid]["V_ID"][lmbdb_result($rs1, "VID")] = lmbdb_result($rs1, "ID");
                        }
                        #arsort($gresult[$gtabid]["V_ID"]);
                        lmbdb_free_result($rs1);
                    }
                }
            }

            # --- multitenant -----------
            if($umgvar['multitenant'] AND $gtab['multitenant'][$gtabid]) {
                $gresult[$gtabid]["MID"][$i] = lmbdb_result($rs, "LMB_MID");
            }

            # --- Datensatz sperren bei Detaildatensatz -----------
            #if($gtab["lockable"][$gtabid] AND ($action == "gtab_change" OR $filter["alter"][$gtabid])){
            if($single AND $gtab["lockable"][$gtabid] AND !$filter['report'][$gtabid]){
                lock_data($gtabid,$id,$gresult); // todo
                #$action_ = lock_data($gtabid,$id,$gresult);
                // set action
                #if($single){$action = $action_;}
            }

            # ------- indicator ------
            if($gtab["indicator"][$gtabid] AND !defined('LMB_SYNC_PROC')){
                try {
                    $indicator = eval("return " . str_replace('return ', '', $gtab["indicator"][$gtabid]));
                } catch (ParseError $e) {
                    lmb_log::error($lang[56] . ' -> ' . $lang[1255]  . ': ' . $e->getMessage());
                }
                if($indicator === false){
                    $i--;
                }else{
                    $gresult[$gtabid]["res_viewcount"]++;
                }
            }else{
                $gresult[$gtabid]["res_viewcount"]++;
            }

            # ------- reminder ------
            if($filter["reminder"][$gtabid]){
                $gresult[$gtabid]["LMBREM_ID"][$i] = lmbdb_result($rs, "LMBREM_ID");
                $gresult[$gtabid]["LMBREM_FRIST"][$i] = lmbdb_result($rs, "LMBREM_FRIST");
                $gresult[$gtabid]["LMBREM_DESCR"][$i] = lmbdb_result($rs, "LMBREM_DESCR");
                $gresult[$gtabid]["LMBREM_USER"][$i] = lmbdb_result($rs, "LMBREM_USER");
                $gresult[$gtabid]["LMBREM_TABID"][$i] = lmbdb_result($rs, "LMBREM_TABID");
                $gresult[$gtabid]["LMBREM_DATID"][$i] = lmbdb_result($rs, "LMBREM_DATID");
                $gresult[$gtabid]["LMBREM_CONTENT"][$i] = lmbdb_result($rs, "LMBREM_CONTENT");
                $gresult[$gtabid]["LMBREM_WFLINST"][$i] = lmbdb_result($rs, "LMBREM_WFLINST");
            }

            $bzm++;
        }
    }

    if($rs){lmbdb_free_result($rs);}
    return $gresult;
}



/**
 * main tableresult function
 *
 * @param int $gtabid (table-id)
 * @param int $utyp
 * @param array $filter (filter params)
 * @param array $gsr (search params)
 * @param array $verkn
 * @param array $onlyfield ([gtabid][filedid])
 * @param int $single (ID)
 * @param array $extension
 * @param array $pointer
 * @param array $savequery
 * @param array $detail
 * @return array resultset
 */
function get_gresult($gtabid,$utyp=1,$filter=null,$gsr=null,$verkn=null,$onlyfield=null,$single=null,$extension=null,$pointer=null,$lmb_query=null,$detailmode=null){

    if($lmb_query){global $lmb_query;}

    if($lmb_query = get_sqlquery($gtabid,$utyp,$filter,$gsr,$verkn,$onlyfield,$single,$extension)) {
        if(!$detailmode) {
            return get_sqlresult($gtabid, $lmb_query, $verkn, $filter, $onlyfield, $single, $pointer, $utyp);
        }else{
            global $gfield;
            require_once(COREPATH . 'gtab/gtab_type_erg.lib');
            require_once(COREPATH . 'gtab/gtab_type.lib');

            $gresult = get_sqlresult($gtabid, $lmb_query, $verkn, $filter, $onlyfield, $single, $pointer, $utyp);
            foreach($gresult[$gtabid] as $fieldid => $res){
                if(!is_numeric($gfield[$gtabid]['funcid'][$fieldid])){continue;}
                $fname = 'cftyp_'.$gfield[$gtabid]['funcid'][$fieldid];
                if(!function_exists($fname) OR !$gresult[$gtabid]['id'][0]){continue;}
                foreach($gresult[$gtabid]['id'] as $key => $ID){
                    $gresult[$gtabid][$fieldid][$key] = $fname($key,$fieldid,$gtabid,$detailmode,$gresult);
                }
            }
            return $gresult;
        }
    }
}

function calc_numrows($gtabid,&$gresult,&$filter){
    global $session;
    global $exp_typ;
    global $umgvar;

    # Max. Anzahl Ergebnisse in resultcache;
    if($gresult[$gtabid]["res_count"] > $umgvar["resultspace"] AND !$filter["nolimit"][$gtabid]){
        $gresult[$gtabid]["max_count"] = $umgvar["resultspace"];
    }else{
        $gresult[$gtabid]["max_count"] = $gresult[$gtabid]["res_count"];
    }

    # ---- Max. Anzahl anzuzeigender Datens√§tze
    if(!$filter["anzahl"][$gtabid]){
        $filter["anzahl"][$gtabid] = $session["maxresult"];
    } elseif($exp_typ == 2 OR $filter["anzahl"][$gtabid] == "all"){
        $filter["anzahl"][$gtabid] = $gresult[$gtabid]["max_count"];
    }elseif($filter["anzahl"][$gtabid] > $gresult[$gtabid]["res_count"]){
        $filter["anzahl"][$gtabid] = $gresult[$gtabid]["res_count"];
    }
}


# ---------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------


/**
 * get relation md5tab name
 *
 * @param unknown $tabId
 * @param unknown $fieldName
 * @return mixed
 */
function getRelation($tabId,$fieldName){
    global $db;
    global $action;

    $sqlquery = "select MD5TAB from LMB_CONF_FIELDS where LMB_CONF_FIELDS.TAB_ID = $tabId AND LMB_CONF_FIELDS.FIELD_NAME = '$fieldName'";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);

    if(lmbdb_fetch_row($rs)) {
        return lmbdb_result($rs,"MD5TAB");
    }
}


/**
 * get whole resultset as textblock
 *
 * @param unknown $gtabid
 * @param unknown $gresult
 * @param string $separator
 * @return string
 */
function get_txtresult($gtabid,&$gresult,$separator=' ; ',$onlyfield=null){
    global $gfield;
    if (! $onlyfield) {
        $onlyfield = $gfield[$gtabid]["sort"];
    }

    if ($gresult[$gtabid]['id']) {
        foreach ($gresult[$gtabid]['id'] as $key => $value) {
            $line = array();

            foreach ($onlyfield as $fkey => $fvalue) {
                $fname = "cftyp_" . $gfield[$gtabid]['funcid'][$fvalue];
                if (function_exists($fname) and $gfield[$gtabid]['data_type'][$fvalue] != 22 and $gfield[$gtabid]['field_type'][$fvalue] != 14 and $gfield[$gtabid]['field_type'][$fvalue] != 15 and $gfield[$gtabid]['field_type'][$fvalue] < 100) {
                    $line[] = str_replace('\n', ' ', html_entity_decode($fname($key, $fvalue, $gtabid, 3, $gresult, 0), ENT_QUOTES, $GLOBALS["umgvar"]["charset"]));
                }
            }
            $row[] = implode($separator, $line);
        }
    }

    if($row){
        return implode("\n", $row);
    }
}

/**
 * show userrules
 *
 * @param $gtabid
 * @param $ID
 */
function show_userRules($gtabid,$ID){
	global $gtab;
	global $db;
	global $userdat;
	global $groupdat;
	global $farbschema;

    $output = '';
    
	$sqlquery = "SELECT LMB_RULES_DATASET.USERID,LMB_RULES_DATASET.GROUPID,LMB_RULES_DATASET.EDIT,LMB_RULES_DATASET.DEL,LMB_RULES_DATASET.EDITUSER FROM LMB_RULES_DATASET WHERE LMB_RULES_DATASET.TABID = $gtabid AND LMB_RULES_DATASET.DATID = $ID ORDER BY GROUPID,USERID";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}

	while(lmbdb_fetch_row($rs)) {
		$userid = lmbdb_result($rs,"USERID");
		$groupid = lmbdb_result($rs,"GROUPID");
		if(lmbdb_result($rs,"DEL")){$dp = "<i class=\"lmb-icon-cus lmb-page-delete-fancy\" title=\"delete\"></i>";}else{$dp = "";}
		if(lmbdb_result($rs,"EDIT")){$ep = "<i class=\"lmb-icon lmb-page-edit\" title=\"edit\"></i>";}else{$ep = "";}
		if($userid){
			$user[] = $userdat["bezeichnung"][$userid]." ".$ep."&nbsp;".$dp;
		}elseif($groupid){
			$groups[] = $groupdat["name"][$groupid]." ".$ep."&nbsp;".$dp;
		}
	}

	if($user){
        $output .= "<DIV style=\"background-color:".$farbschema["WEB11"]."\"><i class=\"lmb-icon lmb-user\" style=\"padding-left:10px;padding-right:10px;\"></i>".implode(" <span style=\"color:green;\">|</span> ",$user)."</DIV>";
	}
	if($groups){
        $output .= "<DIV style=\"background-color:".$farbschema["WEB11"]."\"><i class=\"lmb-icon lmb-group\" style=\"padding-left:10px;padding-right:10px;\"></i>".implode(" <span style=\"color:green;\">|</span> ",$groups)."</DIV>";
	}

    return $output;
}



#------------------- global ftyp functions --------------------------------

# PHP Argument
function ftyp_13($ID,&$gresult,$fieldid,$gtabid,$class,$style,$pos,$typ,$bzm=0) {
    global $session;
    global $userdat;
    global $gtab;
    global $gfield;
    global $db;


    if(!$ID){return;}
    if($style){$style = "STYLE=\"".$pos.$style."\"";}

    if($gfield[$gtabid]["argument"][$fieldid]){
        $arg = explode("#", $gfield[$gtabid]["argument"][$fieldid]);
        foreach($arg as $key => $value){
            if(lmb_substr($arg[$key],0,1) == '*'){
                $arg_fieldid = lmb_substr($value,1,30);
                # --- currency ----
                if($gfield[$gtabid]["data_type"][$arg_fieldid] == 30){
                    $arg[$key] = str_replace("\"","\\\"",$gresult[$gtabid][$arg_fieldid][$bzm]["V"]." ".$gresult[$gtabid][$arg_fieldid][$bzm]["C"]);
                    # --- date ----
                }elseif($gfield[$gtabid]["field_type"][$arg_fieldid] == 2){
                    $notime = $gfield[$gtabid]["datetime"][$arg_fieldid];
                    if($gfield[$gtabid]["data_type"][$arg_fieldid] == 40){$notime = 1;}
                    $arg[$key] = get_date($gresult[$gtabid][$arg_fieldid][$bzm],$notime);
                    # --- Systemfields Date ----
                }elseif($gfield[$gtabid]["field_type"][$arg_fieldid] == 15){
                    $arg[$key] = get_date($gresult[$gtabid][$gfield[$gtabid]["field_name"][$arg_fieldid]][$bzm],1);
                }else{
                    $arg[$key] = str_replace("\"","\\\"",$gresult[$gtabid][$arg_fieldid][$bzm]);
                }
                if(!$arg[$key] AND ($gfield[$gtabid]["field_type"][$arg_fieldid] == 5 OR $gfield[$gtabid]["field_type"][$arg_fieldid] == 17)){$arg[$key] = 0;}
            }
            $arg["result"] .= $arg[$key];
        }

        $arg["result"] = trim($arg["result"]);
        if($arg["result"] OR $arg["result"] == "0"){
            $arg_result = eval($arg["result"].";");
            if($arg_result === false){return;}
            $arg_result = trim($arg_result);
            /* ------- export ------- */
            if($csvexp){$csvexp_zeile .= str_replace("\n"," ",str_replace("\t"," ",$arg_result));}
        }

        /* ------- Eintrag in DB bei √Ñnderung ------- */
        if(!$gresult[$gtabid][$fieldid][$bzm] OR ($arg_result != $gresult[$gtabid][$fieldid][$bzm] AND !$gfield[$gtabid]["argument_edit"][$fieldid])){
            $gresult[$gtabid][$fieldid][$bzm] = $arg_result;

            # date
            if($gfield[$gtabid]["parse_type"][$fieldid] == 4){
                $arg_result = "'".convert_date($arg_result)."'";
                # integer
            }elseif($gfield[$gtabid]["parse_type"][$fieldid] == 1){
                $arg_result = parse_db_int($arg_result,$gfield[$gtabid]["size"][$fieldid]);
                # float
            }elseif($gfield[$gtabid]["parse_type"][$fieldid] == 6){
                $arg_result = parse_db_float($arg_result,$gfield[$gtabid]["size"][$fieldid]);
                # boolean
            }elseif($gfield[$gtabid]["parse_bool"][$fieldid] == 3){
                $arg_result = parse_db_bool($arg_result);
                # string
            }else{
                $arg_result = "'".parse_db_string($arg_result,$gfield[$gtabid]["size"][$fieldid])."'";
            }

            if($arg_result OR $arg_result == "0"){
                $sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$gfield[$gtabid]["field_name"][$fieldid]." = $arg_result WHERE ID = ".$ID;
                $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$GLOBALS['action'],__FILE__,__LINE__);
            }

            if($gfield[$gtabid]["nformat"][$fieldid]){
                $gresult[$gtabid][$fieldid][$bzm] = convert_NumberFormat($gresult[$gtabid][$fieldid][$bzm],$gfield[$gtabid]["nformat"][$fieldid]);
            }
        }
    }

    return $gresult[$gtabid][$fieldid][$bzm];

}

?>
