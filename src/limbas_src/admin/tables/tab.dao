<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




/* --- Versionierung -------------------------------------- */
function set_version($tabid,$tabname,$versioning){
	global $db;
	global $DBA;
	global $gtab;
	
	if($versioning == -1){$versioning = 0;}

	$sqlquery =  "UPDATE LMB_CONF_TABLES SET VERSIONING = $versioning WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}


    $odbc_column = dbf_5(array($DBA["DBSCHEMA"], $tabname, "VID"));
    if ($versioning AND !$odbc_column) {

        $new_['field'] = array('VID','VPID','VACT','VDESC');
		$new_['type'] = array(LMB_DBTYPE_SMALLINT,LMB_DBTYPE_FIXED.'(18)',LMB_DBTYPE_BOOLEAN,LMB_DBTYPE_VARCHAR.'(399)');
		$new_['default'] = array(1,null,LMB_DBDEF_TRUE,null);

        $sqlquery1 = dbq_29(array($GLOBALS['DBA']['DBSCHEMA'],$tabname,$new_['field'],$new_['type'],$new_['default']));
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }
    } elseif (!$versioning) {
        // not delete for DMS
        if ($tabid != $gtab["argresult_id"]["LDMS_FILES"] AND $tabid != $gtab["argresult_id"]["LDMS_META"]) {

            $drop_ = array('VID','VPID','VACT','VDESC');
            $sqlquery1 = dbq_22(array($tabname,$drop_));
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }
        }
    }

	if($versioning){
		$sqlquery1 =  "UPDATE $tabname SET VID = 1, VPID = ID, VACT = ".LMB_DBDEF_TRUE;
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
		
    	$sqlquery1 = dbq_9(array($DBA["DBSCHEMA"],$tabname,dbf_4('VACT'),LMB_DBDEF_TRUE));
    	$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}

}

/* --- DataSync -------------------------------------- */
function set_datasync($tabid,$tabname,$datasync){
	global $db;
	global $DBA;
	
    $datasync = trim($datasync);
	
    if(empty($datasync) || ($datasync != 1 && $datasync != 2)){$datasync = 0;}
    
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET DATASYNC = ".parse_db_int($datasync)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	
	$odbc_column = dbf_5(array($DBA["DBSCHEMA"],$tabname,"LMB_SYNC_ID"));
	if($datasync == 1 AND !$odbc_column) {
        $new_['field'] = array('LMB_SYNC_ID', 'LMB_SYNC_SLAVE');
        $new_['type'] = array(LMB_DBTYPE_FIXED . '(18)', LMB_DBTYPE_SMALLINT);
        $sqlquery1 = dbq_29(array($GLOBALS['DBA']['DBSCHEMA'], $tabname, $new_['field'], $new_['type']));
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {$commit = 1;}

        // index
        $indexname = lmb_getConstraintName('LMB_INDS',$tabname,'LMB_SYNC_ID');
        $sqlquery = dbq_4(array($DBA["DBSCHEMA"], $indexname, $tabname, 'LMB_SYNC_ID'));
        $rs1 = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);

	}elseif($datasync == 2 AND $odbc_column){
        $drop_ = array('LMB_SYNC_ID','LMB_SYNC_SLAVE');
        $sqlquery1 = dbq_22(array($tabname,$drop_));
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}elseif($datasync == 0 AND $odbc_column){
        $drop_ = array('LMB_SYNC_ID','LMB_SYNC_SLAVE');
        $sqlquery1 = dbq_22(array($tabname,$drop_));
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
		$sqlquery1 = "DELETE FROM LMB_SYNC_CONF WHERE TABID = ".parse_db_int($tabid);
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}

}

/* --- multitenant -------------------------------------- */
function set_multitenant($tabid,$tabname,$multitenant){
	global $db;
	global $DBA;
    global $umgvar;

    if ($multitenant == 1) {
        $multitenant = LMB_DBDEF_TRUE;
    } else {
        $multitenant = LMB_DBDEF_FALSE;
    }

    // check if is view
	$sqlquery =  "SELECT TYP FROM LMB_CONF_TABLES WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    if(lmbdb_result($rs, 'TYP') == 5){$isview = 1;}else{$isview = 0;}

	// check if field LMB_MID exists
	$odbc_column = dbf_5(array($DBA["DBSCHEMA"],$tabname,dbf_4('LMB_MID')));


    if($isview){
        if(!$odbc_column) {
            lmb_alert('LMB_MID does not exist in view! You need to add at least one multitenant ID');
            return false;
        }
    }else {

        if ($multitenant == LMB_DBDEF_TRUE AND !$odbc_column) {
            // use char based MID
            if ($umgvar['multitenant_length'] AND is_numeric($umgvar['multitenant_length'])) {
                #$fieldtype = LMB_DBTYPE_CHAR."(".$umgvar['multitenant_length'].")"; -  todo
                $fieldtype = LMB_DBTYPE_FIXED . "(" . $umgvar['multitenant_length'] . ")";
                // use numeric based MID
            } else {
                $fieldtype = LMB_DBTYPE_SMALLINT;
            }

            #$sqlquery1 =  "ALTER TABLE $tabname ".LMB_DBFUNC_ADD_COLUMN_FIRST." LMB_MID ".$fieldtype;
            $sqlquery1 = dbq_29(array($GLOBALS['DBA']['DBSCHEMA'], $tabname, 'LMB_MID', $fieldtype));
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }
        } elseif ($multitenant == LMB_DBDEF_FALSE AND $odbc_column) {
            #$sqlquery1 =  "ALTER TABLE $tabname ".LMB_DBFUNC_DROP_COLUMN_FIRST." LMB_MID";
            $sqlquery1 = dbq_22(array($tabname, 'LMB_MID'));
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }
        }
    }

    $sqlquery = "UPDATE LMB_CONF_TABLES SET MULTITENANT = $multitenant WHERE TAB_ID = $tabid";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    if (!$rs) {
        $commit = 1;
    }

}


function set_checksum($tabid,$tabname,$checksum){
    global $db;
    global $DBA;
    global $umgvar;

    $checksum = trim($checksum);
    if($checksum == 2){$checksum = 0;}
    
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET CHECKSUM = ".parse_db_bool($checksum)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	
	$odbc_column = dbf_5(array($DBA["DBSCHEMA"],$tabname,"LMB_CHECKSUM"));
	if($checksum == 1 AND !$odbc_column) {
        $new_['field'] = array('LMB_CHECKSUM');
        $new_['type'] = array(LMB_DBTYPE_VARCHAR . '(32)');
        $sqlquery1 = dbq_29(array($GLOBALS['DBA']['DBSCHEMA'], $tabname, $new_['field'], $new_['type']));
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {$commit = 1;}
	}elseif($checksum == 0 AND $odbc_column){
        $drop_ = array('LMB_CHECKSUM');
        $sqlquery1 = dbq_22(array($tabname,$drop_));
		$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}

}


# --- Transaktion START ------
lmb_StartTransaction(1);



// Tabelname
if($tabid) {
    $sqlquery = "SELECT TABELLE,TAB_GROUP FROM LMB_CONF_TABLES WHERE TAB_ID = $tabid";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    $tablename = lmbdb_result($rs, "TABELLE");
    $tabgroupid = lmbdb_result($rs, "TAB_GROUP");
}

/* ---------------------- Gruppen ------------------------ */
/* ------------------------------------------------------------ */

/* --- Gruppensortierung / Name ändern -------------------------------------- */
if(is_numeric($group_change)){
	
	if($gup) {
		lmb_sortConf('up',$sort_id,'LMB_CONF_GROUPS');
	}elseif($gdown) {
		lmb_sortConf('down',$sort_id,'LMB_CONF_GROUPS');
	}else{
		require_once(COREPATH . 'admin/setup/language.lib');

		$sqlquery = "SELECT NAME,BESCHREIBUNG FROM LMB_CONF_GROUPS WHERE ID = $group_change";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		$name_id = lmbdb_result($rs,"NAME");
		$desc_id = lmbdb_result($rs,"BESCHREIBUNG");

		/* --- Sprachtabelle -------- */
		$name = parse_db_string(${"group_name_".$group_change},40);
		$desc = parse_db_string(${"group_desc_".$group_change},60);

		lang_change(null,$name_id,$name,$session["language"],"_DEPEND");
		lang_change(null,$desc_id,$desc,$session["language"],"_DEPEND");
	}
}

# Untergruppe für Tabelle ändern
if(is_numeric($subgroup_change)){
	$sqlquery = "UPDATE LMB_CONF_GROUPS SET LEVEL = ".${"subgroup_".$subgroup_change}." WHERE ID = $subgroup_change";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

# Untergruppe für Tabelle ändern
if(is_numeric($icongroup_change)){
	$sqlquery = "UPDATE LMB_CONF_GROUPS SET ICON = '".parse_db_string(${"icongroup_".$icongroup_change},250)."' WHERE ID = $icongroup_change";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}




/* --- Gruppe anlegen -------------------------------------- */
if($group_name AND $group_add){
	add_tabgroup($group_name,$group_desc);
}

/* --- Gruppe löschen -------------------------------------- */
if($group_del){
	$GLOBALS["filestruct"]['admin'] = 1;
	if(!delete_tabgroup($group_del)){
	 	$commit = 1;
	}
}

/* --- Tabellen-Bezeichnung ändern -------------------------------------- */
if($tabid AND $desc){

	$sqlquery = "SELECT BESCHREIBUNG FROM LMB_CONF_TABLES WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$desc_id = lmbdb_result($rs,"BESCHREIBUNG");

	lang_change(null,$desc_id,trim($desc),$session["language"],"_DEPEND");
}


/* --- Tabellen-Name ändern -------------------------------------- */
if($tabid AND $tabname){
	lmb_renameTable($tabid,trim($tabname));
}


/* ---------------------- Tabellen ------------------------ */
/* ------------------------------------------------------------ */

/* --- Tabellen Hauptgruppe ändern -------------------------------------- */
$setmaingroup = trim($setmaingroup);
if($tabid AND is_numeric(trim($setmaingroup)) AND $setmaingroup > 0){
	$sqlquery = "UPDATE LMB_CONF_TABLES SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$sqlquery = "UPDATE LMB_CONF_FIELDS SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$sqlquery = "UPDATE LMB_RULES_TABLES SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}


if($up AND $fieldid > 1) {
	lmb_sortConf('up',$fieldid,'LMB_CONF_TABLES','SORT',"TAB_GROUP = $tab_group");
}

if($down) {
	lmb_sortConf('down',$fieldid,'LMB_CONF_TABLES','SORT',"TAB_GROUP = $tab_group");
}

/* --- Lockable -------------------------------------- */
if($lockable) {
        if($lockable == 1){$lockable = LMB_DBDEF_TRUE;}else{$lockable = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LOCKABLE = $lockable WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Lockable -------------------------------------- */
if($ajaxpost) {
        if($ajaxpost == 1){$ajaxpost = LMB_DBDEF_TRUE;}else{$ajaxpost = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET AJAXPOST = $ajaxpost WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Validate -------------------------------------- */
if($validate) {
        if($validate == 1){$validate = LMB_DBDEF_TRUE;}else{$validate = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET VALIDATE = $validate WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Logging -------------------------------------- */
if($logging) {
        if($logging == 1){$logging = LMB_DBDEF_TRUE;}else{$logging = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LOGGING = $logging WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- reserveid -------------------------------------- */
if($reserveid) {
        if($reserveid == 1){$reserveid = LMB_DBDEF_TRUE;}else{$reserveid = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET RESERVEID = $reserveid WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Zeilenfarbe -------------------------------------- */
if($linecolor) {
        if($linecolor == 1){$linecolor = LMB_DBDEF_TRUE;}else{$linecolor = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LINECOLOR = $linecolor WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- User rechte -------------------------------------- */
if($userrules) {
	if($userrules == 1){$userrules = LMB_DBDEF_TRUE;}else{$userrules = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET USERRULES = $userrules WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	if($userrules == "TRUE"){
		add_erstuserRules($tabid);
	}else{
		del_erstuserRules($tabid,1);
	}
}

/* --- Versionierung -------------------------------------- */
if($versioning) {
	$sqlquery =  "SELECT TAB_ID,TABELLE FROM LMB_CONF_TABLES WHERE VERKN = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	while(lmbdb_fetch_row($rs)) {
		set_version(lmbdb_result($rs,"TAB_ID"),lmbdb_result($rs,"TABELLE"),trim($versioning));
	}
}

/* --- validity -------------------------------------- */
if($validity OR $validity_version) {

    if($validity_version == 1){
        $validity = 1; $validity_ = 2;
    }elseif($validity_version == 2){
        $validity = 3; $validity_ = 1;
    }

    #if($validity == 1){
        #$validity = LMB_DBDEF_TRUE;
    if($validity == 1) {

        if(!$validity_){$validity_ = 1;}

        /*
        // add datetime fields
        if (!dbf_5(array($DBA['DBSCHEMA'], $tablename, 'LMB_VALIDFROM'))) {
            $sqlquery = dbq_29(array($DBA['DBSCHEMA'], $tablename, 'LMB_VALIDFROM', LMB_DBTYPE_TIMESTAMP));
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
        }
        if (!dbf_5(array($DBA['DBSCHEMA'], $tablename, 'LMB_VALIDTO'))) {
            $sqlquery = dbq_29(array($DBA['DBSCHEMA'], $tablename, 'LMB_VALIDTO', LMB_DBTYPE_TIMESTAMP));
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
        }
        */

        // add datetime fields
        if(!$validity_version) {
            $nfield = extended_fields_validyty();
            add_extended_fields($nfield, $tabid, 1);
        }

    }elseif($validity == 2){

        $validity_ = 'NULL';
        #$validity = LMB_DBDEF_FALSE;

        /*
        // drop datetime fields
        if(dbf_5(array($DBA['DBSCHEMA'],$tablename,'LMB_VALIDFROM'))){
            $sqlquery = dbq_22(array($tablename,'LMB_VALIDFROM'));
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
            if(!$rs) {$commit = 1;}
        }
        if(dbf_5(array($DBA['DBSCHEMA'],$tablename,'LMB_VALIDTO'))){
            $sqlquery = dbq_22(array($tablename,'LMB_VALIDTO'));
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
            if(!$rs) {$commit = 1;}
        }
        */

        // drop datetime fields
        $sqlquery = "SELECT FIELD_ID FROM LMB_CONF_FIELDS WHERE TAB_ID = $tabid AND FIELD_TYPE = 24";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        while(lmbdb_fetch_row($rs)) {
            delete_field_table($tabid, lmbdb_result($rs, 'FIELD_ID'), false);
        }

    }

    if(!$commit) {
        $sqlquery = "UPDATE LMB_CONF_TABLES SET VALIDITY = $validity_ WHERE TAB_ID = $tabid";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
    }
}

/* --- datasync -------------------------------------- */
if($datasync) {
    set_datasync($tabid,$tablename,$datasync);
}

/* --- CHECKSUM -------------------------------------- */
if($checksum) {
    set_checksum($tabid,$tablename,$checksum);
}


/* --- datasync -------------------------------------- */
if($multitenant AND $tabid) {
    set_multitenant($tabid,$tablename,$multitenant);
}

/* --- ErgenisAnzahl -------------------------------------- */
if($numrowcalc) {
	$numrowcalc = trim($numrowcalc);
	if($numrowcalc == -1){$numrowcalc = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET NUMROWCALC = ".parse_db_int($numrowcalc,1)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- detailform -------------------------------------- */
if($detailform) {
	$detailform = trim($detailform);
	if($detailform == -1){$custmenu = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET DETAILFORM = ".parse_db_int($detailform)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- detailform open in -------------------------------------- */
if($detailform_opener) {
	$detailform_opener = trim($detailform_opener);
	if($detailform_opener == -1){$detailform_opener = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET DETAILFORM_OPENER = ".parse_db_int($detailform_opener)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- detailform open as -------------------------------------- */
if($detailform_viewmode) {
	$detailform_opener = trim($detailform_viewmode);
	if($detailform_viewmode == -1){$detailform_viewmode = 0;}else{$detailform_viewmode = $detailform_viewmode;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET DETAILFORM_VIEWMODE = ".parse_db_int($detailform_viewmode,1)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- custmenu -------------------------------------- */
if($custmenu) {
	$custmenu = trim($custmenu);
	if($custmenu == -1){$custmenu = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET CUSTMENU = ".parse_db_int($custmenu)." WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- Gruppierung -------------------------------------- */
if($groupable) {
	if($groupable == 1){$groupable = 1;}else{$groupable = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET GROUPABLE = $groupable WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- Gruppierung -------------------------------------- */
if($checkboxselect) {
	if($checkboxselect == 1){$checkboxselect = LMB_DBDEF_TRUE;}else{$checkboxselect = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET CHECKBOXSELECT = $checkboxselect WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- RECURSIV_DELETE -------------------------------------- */
if($recursiv_delete) {
	if($recursiv_delete == 1){$recursiv_delete = LMB_DBDEF_TRUE;}else{$recursiv_delete = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET RECURSIV_DELETE = $recursiv_delete WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- RECURSIV_ARCHIVE -------------------------------------- */
if($recursiv_archive) {
	if($recursiv_archive == 1){$recursiv_archive = LMB_DBDEF_TRUE;}else{$recursiv_archive = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET RECURSIV_ARCHIVE = $recursiv_archive WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- Trigger -------------------------------------- */
if($trigger) {
	$sqlquery = "UPDATE LMB_CONF_TABLES SET LMTRIGGER = '".trim(parse_db_string($trigger,20))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- global filter -------------------------------------- */
if($globalfilter) {
	$sqlquery = "UPDATE LMB_CONF_TABLES SET GLOBALFILTER = '".trim(parse_db_string($globalfilter,250))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- marcolor -------------------------------------- */
if($markcolor AND $tabid) {
	if($markcolor == "transparent"){$markcolor = "";}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET MARKCOLOR = '".parse_db_string($markcolor,7)."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- indicator -------------------------------------- */
if($indicator AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET INDICATOR = '".trim(parse_db_string($indicator,250))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- orderby -------------------------------------- */
if($orderby AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET ORDERBY = '".trim(parse_db_string($orderby,250))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- keyfield -------------------------------------- */
if($keyfield AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET KEYFIELD = '".trim(parse_db_string($keyfield,30))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}


/* --- params1 -------------------------------------- */
if($params1 AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET PARAMS1 = '".parse_db_int(trim($params1),5)."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- params2 -------------------------------------- */
if($params2 AND $tabid) {
	if($param2){$param2 = serialize($param2);}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET PARAMS2 = '".parse_db_string(trim($param2))."' WHERE TAB_ID = $tabid";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}





/* --- temp refresh -------------------------------------- */
if($tablesync AND $tabid) {
	require_once(COREPATH . 'admin/tools/multiselect_refresh.lib');
	multiselectRefreshCount($tabid);
    relationRefreshCount($tabid);
    usergroupRefreshCount($tabid);
}

/* --- sequence refresh -------------------------------------- */
if($tablesequence AND $tabid) {
	lmb_rebuildSequences($tablename, 'ID');
}

/* --- checksum refresh -------------------------------------- */
if($rebuild_checksum AND $tabid) {
	if(!lmb_calculateChecksum($tabid)){
        $rebuild_checksum = null;
    }
}

/* --- Tabelle kopieren -------------------------------------- */
if($copy AND $add AND $gtable) {
	$commit = lmb_copy_table($copy,$gtable,$tab_group,$beschreibung,$add_permission);
	$new_gtabid = $new_gtabid[0];
/* --- Tabelle hinzufügen -------------------------------------- */
}elseif($add AND $gtable) {
	if(!$new_gtabid = add_tab($gtable,$tab_group,$beschreibung,$verkn,$typ,$add_permission,'default',$viewtyp,$use_serial)){$commit =1;}
	$new_gtabid = $new_gtabid[0];
	#sort_tables($tab_group);
}


/* --- Tabelle löschen -------------------------------------- */
if($del AND $gtable) {
	$GLOBALS["filestruct"]["admin"] = 1;
	if(!delete_tab($tabid,$drop_physical)){
	 	$commit = 1;
	}
	#sort_tables($tab_group);
}


# --- Transaktion ENDE --------
lmb_EndTransaction(!$commit);


if(!$import){
	/* --- Groups and Tables --------------------------------------------- */
    $sqlquery = "
        SELECT DISTINCT
            LMB_CONF_GROUPS.ID AS GROUPID, 
            LMB_CONF_GROUPS.NAME, 
            LMB_CONF_GROUPS.BESCHREIBUNG AS GROUPDESC, 
            LMB_CONF_GROUPS.SORT AS GROUPSORT, 
            LMB_CONF_GROUPS.SORT, 
            LMB_CONF_GROUPS.LEVEL, 
            LMB_CONF_GROUPS.ICON,
            LMB_CONF_TABLES.ID AS TABLEID,
            LMB_CONF_TABLES.TAB_ID,
            LMB_CONF_TABLES.SORT AS TABLESORT,
            LMB_CONF_TABLES.SORT,
            LMB_CONF_TABLES.TABELLE,
            LMB_CONF_TABLES.BESCHREIBUNG AS TABLEDESC,
            LMB_CONF_TABLES.LOCKABLE,
            LMB_CONF_TABLES.GROUPABLE,
            LMB_CONF_TABLES.CHECKBOXSELECT,
            LMB_CONF_TABLES.MARKCOLOR,
            LMB_CONF_TABLES.LINECOLOR,
            LMB_CONF_TABLES.USERRULES,
            LMB_CONF_TABLES.LOGGING,
            LMB_CONF_TABLES.VERSIONING,
            LMB_CONF_TABLES.MULTITENANT,
            LMB_CONF_TABLES.TYP,
            LMB_CONF_TABLES.VERKN,
            LMB_CONF_TABLES.LMTRIGGER,
            LMB_CONF_TABLES.GLOBALFILTER,
            LMB_CONF_TABLES.INDICATOR,
            LMB_CONF_TABLES.ORDERBY,
            LMB_CONF_TABLES.AJAXPOST,
            LMB_CONF_TABLES.VALIDATE,
            LMB_CONF_TABLES.RECURSIV_DELETE,
            LMB_CONF_TABLES.RECURSIV_ARCHIVE,
            LMB_CONF_TABLES.NUMROWCALC,
            LMB_CONF_TABLES.DETAILFORM,
            LMB_CONF_TABLES.DETAILFORM_OPENER,
            LMB_CONF_TABLES.DETAILFORM_VIEWMODE,
            LMB_CONF_TABLES.CUSTMENU,
            LMB_CONF_TABLES.RESERVEID,
            LMB_CONF_TABLES.DATASYNC,
            LMB_CONF_TABLES.CHECKSUM,
            LMB_CONF_TABLES.VALIDITY,
            LMB_CONF_TABLES.PARAMS1,
            LMB_CONF_TABLES.PARAMS2,
			LMB_CONF_VIEWS.VIEWTYPE,
			LMB_CONF_TABLES.KEYFIELD,
			TABLES2.BESCHREIBUNG AS TABLE2DESC
        FROM LMB_CONF_GROUPS 
        LEFT JOIN LMB_CONF_TABLES ON (LMB_CONF_GROUPS.ID = LMB_CONF_TABLES.TAB_GROUP)
		LEFT JOIN LMB_CONF_VIEWS ON (LMB_CONF_VIEWS.ID = LMB_CONF_TABLES.ID)
		LEFT JOIN LMB_CONF_TABLES AS TABLES2 ON (TABLES2.TAB_ID = LMB_CONF_TABLES.VERKN)
        ORDER BY LMB_CONF_GROUPS.SORT, LMB_CONF_TABLES.SORT";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    unset($tabgroup_);
    $lastTabGroupId = -1;
    $tabIndex = 1;
    while(lmbdb_fetch_row($rs)) {

        # properties of group (only set on the first output of the group)
        $tabgroupid = lmbdb_result($rs, 'GROUPID');
        if ($tabgroupid != $lastTabGroupId) {
            $lastTabGroupId = $tabgroupid;
            $tabIndex = 1;
            $tabgroup_['id'][$tabgroupid] = lmbdb_result($rs, 'GROUPID');
            $tabgroup_['name'][$tabgroupid] = $lang[lmbdb_result($rs, 'NAME')];
            $tabgroup_['beschreibung'][$tabgroupid] = $lang[lmbdb_result($rs, 'GROUPDESC')];
            $tabgroup_['sort'][$tabgroupid] = lmbdb_result($rs, 'GROUPSORT');
            $tabgroup_['level'][$tabgroupid] = lmbdb_result($rs, 'LEVEL');
            $tabgroup_['icon'][$tabgroupid] = lmbdb_result($rs, 'ICON');
            $tabgroup_['systemtab'][$tabgroupid] = 0;
            $tabgroup_['tabellen'][$tabgroupid] = 0;
        }

        # properties of table
        if (lmbdb_result($rs, 'TABLEID')) {
            $result_gtab[$tabgroupid]['ID'][$tabIndex] = lmbdb_result($rs, 'TABLEID');
            $result_gtab[$tabgroupid]['id'][$tabIndex] = lmbdb_result($rs, 'TAB_ID');
            $result_gtab[$tabgroupid]['sort'][$tabIndex] = lmbdb_result($rs, 'TABLESORT');
            $result_gtab[$tabgroupid]['tabelle'][$tabIndex] = lmbdb_result($rs, 'TABELLE');
            $result_gtab[$tabgroupid]['beschreibung'][$tabIndex] = $lang[lmbdb_result($rs, 'TABLEDESC')];
            $result_gtab[$tabgroupid]['lockable'][$tabIndex] = lmbdb_result($rs, 'LOCKABLE');
            $result_gtab[$tabgroupid]['groupable'][$tabIndex] = lmbdb_result($rs, 'GROUPABLE');
            $result_gtab[$tabgroupid]['checkboxselect'][$tabIndex] = lmbdb_result($rs, 'CHECKBOXSELECT');
            $result_gtab[$tabgroupid]['markcolor'][$tabIndex] = lmbdb_result($rs, 'MARKCOLOR');
            $result_gtab[$tabgroupid]['linecolor'][$tabIndex] = lmbdb_result($rs, 'LINECOLOR');
            $result_gtab[$tabgroupid]['userrules'][$tabIndex] = lmbdb_result($rs, 'USERRULES');
            $result_gtab[$tabgroupid]['logging'][$tabIndex] = lmbdb_result($rs, 'LOGGING');
            $result_gtab[$tabgroupid]['versioning'][$tabIndex] = lmbdb_result($rs, 'VERSIONING');
            $result_gtab[$tabgroupid]['multitenant'][$tabIndex] = lmbdb_result($rs, 'MULTITENANT');
            $result_gtab[$tabgroupid]['typ'][$tabIndex] = lmbdb_result($rs, 'TYP');
            $result_gtab[$tabgroupid]['verknid'][$tabIndex] = lmbdb_result($rs, 'VERKN');
            $result_gtab[$tabgroupid]['trigger'][$tabIndex] = explode(',', lmbdb_result($rs, 'LMTRIGGER'));
            $result_gtab[$tabgroupid]['globalfilter'][$tabIndex] = explode(',', lmbdb_result($rs, 'GLOBALFILTER'));
            $result_gtab[$tabgroupid]['indicator'][$tabIndex] = lmbdb_result($rs, 'INDICATOR');
            $result_gtab[$tabgroupid]['orderby'][$tabIndex] = lmbdb_result($rs, 'ORDERBY');
            $result_gtab[$tabgroupid]['ajaxpost'][$tabIndex] = lmbdb_result($rs, 'AJAXPOST');
            $result_gtab[$tabgroupid]['numrowcalc'][$tabIndex] = lmbdb_result($rs, 'NUMROWCALC');
            $result_gtab[$tabgroupid]['custmenu'][$tabIndex] = lmbdb_result($rs, 'CUSTMENU');
            $result_gtab[$tabgroupid]['detailform'][$tabIndex] = lmbdb_result($rs, 'DETAILFORM');
            $result_gtab[$tabgroupid]['detailform_opener'][$tabIndex] = lmbdb_result($rs, 'DETAILFORM_OPENER');
            $result_gtab[$tabgroupid]['detailform_viewmode'][$tabIndex] = lmbdb_result($rs, 'DETAILFORM_VIEWMODE');
            $result_gtab[$tabgroupid]['reserveid'][$tabIndex] = lmbdb_result($rs, 'RESERVEID');
            $result_gtab[$tabgroupid]['argresult'][lmbdb_result($rs, 'TAB_ID')] = $tabIndex;
            $result_gtab[$tabgroupid]['maingroup'][$tabIndex] = $tabgroupid;
            $result_gtab[$tabgroupid]['datasync'][$tabIndex] = lmbdb_result($rs, 'DATASYNC');
            $result_gtab[$tabgroupid]['checksum'][$tabIndex] = lmbdb_result($rs, 'CHECKSUM');
            $result_gtab[$tabgroupid]['params1'][$tabIndex] = lmbdb_result($rs, 'PARAMS1');
            $result_gtab[$tabgroupid]['params2'][$tabIndex] = unserialize(lmbdb_result($rs, 'PARAMS2'));
            $result_gtab[$tabgroupid]['keyfield'][$tabIndex] = lmbdb_result($rs, 'KEYFIELD');
            $result_gtab[$tabgroupid]['validity'][$tabIndex] = lmbdb_result($rs, 'VALIDITY');
            $result_gtab[$tabgroupid]['validate'][$tabIndex] = lmbdb_result($rs, 'VALIDATE');
            $result_gtab[$tabgroupid]['recursiv_delete'][$tabIndex] = lmbdb_result($rs, 'RECURSIV_DELETE');
            $result_gtab[$tabgroupid]['recursiv_archive'][$tabIndex] = lmbdb_result($rs, 'RECURSIV_ARCHIVE');

            # count tables per group
            $tabgroup_['tabellen'][$tabgroupid]++;

            # check if contains system tables
            $tableName = lmbdb_result($rs, 'TABELLE');
            if ($tableName == 'LDMS_FILES' OR $tableName == 'LDMS_META') {
                $tabgroup_['systemtab'][$tabgroupid] = 1;
            }

            if(lmbdb_result($rs, 'VERKN')){
                $result_gtab[$tabgroupid]['verkn'][$tabIndex] = $lang[lmbdb_result($rs, 'TABLE2DESC')];
            }

            if(lmbdb_result($rs, 'TYP') == 5){
                $result_gtab[$tabgroupid]['viewtype'][$tabIndex] = lmbdb_result($rs, 'VIEWTYPE');
            }

            if(lmbdb_result($rs,'FIELDSID') > 0) {
                $result_gtab[$tabgroupid]['sverkn'][$tabIndex] = 1;
            }

            $sqlquery1 = "SELECT COUNT(*) AS ANZAHL FROM LMB_CONF_FIELDS WHERE TAB_GROUP = $tabgroupid AND TAB_ID = ".$result_gtab[$tabgroupid]['id'][$tabIndex];
            $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
            $result_gtab[$tabgroupid]['num_gtab'][$tabIndex] = lmbdb_result($rs1, 'ANZAHL');

            $tabIndex++;
        }
    }
}

// finds the parents of the tabgroup with index $groupIndex
// returns an array, where a 1 at index i means, that tabgroup with id i is a parent
function getTabgroupParents($groupIndex) {
    global $tabgroup;
    
    $parents = array();
    $currentIndex = $groupIndex;
    $visited = array();
    
    while($tabgroup['level'][$currentIndex] != 0) {
        // prevent infinite recursion
        if($visited[$currentIndex]) {
            error_log('infinite recursion in tabgroup hierarchy!');
            return $tabgroup['id'];
        }
        
        // set current tabgroup as visited
        $visited[$currentIndex] = 1;
        
        // set parent tabgroup as next current and save as parent
        $currentIndex = $tabgroup['level'][$currentIndex];
        $parents[$currentIndex] = 1;        
    }
    
    return $parents;
}

?>
