<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




require_once(COREPATH . 'admin/tools/jobs_ext.lib');
$starttime = check_timeout($umgvar["indize_timeout"]);

# Zeitlimit
if($umgvar["indize_timeout"]){
	set_time_limit(($umgvar["indize_timeout"]*60) + 3600);
}

/**
* Removes non-alphanumeric digits from given value according to limbas settings
* @param string value word to check
* @return string|false if word is invalid
*/
function feasible_val($value){
    global $umgvar;

	if($umgvar["indize_clean"]){
		$value = preg_replace("/^[^[:alnum:]]{1,}|[^[:alnum:]]{1,}$/u","",$value);
	}

	if(lmb_strlen($value) < $umgvar["indize_length"]){
		return false;
	}
		
	if(!$umgvar["indize_cs"]){
		$value = lmb_strtolower($value);
	}

	$len = lmb_strlen($value);
	if($len < $umgvar["indize_length"] OR !$umgvar["indize_feasible"]){return false;}
	$nonalpha = preg_match_all("/[^[:alnum:]]/",$value,$out);
	if(!$nonalpha){return $value;}
	$alphadiff = (($nonalpha*100)/$len);
	if($alphadiff > $umgvar["indize_feasible"]){
	    return false;
	}else{
		return $value;
	}
}


/**
 * Returns information about the specified field
 * @param int $tabid
 * @param int $fieldid
 * @return array = [tabid, fieldid, tabname, fieldname, datatype, fieldtype]
 */
function table_infos($tabid,$fieldid){
	global $db;

	$indi["tabid"] = $tabid;
	$indi["fieldid"] = $fieldid;

	# -------- Tabellenname --------
	$sqlquery = "SELECT TABELLE FROM LMB_CONF_TABLES WHERE TAB_ID = ".$indi['tabid'];
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$indi['tabname'] = lmbdb_result($rs,"TABELLE");

	# -------- Feldinformationen --------
	$sqlquery = "SELECT DISTINCT LMB_FIELD_TYPES.DATA_TYPE,LMB_FIELD_TYPES.FIELD_TYPE,LMB_CONF_FIELDS.FIELD_NAME FROM LMB_FIELD_TYPES,LMB_CONF_FIELDS WHERE LMB_CONF_FIELDS.FIELD_ID = ".$indi['fieldid']." AND LMB_CONF_FIELDS.TAB_ID = ".$indi['tabid']." AND LMB_CONF_FIELDS.DATA_TYPE = LMB_FIELD_TYPES.DATA_TYPE";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$indi["fieldname"] = lmbdb_result($rs,"FIELD_NAME");
	$indi["datatype"] = lmbdb_result($rs,"DATA_TYPE");
	$indi["fieldtype"] = lmbdb_result($rs,"FIELD_TYPE");

	return $indi;
}

/**
 * Fetches data from field and starts indexing
 *
 * @param array indi Array aus table_infos(): Specifies which field to index
 * @return array|false indi on success or false on failure
 */
function prepare_memo_indize($indi){
	global $db;
	global $gtab;
	global $gfield;
	global $umgvar;

	$tabid = $indi["tabid"];
	$fieldid = $indi["fieldid"];

	$sqlquery = "SELECT COUNT(*) AS ANZAHL FROM ".$indi["tabname"]." WHERE IND_".$indi["fieldid"]." = ".LMB_DBDEF_FALSE." AND DEL = ".LMB_DBDEF_FALSE;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$jobsum = lmbdb_result($rs,"ANZAHL");

	# --- Status ----
	$stat_name = "tab_".$tabid."_".$fieldid;
	if (!$GLOBALS['cronjob']) {createProgressBar($stat_name, "Databased Memo: {$gtab['desc'][$tabid]} ({$gfield[$tabid]['spelling'][$fieldid]})");}

	$sqlquery = "SELECT ID,{$indi['fieldname']} FROM ".$indi["tabname"]." WHERE IND_".$indi["fieldid"]." = ".LMB_DBDEF_FALSE." AND DEL = ".LMB_DBDEF_FALSE." ORDER BY ID";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$bzm = 1;
	while(lmbdb_fetch_row($rs)) {

        $indi["meta"] = 0;
        $indi["sid"] = 1;
        $indi["fileid"] = 0;
        $indi["datid"] = lmbdb_result($rs,"ID");
        $indi["typ"] = "field";

	    if ($umgvar['postgres_use_fulltextsearch']) {
 	        indize_create_postgres($indi);
        } else {
            $indi["NEXTID_D"] = next_db_id("LMB_INDIZE_D");
            $indi["NEXTID_DS"] = next_db_id("LMB_INDIZE_DS");
            $indi["NEXTID_F"] = next_db_id("LMB_INDIZE_F");
            $indi["NEXTID_FS"] = next_db_id("LMB_INDIZE_FS");
            $indi["NEXTID_W"] = next_db_id("LMB_INDIZE_W");

            $blob = explode(" ",str_replace(array("\t","\n")," ",strip_tags(lmbdb_result($rs,$indi["fieldname"]))));
            if($blob){
                # --- Indizierung groß ----
                if(!indize_create($blob,$indi)){$commit = 1;}
                # --- Indizierung klein ----
                if(!indize_create_s($indi)){$commit = 1;}

                $sqlquery1 = "UPDATE ".$indi["tabname"]." SET IND_".$indi["fieldid"]." = ".LMB_DBDEF_TRUE.",INDD_".$indi["fieldid"]." = ".LMB_DBDEF_TIMESTAMP." WHERE ID = ".lmbdb_result($rs,"ID");
                $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
                if(!$rs1) {$commit = 1;}
                $indi["jnumfs"]++;
            }
        }

		if(!$umgvar["IS_CRON"]){updateProgressBar($stat_name, $bzm, $jobsum);}
		$indi["words"] = null;
		$bzm++;

		# Zeitlimit
		if($GLOBALS["timeout"] = check_timeout($umgvar["indize_timeout"])){
			echo "<span style=\"color:red\"> Maximum execution time of ".$umgvar["indize_timeout"]." minutes exceeded! process finished!</span><br>";
			lmb_loghandle("indize.log","Maximum execution time exceeded");
			return $indi;
		}
	}
    if(!$umgvar["IS_CRON"]){finishProgressBar($stat_name, $jobsum);}
    if($commit){return false;}else{return $indi;}
}

/**
 * Reads files from given folder and starts indexing
 * @param $level int folder ID
 * @return bool
 */
function prepare_filelevel_indize($level){
	global $db;
	global $umgvar;

    $indi = array();

	# folder name
	$sqlquery = "SELECT NAME FROM LDMS_STRUCTURE WHERE ID = $level";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$folderName = lmbdb_result($rs,"NAME");

	# file count
	$sqlquery = "SELECT COUNT(*) AS ANZAHL FROM LDMS_FILES,LMB_MIMETYPES WHERE LDMS_FILES.LEVEL = $level AND LDMS_FILES.MIMETYPE = LMB_MIMETYPES.ID AND IND = ".LMB_DBDEF_FALSE." AND DEL = ".LMB_DBDEF_FALSE;
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$fileCount = lmbdb_result($rs,"ANZAHL");

	# print status
	$stat_name = "file_".$level;
	if (!$GLOBALS['cronjob']) {createProgressBar($stat_name, $folderName);}

	# get files
	if($umgvar['indize_header']){$indw = "(IND = ".LMB_DBDEF_FALSE." OR INDM = ".LMB_DBDEF_FALSE.")";}else{$indw = "IND = ".LMB_DBDEF_FALSE;}
	$mttfilter = set_mttfilter()['where'];
	$sqlquery = "SELECT DISTINCT LDMS_FILES.ID,LDMS_FILES.LEVEL,LDMS_FILES.NAME,LDMS_FILES.IND,LDMS_FILES.INDM,LDMS_FILES.SECNAME,LMB_MIMETYPES.MIMETYPE,LMB_MIMETYPES.EXT FROM LDMS_FILES,LMB_MIMETYPES WHERE LDMS_FILES.LEVEL = $level AND LDMS_FILES.MIMETYPE = LMB_MIMETYPES.ID AND DEL = ".LMB_DBDEF_FALSE." AND $indw $mttfilter";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$bzm = 1;
	while(lmbdb_fetch_row($rs)) {

		# status
        if (!$umgvar['IS_CRON']) {updateProgressBar($stat_name, $bzm - 1, $fileCount, $folderName . ': ' . lmbdb_result($rs, 'NAME'));}

		$indi["cacheId"] = null;
		$indi["words"] = null;
		$indi["w_meta"] = null;
		$indi["meta"] = 0;
		$indi["sid"] = 1;
		$indi["fileid"] = lmbdb_result($rs,"ID");
		$indi["typ"] = "file";
		$zeit_main = gettime();
		$ext = lmbdb_result($rs,"EXT");

        # delete old index
        del_file_index($indi["fileid"]);

		# Datei-Inhalt
		if(($umgvar['indize_filetype'][0] == 1 OR in_array($ext,$umgvar['indize_filetype']))
            AND $ctt = convert_to_text(lmbdb_result($rs,"SECNAME"),$ext,lmbdb_result($rs,"MIMETYPE"),lmbdb_result($rs, "ID"),1,0,1,lmbdb_result($rs, "LEVEL"),lmbdb_result($rs, "LMB_MID"))) {

		    if ($umgvar['postgres_use_fulltextsearch']) {
		        #$resultpath = TEMPPATH . 'txt/'. lmbdb_result($rs, "SECNAME") . ".txt";
		        $resultpath = lmb_getFilePath($indi["fileid"],$level, lmbdb_result($rs, "SECNAME"),'txt',lmbdb_result($rs, "LMB_MID"),3);
                $text = file_get_contents($resultpath);
                indize_create_postgres($indi, $text);
            } else {
                $indi["NEXTID_D"] = next_db_id("LMB_INDIZE_D");
                $indi["NEXTID_DS"] = next_db_id("LMB_INDIZE_DS");
                $indi["NEXTID_F"] = next_db_id("LMB_INDIZE_F");
                $indi["NEXTID_FS"] = next_db_id("LMB_INDIZE_FS");
                $indi["NEXTID_W"] = next_db_id("LMB_INDIZE_W");

                # Nur Metadaten indizieren
                if (lmbdb_result($rs, "IND") AND !lmbdb_result($rs, "INDM")) {
                    # File-Header
                    if ($meta = getmeta_from_db(lmbdb_result($rs, "ID"), 1)) {
                        $sqlquery1 = "SELECT MAX(SID) AS NEXTID FROM LMB_INDIZE_F WHERE FID = " . $indi["fileid"];
                        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, null, __FILE__, __LINE__);
                        if (!$rs1) {$commit = 1;}
                        $indi["sid"] = lmbdb_result($rs1, "NEXTID") + 1;

                        $indi["meta"] = 1;
                        foreach ($meta as $key => $val) {
                            # --- Indizierung groß ----
                            $blob = str_replace("meta: ", "", strip_tags(trim($val)));
                            $blob = explode(" ", str_replace("\t", " ", $blob));
                            if (!indize_create($blob, $indi)) {$commit = 1;}
                        }
                        # --- Indizierung klein ----
                        if (!indize_create_s($indi)) {$commit = 1;}
                    }
                    # Inhalt und Metadaten indizieren
                } else {
                    # Temporärer TXT Pfad
                    #$resultpath = TEMPPATH . 'txt/' . lmbdb_result($rs, "SECNAME") . ".txt";
                    $resultpath = lmb_getFilePath($indi["fileid"],$level, lmbdb_result($rs, "SECNAME"),'txt',lmbdb_result($rs, "LMB_MID"),3);

                    if (file_exists($resultpath)) {
                        $tf = fopen($resultpath, "r");
                        while ($blob = fgets($tf, 4096)) {
                            $blob = trim(strip_tags($blob));
                            if ($blob) {
                                # Metadaten
                                if (lmb_substr($blob, 0, 5) == "meta:") {
                                    $indi["meta"] = 1;
                                    $blob = lmb_substr($blob, 5);
                                } else {
                                    $indi["meta"] = 0;
                                }

                                $blob = explode(" ", str_replace("\t", " ", $blob));
                                # --- Indizierung groß ----
                                if (!indize_create($blob, $indi)) {$commit = 1;}
                            }
                        }

                        # --- Indizierung klein ----
                        if (!indize_create_s($indi)) {$commit = 1;}

                        fclose($tf);
                    }
                }
            }
                        
			$inc = lmb_count($indi["words"]);
			$zeit_now = gettime();
			$zeit_dauer = number_format(($zeit_now - $zeit_main),4,'.','');
			if($ctt === 2){$zeit_dauer = -1;}
			$sqlquery1 = "UPDATE LDMS_FILES SET IND = ".LMB_DBDEF_TRUE.",INDM = ".LMB_DBDEF_TRUE.",INDD = ".LMB_DBDEF_TIMESTAMP.",INDT = $zeit_dauer,INDC = $inc WHERE ID = ".lmbdb_result($rs,"ID");
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,null,__FILE__,__LINE__);
			if(!$rs1) {$commit = 1;}

			$indi["jnumfs"]++;
		}else{
			$sqlquery1 = "UPDATE LDMS_FILES SET IND = ".LMB_DBDEF_TRUE.",INDM = ".LMB_DBDEF_TRUE.",INDD = ".LMB_DBDEF_TIMESTAMP.",INDT = -2,INDC = 0 WHERE ID = ".lmbdb_result($rs,"ID");
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,null,__FILE__,__LINE__);
			if(!$rs1) {$commit = 1;}
		}

		$indi["words"] = null;
		$bzm++;

		# Zeitlimit
		if($GLOBALS["timeout"] = check_timeout($umgvar["indize_timeout"])){
			echo "<span style=\"color:red\"> Maximum execution time of ".$umgvar["indize_timeout"]." minutes exceeded! process finished!</span><br>";
			lmb_loghandle("inidze.log","Maximum execution time exceeded");
			return $indi;
		}

		# log
		lmb_loghandle("indize.log",$folderName." : ".lmbdb_result($rs,"NAME")." : ".$inc,$zeit_main);
	}
    if(!$umgvar["IS_CRON"]){finishProgressBar($stat_name, $fileCount);}
    if($commit){return false;}else{return $indi;}
}


/**
 * Adds a word to the list of indexed words (LMB_INDIZE_W)
 * @param $indi array from table_infos()
 * @param $value string the word to insert
 * @return bool success
 */
function add_indexword($indi,$value){
	global $db;
	
	if($GLOBALS["umgvar"]["indize_cs"]){
		$upperval = lmb_strtoupper($value);
	}
	
	$sqlquery = "INSERT INTO LMB_INDIZE_W (ID,VAL,METAPHONE,UPPERVAL) VALUES (".$indi["NEXTID_W"].",'".parse_db_string($value,60)."','".parse_db_string(soundex($value),60)."','".parse_db_string($upperval,60)."')";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
	if(!$rs) {return false;}
	return true;
}

/**
 * Inserts words from $indi['words'] into database (level 1 mode)
 * @param $indi array from table_infos()
 * @return bool success
 */
function indize_create_s(&$indi){
	global $db;

	if($indi["words"]){
	    foreach($indi["words"] as $key => $value){
            if($indi["typ"] == "field"){
                $indi["NEXTID_DS"]++;
                $sqlquery = "INSERT INTO LMB_INDIZE_DS (ID,SID,WID,REF,TABID,FIELDID) VALUES (".$indi["NEXTID_DS"].",".$value.",".$key.",".$indi["datid"].",".$indi["tabid"].",".$indi["fieldid"].")";
            }elseif($indi['typ'] == "file"){
                $indi["NEXTID_FS"]++;
                $sqlquery = "INSERT INTO LMB_INDIZE_FS (ID,SID,WID,FID,META) VALUES (".$indi["NEXTID_FS"].",".$value.",".$key.",".$indi["fileid"].",".parse_db_bool($indi["w_meta"][$key]).")";
            }
            $indi["sid"]++;
            $indi["gnumfs"]++;
            $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
            if(!$rs) {return false;}
        }
	}

	return true;
}

/**
 * Inserts words into database (level 2 mode)
 * @param $words array of words
 * @param $indi array from table_infos()
 * @return bool success
 */
function indize_create($words,&$indi){
	global $db;
	global $umgvar;

    foreach($words as $key => $value){
        if (!$value) {
            continue;
        }

		# check alphanumeric digits
        $value = feasible_val($value);
		if(!$value){continue;}

        # Wort in Chache
		if($indi["cacheId"][$value]){
			$wid = $indi["cacheId"][$value];
		}else{
		    // TODO can be improved by bulk-querying words
			# Wort in der Wortliste suchen
			$sqlquery1 = "SELECT ID FROM LMB_INDIZE_W WHERE VAL = '".parse_db_string($value,60)."'";
			$rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,null,__FILE__,__LINE__);

			if(lmbdb_result($rs1,"ID")){
				$wid = lmbdb_result($rs1,"ID");
			}else{
				# neues Wort der Wortliste hinzufügen
				$indi["NEXTID_W"]++;
				$wid = $indi["NEXTID_W"];
				add_indexword($indi,$value);
			}
			# Wort in Cache legen
			$indi["cacheId"][$value] = $wid;
		}

		# Werte für Level1 Modus
		$indi["words"][$wid]++;
		$indi["w_meta"][$wid] = $indi["meta"];

		# Falls Level 2
		if($umgvar["indize_level"] == 2 /* allow sentence search */){
			if($indi["typ"] == "field"){
				$indi["NEXTID_D"]++;
				$sqlquery2 = "INSERT INTO LMB_INDIZE_D (ID,SID,WID,REF,TABID,FIELDID) VALUES (".$indi["NEXTID_D"].",".$indi["sid"].",".$wid.",".$indi["datid"].",".$indi["tabid"].",".$indi["fieldid"].")";
			}elseif($indi["typ"] == "file"){
				$indi["NEXTID_F"]++;
				$sqlquery2 = "INSERT INTO LMB_INDIZE_F (ID,SID,WID,FID,META) VALUES (".$indi["NEXTID_F"].",".$indi["sid"].",".$wid.",".$indi["fileid"].",".parse_db_bool($indi["meta"]).")";
			}
			$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,null,__FILE__,__LINE__);
			if(!$rs2) {return false;}
			$indi["sid"]++;
			$indi["gnumf"]++;
		}

	}
	return true;
}

/**
 * Performs postgres' to_tsvector function on file/field content and inserts the resulting tsvector into the
 * corresponding field (ldms_files.fts_vector or ~table~.~field~_fts_vector.
 * Depending on $umgvar['postgres_indize_lang'] also detects the content's language and inserts into *fts_lang
 * @param $indi array from table_infos()
 * @param $text string|null content of file (if $indi['typ'] == 'file')
 * @return bool success
 */
function indize_create_postgres(&$indi, &$text=null) {
    global $umgvar;
    static $bestVectorSql = null;

    // using INPUT as temporary table to store input text, s.t. the text doesn't need to be included multiple times in the query
    if (!$bestVectorSql) {
        $langStr = $umgvar['postgres_indize_lang'];
        if (!postgresFtsLangColNeeded()) {
            $bestVectorSql = "SELECT TO_TSVECTOR('{$langStr}', INPUT.TEXT) AS VECTOR FROM INPUT";
        } else {
            if ($langStr === 'all') {
                $where = '';
            } else {
                $langs = explode(',', $langStr);
                $langs = array_map(function($l) { return "'$l'"; }, $langs);
                $where = 'WHERE CFGNAME IN (' . implode(',', $langs) . ')';
            }
            $bestVectorSql = '
                SELECT
                    CFGNAME::REGCONFIG,
                    TO_TSVECTOR(CFGNAME::REGCONFIG, INPUT.TEXT) AS VECTOR,
                    LENGTH(TO_TSVECTOR(CFGNAME::REGCONFIG, INPUT.TEXT)) AS LEN
                FROM PG_TS_CONFIG, INPUT ' . $where . ' ORDER BY LEN LIMIT 1';
        }
    }

    $vectorField = 'BESTVECTOR.VECTOR';
    if ($umgvar['postgres_strip_tsvector']) {
        $vectorField = "STRIP({$vectorField})";
    }

    if ($indi['typ'] == 'file') {
        $langSql = '';
        if (postgresFtsLangColNeeded()) {
            $langSql = ', FTS_LANG = BESTVECTOR.CFGNAME';
        }
        $prepare_string = "
        WITH INPUT AS (SELECT ? AS TEXT),
             BESTVECTOR AS ($bestVectorSql)
        UPDATE LDMS_FILES SET FTS_VECTOR = $vectorField $langSql FROM BESTVECTOR WHERE ID = ?";
        $result = lmb_PrepareSQL($prepare_string,array(&$text, $indi['fileid']),__FILE__,__LINE__);
    } else {
        $langSql = '';
        if (postgresFtsLangColNeeded()) {
            $langSql = ", {$indi['fieldname']}_FTS_LANG = BESTVECTOR.CFGNAME";
        }
        $prepare_string = "
        WITH INPUT AS (SELECT {$indi['fieldname']} AS TEXT FROM {$indi['tabname']} WHERE ID = {$indi['datid']}),
             BESTVECTOR AS ($bestVectorSql)
        UPDATE {$indi['tabname']} SET {$indi['fieldname']}_FTS_VECTOR = $vectorField $langSql FROM BESTVECTOR WHERE ID = ?";
        $result = lmb_PrepareSQL($prepare_string,array($indi['datid']),__FILE__,__LINE__);
    }

    if (!$result) {
        return false;
    }
    return true;
}

/**
 * Deletes index for given field
 * @param $indi array from table_infos()
 */
function del_field_index($indi){
	global $db, $umgvar;

	if ($umgvar['postgres_use_fulltextsearch']) {
	    $emptyLangCol = '';
        if (postgresFtsLangColNeeded()) {
            $emptyLangCol = ", {$indi['fieldname']}_FTS_LANG = NULL";
        }
        $sqlquery = "UPDATE {$indi['tabname']} SET IND_{$indi['fieldid']} = " . LMB_DBDEF_FALSE . ", {$indi['fieldname']}_FTS_VECTOR = NULL $emptyLangCol";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, null, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
    } else {
        $sqlquery = "DELETE FROM LMB_INDIZE_D WHERE TABID = " . $indi['tabid'] . " AND FIELDID = " . $indi['fieldid'];
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, null, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
        $sqlquery = "DELETE FROM LMB_INDIZE_DS WHERE TABID = " . $indi['tabid'] . " AND FIELDID = " . $indi['fieldid'];
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, null, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}

        $sqlquery = "UPDATE " . $indi['tabname'] . " SET IND_" . $indi['fieldid'] . " = " . LMB_DBDEF_FALSE;
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, null, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}
    }
}

/**
 * Deletes index for given folder
 * @param $level int folder ID
 */
function del_dir_index($level){
	global $db, $umgvar;

    if ($umgvar['postgres_use_fulltextsearch']) {
        $clearLangCol = '';
        if (postgresFtsLangColNeeded()) {
            $clearLangCol = ', FTS_LANG = NULL';
        }
        $sqlquery = "UPDATE LDMS_FILES SET IND = " . LMB_DBDEF_FALSE . ", FTS_VECTOR = NULL {$clearLangCol} WHERE LEVEL = " . $level;
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,null,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
    } else {
        $sqlquery = "SELECT ID FROM LDMS_FILES WHERE LEVEL = $level";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, null, __FILE__, __LINE__);
        if (!$rs) {$commit = 1;}

        while (lmbdb_fetch_row($rs)) {
            del_file_index(lmbdb_result($rs, "ID"));
        }
    }
}

/**
 * Deletes index for given file
 * @param $fid int file ID
 */
function del_file_index($fid){
	global $db, $umgvar;

	if ($umgvar['postgres_use_fulltextsearch']) {
	    $clearLangCol = '';
	    if (postgresFtsLangColNeeded()) {
	        $clearLangCol = ', FTS_LANG = NULL';
        }
        $sqlquery1 = "UPDATE LDMS_FILES SET IND = " . LMB_DBDEF_FALSE . ", FTS_VECTOR = NULL {$clearLangCol} WHERE ID = " . $fid;
        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,null,__FILE__,__LINE__);
        if(!$rs1) {$commit = 1;}
    } else {
        $sqlquery1 = "DELETE FROM LMB_INDIZE_F WHERE FID = " . $fid;
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, null, __FILE__, __LINE__);
        if (!$rs1) {$commit = 1;}
        $sqlquery1 = "DELETE FROM LMB_INDIZE_FS WHERE FID = " . $fid;
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, null, __FILE__, __LINE__);
        if (!$rs1) {$commit = 1;}
        $sqlquery1 = "UPDATE LDMS_FILES SET IND = " . LMB_DBDEF_FALSE . " WHERE ID = " . $fid;
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, null, __FILE__, __LINE__);
        if (!$rs1) {$commit = 1;}
    }
}

/**
 * Starts periodic indexing
 * @param $cronval string value from LMB_CRONTAB.VAL
 */
function periodic_job($cronval){
	global $error_msg;
	global $timeout;

	$zeit_main = gettime();
	# -------- Liste zu indizierenden Feldern --------
	if($indize = field_list($cronval)){
		# --- Feldliste ---
		foreach($indize["id"] as $key => $value){
			if($indize["field"][$key] AND $indize["tab"][$key] AND $indize["typ"][$key] == 'field'){
				$indi = table_infos($indize["tab"][$key],$indize["field"][$key]);
				$indi = prepare_memo_indize($indi);
				$typ[] = "Databased Index";
				if($timeout){break;}
			}elseif($indize['typ'][$key] == 'file' AND $indize["file"][$key]){
				$indi = prepare_filelevel_indize($indize["file"][$key]);
				$typ[] = "Filestructure Index";
				if($timeout){break;}
			}
		}

		if($typ){
			if(in_array("Filestructure Index",$typ) AND in_array("Databased Index",$typ)){$typ = "Mixed Index";}
			else{$typ = $typ[0];}

			$zeit_now = gettime();
			$zeit_dauer = number_format(($zeit_now - $zeit_main),4,'.','');
			# -------- History-Eintrag --------
			if($indi["gnumf"]){$gnum = $indi["gnumf"];}elseif($indi["gnumfs"]){$gnum = $indi["gnumfs"];}
			if($error_msg){
				fill_history($typ,'FALSE',$zeit_dauer,$gnum,$indi["jnumfs"],"errors listed in TEMP/index_error.log");
			}else{
				fill_history($typ,'TRUE',$zeit_dauer,$gnum,$indi["jnumfs"],'');
			}
		}
	}
}

/**
 * Clears stored index values of field/folder
 * @param $handle array ['field', $tabid, $fieldid] or ['file', $level]
 * @param $subdir bool whether to include subdirectories
 */
function delede_dir_job($handle,$subdir){
	if($handle[0] == "field"){
		$indi = table_infos($handle[1],$handle[2]);
		del_field_index($indi);
	}elseif($handle[0] == "file"){
		# incl. Unterordner
		if($subdir){
			$subd = getasubdir($handle[1],1);
			foreach ($subd as $key => $value){
				del_dir_index($value);
			}
		}else{
			del_dir_index($handle[1]);
		}
	}
}

/**
 * Rebuilds index for field/folder
 * @param $handle array ['field', $tabid, $fieldid] or ['file', $level]
 * @param $subdir bool whether to include subdirectories
 */
function refresh_job($handle,$subdir){
	global $timeout;

	if($handle[0] == "field"){
		$indi = table_infos($handle[1],$handle[2]);
		del_field_index($indi);
		prepare_memo_indize($indi);
	}elseif($handle[0] == "file"){
		# incl. Unterordner
		if($subdir){
			$subd = getasubdir($handle[1],1);
			foreach ($subd as $key => $value){
				del_dir_index($value);
				prepare_filelevel_indize($value);
				if($timeout){break;}
			}
		}else{
			del_dir_index($handle[1]);
			prepare_filelevel_indize($handle[1]);
		}
	}

}

/**
 * Adds a column to the table if the column doesn't exist
 * @param $tableName
 * @param $fieldName
 * @param $fieldType
 */
function addColumnIfNotExists($tableName, $fieldName, $fieldType) {
    global $action, $db;

    if (!dbf_5(array($GLOBALS['DBA']['DBSCHEMA'], $tableName, $fieldName))) {
        $sqlquery = dbq_29(array($GLOBALS['DBA']['DBSCHEMA'], $tableName, $fieldName, $fieldType, ''));
        lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    }
}

/**
 * Adds the field to ldms_files ($fieldName) and all fields (~field~_$fieldName) for which indexing is activated
 * @param $fieldName
 * @param $fieldType
 */
function postgresAddFtsFields($fieldName, $fieldType) {
    global $action, $db;

    // files
    addColumnIfNotExists('LDMS_FILES', $fieldName, $fieldType);

    // tables
    $sqlquery = '
      SELECT 
        UPPER(LMB_CONF_TABLES.TABELLE) AS TAB,
        UPPER(LMB_CONF_FIELDS.FIELD_NAME) AS FIELD
      FROM LMB_CONF_FIELDS
      JOIN LMB_CONF_TABLES ON LMB_CONF_FIELDS.TAB_ID = LMB_CONF_TABLES.ID
      WHERE INDIZE=TRUE';
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    while (lmbdb_fetch_row($rs)) {
        $table = lmbdb_result($rs, 'TAB');
        $field = lmbdb_result($rs, 'FIELD') . '_' . $fieldName;
        addColumnIfNotExists($table, $field, $fieldType);
    }
}

/**
 * Drops the column from the table if it exists
 * @param $tableName
 * @param $fieldName
 */
function dropColumnIfExists($tableName, $fieldName) {
    global $action, $db;

    if (dbf_5(array($GLOBALS['DBA']['DBSCHEMA'], $tableName, $fieldName))) {
        $sqlquery = dbq_22(array($tableName, $fieldName));
        lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    }
}

/**
 * Removes the field from ldms_files ($fieldName) and all fields (~field~_$fieldName) for which indexing is activated
 * @param $fieldName
 */
function postgresRemoveFtsFields($fieldName) {
    global $action, $db;

    // files
    dropColumnIfExists('LDMS_FILES', $fieldName);

    // tables
    $sqlquery = '
      SELECT 
        UPPER(LMB_CONF_TABLES.TABELLE) AS TAB,
        UPPER(LMB_CONF_FIELDS.FIELD_NAME) AS FIELD
      FROM LMB_CONF_FIELDS
      JOIN LMB_CONF_TABLES ON LMB_CONF_FIELDS.TAB_ID = LMB_CONF_TABLES.ID
      WHERE INDIZE=TRUE';
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    while (lmbdb_fetch_row($rs)) {
        $table = lmbdb_result($rs, 'TAB');
        $field = lmbdb_result($rs, 'FIELD') . '_' . $fieldName;
        dropColumnIfExists($table, $field);
    }
}

/**
 * Depending on umgvar, creates fts_vector and fts_lang fields in
 *  - ldms_files (ldms_files.fts_vector)
 *  - all columns for which indexing is activated (~table~.~field~_fts_vector)
 */
function postgresUpdateFtsFields() {
    global $umgvar;

    // changed at the moment -> take from session
    $useFts = array_key_exists('postgres_use_fulltextsearch', $_SESSION['umgvar']) ? $_SESSION['umgvar']['postgres_use_fulltextsearch'] : $umgvar['postgres_use_fulltextsearch'];

    // add/remove fulltextsearch vector fields
    if ($useFts) {
        postgresAddFtsFields('FTS_VECTOR', 'TSVECTOR');
    } else {
        postgresRemoveFtsFields('FTS_VECTOR');
    }

    // add/remove fulltextsearch language fields
    if ($useFts && postgresFtsLangColNeeded()) {
        postgresAddFtsFields('FTS_LANG', 'REGCONFIG');
    } else {
        postgresRemoveFtsFields('FTS_LANG');
    }
}
