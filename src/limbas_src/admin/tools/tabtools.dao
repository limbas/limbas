<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




if (!$sqlexecnum) {
    $sqlexecnum = 100;
} else {
    $sqlexecnum = parse_db_int($sqlexecnum);
}

if ($empty AND $table) {
    $sqlquery = "DELETE FROM ".dbf_4($table);
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    if ($rs) {
        $resultMsg = $lang[1069];
    } else {
        $resultMsg = $lang[1070];
    }
} elseif ($delete AND $delete == 'table' AND $table) {
    $sqlquery0 = dbq_12(array($DBA['DBSCHEMA'], $table));
    $rs = lmbdb_exec($db, $sqlquery0) or errorhandle(lmbdb_errormsg($db), $sqlquery0, $action, __FILE__, __LINE__);
    if (!$rs) {
        $commit = 1;
    }
    if (lmbdb_fetch_row($rs)) {
        $drop = lmb_dropView($table);
    } else {
        $drop = lmb_dropTable($table);
    }

    if ($drop) {
        $resultMsg = $lang[1071];
    } else {
        $resultMsg = $lang[1072];
    }
} elseif ($sqlexec AND $sqlvalue) {
    $zeit_main1 = gettime();

    if(substr($DBA['DB'],0,4) == 'maxdb') {
        $sqlvalue_ = explode('//', $sqlvalue);
        foreach ($sqlvalue_ as $key => $sqlquery) {
            $rssql = lmbdb_exec($db, $sqlquery);
            $count += lmbdb_num_rows($rssql);
        }
    }else{
        $rssql = lmbdb_exec($db, $sqlvalue);
        $count = lmbdb_num_rows($rssql);
    }

    $sqlquery = $sqlvalue;
    $zeit_main2 = gettime();
    $zeit = number_format($zeit_main2 - $zeit_main1, 8, ',', '.');
    if ($rssql) {
        $resultMsg = "<span class='text-success'>$lang[1073]!</span>&nbsp;[$zeit sec.]&nbsp;&nbsp;&nbsp;count&nbsp;[$count]";
    } else {
        $resultMsg = "<span class='text-danger'>$lang[1012]!</span><br>" . lmbdb_errormsg($db);
    }
} elseif ($sqlFavoriteName and $sqlvalue) {
    # add favorite
    $nextID = next_db_id('lmb_code_favorites');
    $name = parse_db_string($sqlFavoriteName);

    $prepareString = "INSERT INTO LMB_CODE_FAVORITES (ID, NAME, STATEMENT, TYPE) VALUES ($nextID, '$name', ?, 0)";
    lmb_PrepareSQL($prepareString, array($sqlvalue), __FILE__, __LINE__);
} elseif ($delete AND $delete == 'favorite' AND $favorite) {
    # delete favorite
    $sqlquery = 'DELETE FROM LMB_CODE_FAVORITES WHERE ID=' . parse_db_int($favorite);
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
} elseif ($favorite AND $showFavorite) {
    # load sql of favorite
    $sqlquery = 'SELECT NAME, STATEMENT FROM LMB_CODE_FAVORITES WHERE ID=' . parse_db_int($favorite);
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    if (lmbdb_fetch_row($rs)) {
        $favoriteStatement = lmbdb_result($rs, 'STATEMENT');
    }
}

if ($sqlquery) {
    $rf = fopen(TEMPPATH . 'log/sql_manager.log', 'a');
    if($rf) {
        fputs($rf, date('Y-m-d H:i:s') . "\t" . $session['username'] . "\t" . str_replace(array(chr(10), chr(13)), ' ', $sqlquery) . "\n");
        fclose($rf);   
    }
}

# get all favorites
$sqlFavorites = array();
$sqlquery = 'SELECT ID, NAME FROM LMB_CODE_FAVORITES WHERE TYPE=0';
$rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
while (lmbdb_fetch_row($rs)) {
    $sqlFavorites[lmbdb_result($rs, 'ID')] = lmbdb_result($rs, 'NAME');
}

# sql value to show
if (!$sqlvalue) {
    if ($show AND $table) {
        $sqlvalue = "select * from $table";
    } elseif ($showFavorite AND $favorite AND $favoriteStatement) {
        $sqlvalue = $favoriteStatement;
    }
}

?>
