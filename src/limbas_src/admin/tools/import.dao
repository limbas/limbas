<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




set_time_limit(12000); #200min
ob_implicit_flush();

global $lang;
if(empty($lang)){
    $lang = [];
	$lang[770] = "deleted";
	$lang[1010] = "wrong datatype";
	$lang[1011] = "inserts";
	$lang[1012] = "failed";
	$lang[987] = "finished";
	$lang[1014] = "start LIMBAS";
	$lang[1015] = "inserting rows";
	$lang[1016] = "failure on rows";
	$lang[1017] = "inserts";
	$lang[1018] = "created";
	$lang[1019] = "failure";
	$lang[1020] = "creating table";
	$lang[1021] = "deleting table";
	$lang[164] = "table";
	$lang[1024] = "indexed";
	$lang[1025] = "indexing table";
	$lang[1026] = "add foreign key";
	$lang[2215] = "View";
	$lang[2216] = "Trigger";
}


$info = "
Copyright notice
(c) Limbas GmbH (support@limbas.org)
All rights reserved
This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
Or
In a Propritary Software Licence http://limbas.com/
The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
This copyright notice MUST APPEAR in all copies of the script!

";


if(file_exists("../tables/tab.lib")){
	require_once("../tables/tab.lib");
}else{
	require_once(COREPATH . 'admin/tables/tab.lib');
}

# --------- errorlist------------
function errorlist($line,$value,$id){


}


/* --- mapping fields for import/create/convert new table ------- */
function import_create_fieldmapping($ifield,$import_typ,$covertfromtable,$odbc=null,$txt_terminate=null,$txt_enclosure=null,$txt_calculate=null,$txt_encode=null){
    global $db;
    global $umgvar;
    global $session;
    global $lang;
    global $farbschema;
    global $lmfieldtype;

    # check fields from odbc import
    if($import_typ == "odbc"){
        $dbfunc = $odbc['odbc_vendor'].'_dbf_5';
        if(!$fieldlist = $dbfunc($odbc['odbc_connect'],array($odbc['odbc_dbschema'],$odbc['odbc_table']))){return false;}
        
        foreach ($fieldlist['columnname'] as $key => $value){
            $header[] = $value;
            $e['length'][] = $fieldlist['length'][$key];
            $e['field_type'][] = $fieldlist['datatype'][$key];
            $covertfromtable = $odbc['odbc_table'];
        }
    # check fields from txt import
    }elseif($import_typ == "txt"){
    	$parsefile = import_parse_txt($txt_terminate,$txt_calculate,$txt_enclosure);
    	$e = $parsefile["findtype"];
    	$header = $parsefile["header"];
    	$covertfromtable = $parsefile["tabname"];
    
    # check fieldtype for convert
    }elseif($import_typ == "convert" AND $covertfromtable){
    	/* --- Tabellenfelder auslesen --------------------------------------------- */
    	$columns = dbf_5(array($DBA["DBSCHEMA"],$covertfromtable));
    	foreach ($columns["columnname"] as $key => $value){
    		$header[] = $value;
    		$e["field_type"][] = $columns["datatype"][$key];
    		$e["length"][] = $columns["length"][$key];
    	}
    	$readonly = 'READONLY STYLE="color:grey"';
    }
    
    $systemfields = array('id','inuse_time','inuse_user','del','erstuser','edituser','erstdatum','editdatum','vid','vpid','vact','vdesc','lmb_sync_id','lmb_sync_cli','lmb_validfrom','lmb_validto');
    
    
    /* --- Tabellengruppen ----------------------------------------------- */
    $sqlquery = "SELECT ID,LEVEL,NAME,BESCHREIBUNG,SORT FROM LMB_CONF_GROUPS ORDER BY LMB_CONF_GROUPS.SORT";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    while(lmbdb_fetch_row($rs)) {
    	$tabgroup_["id"][] = lmbdb_result($rs, "ID");
    	$tabgroup_["name"][] = $lang[lmbdb_result($rs,"NAME")];
    }
    
    $result_type = $lmfieldtype;

    # decode/encode utf8
    if($txt_encode){
        $covertfromtable = lmb_utf8_encode($covertfromtable);
    }
    		
    echo "<TABLE>";
    /* --- Tabelle ------------- */
    echo "<TR ><TD COLSPAN=\"8\" ALIGN=\"CENTER\"><B>$lang[164]</B></TD></TR>";
    echo "<TR BGCOLOR=\"".$farbschema["WEB3"]."\"><TD><B>$lang[951]</B></TD><TD><B>$lang[924]</B></TD><TD><B>$lang[1029]</B></TD><TD COLSPAN=\"5\"></TD></TR>";
    echo "
        <TR >
        <TD><INPUT TYPE=\"TEXT\" NAME=\"ifield[tablename]\" VALUE=\"".$covertfromtable."\" $readonly></TD>
        <TD><INPUT TYPE=\"TEXT\" SIZE=\"20\" VALUE=\"".$covertfromtable."\" NAME=\"ifield[tablespelling]\"></TD>
        <TD><SELECT NAME=\"ifield[tablegroup]\">";
    foreach($tabgroup_["id"] as $bzm => $val){
    	if($tabgroup_["id"][$bzm] == $tab_group){$SELECTED = "SELECTED";}else{$SELECTED = "";}
    	echo "<OPTION VALUE=\"".$tabgroup_["id"][$bzm]."\" $SELECTED>".$tabgroup_["name"][$bzm]."</OPTION>";
    }

    echo "</SELECT></TD>";
    echo "<TD COLSPAN=\"5\"></TD>";
    
    /* --- Felder ------------- */
    echo "<TR ><TD COLSPAN=\"8\" ALIGN=\"CENTER\"><B>$lang[953]</B></TD></TR>";
    echo "<TR BGCOLOR=\"".$farbschema["WEB3"]."\"><TD><B>$lang[922]</B></TD><TD><B>$lang[924]</B></TD><TD><B>$lang[126]</B></TD>  <TD><B>Extension</B></TD> <TD><B>$lang[925]</B></TD><TD><B>$lang[210]</B></TD><TD colspan=\"2\" align=\"right\"><B>$lang[33]</B></TD></TR>";
    $bzm = 0;
    foreach ($header as $bzm => $hval){

        if($import_typ == "convert" AND in_array(lmb_strtolower($hval),$systemfields)){continue;}
    
    	if(trim($hval)){
    		
    		# decode/encode utf8
    		if($txt_encode){
                $hval = lmb_utf8_encode($hval);
                $header2[$bzm] = lmb_utf8_encode($header2[$bzm]);
    		}
    		/* --- Feld umbenennen ------------- */
    		$field_name = parse_db_syntax($hval,0);
    		
    		/* --- Feldliste ------------- */
    		if($ifield['name'][$bzm]){$field_name = $ifield['name'][$bzm];}
    		if($ifield['spelling'][$bzm]){$hval = $ifield['spelling'][$bzm];}
    		if($ifield['desc'][$bzm]){$header2[$bzm] = $ifield['desc'][$bzm];}else{$header2[$bzm] = $hval;}
    		
    		echo "<TR>\n";
    		echo "<TD><INPUT TYPE=\"TEXT\" SIZE=\"20\" NAME=\"ifield[name][$bzm]\" VALUE=\"".$field_name."\" MAXLENGHT=\"18\" $readonly><INPUT TYPE=\"HIDDEN\" NAME=\"ifield[header][$bzm]\" VALUE=\"".$hval."\"></TD>\n";
    		echo "<TD><INPUT TYPE=\"TEXT\" SIZE=\"20\" NAME=\"ifield[spelling][$bzm]\" VALUE=\"".$hval."\"></TD>\n";
    		echo "<TD><INPUT TYPE=\"TEXT\" SIZE=\"20\" NAME=\"ifield[desc][$bzm]\" VALUE=\"".$header2[$bzm]."\"></TD>\n";
    		echo "<TD><INPUT TYPE=\"TEXT\" SIZE=\"20\" NAME=\"ifield[extension][$bzm]\" $readonly></TD>\n";
    		
    		echo  "<TD><SELECT NAME=\"ifield[typ][$bzm]\">\n";
    		$ctype = $e["field_type"][$bzm]." (".$e["length"][$bzm].")";
    		$fype = explode("(",$ctype);
    		$fype_type = lmb_strtoupper(trim($fype[0]));
    		$fype_size = lmb_substr($fype[1],0,lmb_strlen($fype[1])-1);
    		if($import_typ == "convert"){$fype_type = constant("LMB_DBRETYPE_".trim(lmb_strtoupper($fype_type)));}
    		$result_typeid = translate_fieldtype($fype_type,$fype_size,0,$hval);
    		foreach($result_type["id"] as $bzm2 => $value2){
    			if($bzm2 == $result_typeid){$SELECTED = "selected";}else{$SELECTED = "";}
    			echo "<OPTION VALUE=\"".$result_type["id"][$bzm2]."\" $SELECTED>".$result_type["name"][$bzm2]."\n";
    		}
    		echo "</SELECT></TD>";
    		echo "<td>";
    		if($result_type["hassize"][$result_typeid]){
    			echo "<input type=\"text\" style=\"width:40px;\" name=\"ifield[size][$bzm]\" value=\"".$e["length"][$bzm]."\">";
    		}
    		echo "</td>";
    		echo "<TD nowrap ALIGN=\"LEFT\">".$ctype."</TD>";
    		
    		$CHECKED = "";
    		if(($ifield['select'][$bzm] == "on" OR !$ifield['select'][$bzm])){$CHECKED = "CHECKED";}
    		if($import_typ == "txt" AND (!$e["length"][$bzm] OR !$result_type["hassize"][$result_typeid])){$CHECKED = "CHECKED";}
    	    if(in_array(lmb_strtolower($hval),$systemfields)){$CHECKED = "CHECKED";}
    		
    		echo "<TD ALIGN=\"CENTER\">";
    		#if($field_name == $hval){
    			echo "<INPUT TYPE=\"CHECKBOX\" NAME=\"ifield[select][$bzm]\" $CHECKED>\n\n";
    		#}
    		echo "</TD></TR>\n\n";
    	}
    }
    /* --- Tool-Leiste ------------- */
    echo "<TR><TD>&nbsp;</TD></TR>";
    echo "<TR><TD COLSPAN=\"7\">$lang[1036]:&nbsp;<INPUT TYPE=\"RADIO\" NAME=\"ifield[data]\" VALUE=\"1\">";
    echo "&nbsp;&nbsp;&nbsp;$lang[1037]:&nbsp;<INPUT TYPE=\"RADIO\" NAME=\"ifield[data]\" VALUE=\"2\" CHECKED>";
    echo "&nbsp;&nbsp;&nbsp;<INPUT TYPE=\"button\" class=\"btn btn-primary\" onclick=\"document.form1.import_action.value=2;document.form1.submit();\" VALUE=\"$lang[1038]\"></TD></TR>";
    echo "</TABLE>";
    /*
    $bzm2 = 0;
    while($result_type["id"][$bzm2]){
    	if($result_type["data_type"][$bzm2] == 39){$size = 6;}else{$size = $result_type["size"][$bzm2];}
    	echo "<INPUT TYPE=\"HIDDEN\" NAME=\"size_".$result_type[id][$bzm2]."\" VALUE=\"".$size."\">\n";
    	$bzm2++;
    }
    */
    echo "</FORM>";
    if($txtdat){fclose($txtdat);}

}

function import_create_addtable($import_typ, $ifield, $add_permission = null, $verbose=null){
    global $db;
    global $session;
    global $umgvar;
    global $lang;
    global $DBA;

    /* --- Tabelle erstellen -------------------------------------- */
    if (! $new_ = add_tab($ifield['tablename'], $ifield['tablegroup'], $ifield['tablespelling'], null, 1, $add_permission, $import_typ)) {
        $commit = 1;
        if($verbose){echo "--> " . $lang[164] . " <b>" . $ifield['tablename'] . "</b> " . $lang[1018] . " " . $lang[1019] . "<br>";}
        return false;
    }
    
    if ($import_typ != 'convert') {
        if($verbose){echo "<br>--> " . $lang[164] . " <b>" . $ifield['tablename'] . "</b> " . $lang[1018] . "<br>";}
    }

    $new_gtabid = $new_[0];
    $ifield['new_gtabid'] = $new_[0];
    $ifield['new_gtab'] = $new_[1];

    $systemfields = array('id','inuse_time','inuse_user','del','erstuser','edituser','erstdatum','editdatum','vid','vpid','vact','vdesc','lmb_sync_id','lmb_sync_cli','lmb_validfrom','lmb_validto');

    /* --- Felder erstellen -------------------------------------- */
    if ($ifield['name']) {
        foreach ($ifield['name'] as $bzm9 => $value9) {
            if ($ifield['select'][$bzm9] == "on" and $ifield['typ'][$bzm9] != "system") {
                $ifield['id'][$bzm9] = 1;
                $ifield['name'][$bzm9] = parse_db_syntax($ifield['name'][$bzm9], 0);
                
                // Feld hinzufügen
                if(!in_array(lmb_strtolower($ifield['name'][$bzm9]),$systemfields)){
                    if ($new_field_id = add_field($ifield['name'][$bzm9], $new_gtabid, $ifield['typ'][$bzm9], 0, $ifield['size'][$bzm9], $ifield['id'], $ifield['desc'][$bzm9], $ifield['spelling'][$bzm9], null, null, null, null, null, $import_typ)) {
                        // add field permission
                        add_fieldPermission($new_gtabid,$new_field_id,$ifield['tablegroup']);
                        if($verbose){echo "--> " . $lang[168] . " <b>" . $ifield['name'][$bzm9] . "</b> " . $lang[1018] . "<br>";}
                    }
                }else{
                    if($verbose){echo "skip systemfield ".$ifield['name'][$bzm9]."<br>";}
                }
                
                /* --- Feldtyp ermitteln -------------------------------------- */
                $sqlquery = "SELECT FIELD_TYPE,SIZE,DATENTYP,LMRULE,DATA_TYPE FROM LMB_FIELD_TYPES WHERE ID = " . $ifield['typ'][$bzm9];
                $rs = lmbdb_exec($db, $sqlquery);
                if (! $rs) {
                    $commit = 1;
                }
                $ifield['fieldtype'][$bzm9] = lmbdb_result($rs, "FIELD_TYPE");
                $ifield['datatype'][$bzm9] = lmbdb_result($rs, "DATA_TYPE");
                $ifield['datentyp'][$bzm9] = lmbdb_result($rs, "DATENTYP");
                $ifield['rule'][$bzm9] = lmbdb_result($rs, "LMRULE");
                if ($ifield['size'][$bzm9]) {
                    $ifield['rule'][$bzm9] = str_replace("xxx", ($ifield['size'][$bzm9] + 1), $ifield['rule'][$bzm9]);
                    $ifield['rule'][$bzm9] = str_replace("xx", $ifield['size'][$bzm9], $ifield['rule'][$bzm9]);
                } else {
                    $ifield['size'][$bzm9] = lmbdb_result($rs, "SIZE");
                    $ifield['rule'][$bzm9] = str_replace("xx", "", $ifield['rule'][$bzm9]);
                }
                
                if ($ifield['fieldtype'][$bzm9] == 5 or $ifield['fieldtype'][$bzm9] == 12 or $ifield['fieldtype'][$bzm9] == 10 or $ifield['fieldtype'][$bzm9] == 6) {
                    $ifield['enclosure'][$bzm9] = "";
                } else {
                    $ifield['enclosure'][$bzm9] = "'";
                }
            }
        }
    }

    // add table permissions
    $commit = add_tablePermission($new_gtabid,$ifield['tablegroup']);


    return $ifield;

}
    
function import_create_filltable($import_typ, $ifield, $txt_terminate = null, $txt_encode = null, $txt_enclosure = null, $verbose=null){
    global $db;
    global $session;
    global $umgvar;
    global $lang;
    global $DBA;


    $new_gtab = $ifield['new_gtab'];
    $new_gtabid = $ifield['new_gtabid'];

    /* --- Datensätze einfügen -------------------------------------- */
    if ($ifield['data'] == '2') {

        if($verbose){
            import_showProgress($new_gtabid);
        }
        

        /* --- aus ODBC Quelle -------------------------------------- */
        if ($import_typ == "odbc") {

            $import_create = 1;
            require_once(COREPATH . 'admin/tools/import_odbc.php');

        }elseif ($import_typ == "txt") {

            $NEXTID = 1;
            /* ---------------------- Seperator ---------------------- */
            if (! $txt_terminate) {$txt_terminate = ',';}
            if (! $txt_enclosure) {$txt_enclosure = '"';}
            
            // count of rows
            $filelist = file(USERPATH . $session["user_id"] . "/temp/txtimport.txt");
            $maxline = lmb_count($filelist);
            unset($filelist);
            
            /* ---------------------- Textdatei öffnen ---------------------- */
            $pfad = USERPATH . $session["user_id"] . "/temp/txtimport.txt";
            
            $txtdat = fopen($pfad, "r");
            /* ---------------------- Zeilenausgabe ---------------------- */
            $INSERT_OK = "0";
            $INSERT_FALSE = "0";
            $bzm0 = 1;

            while ($line = lmb_fgetcsv($txtdat, 0, $txt_terminate, $txt_enclosure, $umgvar['csv_escape'])) {

                    // ignore header
                    if ($bzm0 == 1) {$bzm0++;continue;}

                    $insert_ = array();
                    $value_ = array();
                    $insert = null;
                    $value = null;

                    // each line
                    foreach($line as $fkey => $txt_value){
                        if($txt_value AND $ifield['id'][$fkey]){
                            import_create_sqlvalue($fkey,$ifield,$insert_,$value_,$NEXTID,$ERSTUSER,$txt_value,$txt_encode);
                        }
                    }
  
                    if (lmb_count($insert_) > 0 AND $value_) {
                        $insert = implode(",", $insert_);
                        $value = implode(",", $value_);

                        /* --- Datensatz eintragen -------------------------------------- */
                        if ($insert and $value) {
                            $sqlquery = "INSERT INTO $new_gtab (ID,ERSTUSER,$insert) VALUES ($NEXTID," . $ERSTUSER . ",$value)";
                            if($rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__)){
                                $INSERT_OK ++;
                            } else {
                                $INSERT_FALSE ++;
                            }
                        }
                        $NEXTID ++;
                    
                    }

                    if (intval($maxline / 100) > 0) {
                        if ((($bzm0) % ($maxline / 100)) == 0) {
                            $progress_last = round(($bzm0) * 100 / $maxline);
                            if($verbose){import_handleProgress($new_gtabid,$progress_last);}
                            @ob_flush();
                            flush();
                        }
                    }
                    
                $bzm0 ++;
            }
            
            // set sequence table
            lmb_rebuildSequences($new_gtab);
            
            if($verbose){import_handleProgress($new_gtabid,100);}
            
            fclose($txtdat);
        }
    }
    
    return array('gtabid'=>$new_gtabid,'true'=>$INSERT_OK,'false'=>$INSERT_FALSE);
}

function import_create_sqlvalue($fkey,&$ifield,&$insert_,&$value_,&$NEXTID,&$ERSTUSER,&$value,&$txt_encode){
    
    global $session;
    global $umgvar;
    global $lang;
    global $lmcurrency;

    $value = parse_db_string($value);

    /* ---------------------- Extension ---------------------- */
    if($ifield['extension'][$fkey]){
        $extension = $ifield['extension'][$fkey];
        $value = $extension($value,$ifield['name'][$fkey],$NEXTID);
        $ifield['enclosure'][$fkey] = null;
        
    /* ---------------------- Datum ---------------------- */
    }elseif ($ifield['fieldtype'][$fkey] == 2 OR $ifield['fieldtype'][$fkey] == 15) {
        if ($value AND $value != '0000-00-00 00:00:00') {
            // DATE
            if ($ifield['datatype'][$fkey] == 40) {
                $value = lmb_substr(convert_date($value), 0, 10);
            // TIMESTAMP
            }else{
                $value = convert_date($value);
            }

        }else{
            $value = null;
        }
    /* ---------------------- Währung ---------------------- */
    } elseif ($ifield['datatype'][$fkey] == 30) {
        if ($value) {
            
            // Währungstabelle
            if (lmb_strpos($value, chr(128))) { // euro
                $ccode = "EUR";
            } else {
                foreach ($lmcurrency["code"] as $ckey => $cvalue) {
                    if (lmb_strpos($value, $cvalue)) {
                        $ccode = $cvalue;
                    }
                }
            }
            
            $value = str_replace(",", ".", $value);
            if (! preg_match("/" . $ifield['rule'][$fkey] . "/", $value)) {
                errorlist($value, "$lang[1010] (" . $ifield['datentyp'][$fkey] . ")", $NEXTID);
                $value = "";
            } elseif ($value) {
                $value_[] = "'" . $ccode . "'";
                $insert_[] = $ifield['name'][$fkey] . "_c";
            }
        }
    /* ---------------------- Zeit ---------------------- */
    } elseif ($ifield['fieldtype'][$fkey] == 7) {
        if ($value) {
            $value = convert_time($value);
        }
    /* ---------------------- Boolean ---------------------- */
    } elseif ($ifield['fieldtype'][$fkey] == 10) {
        if (! $value) {
            $value = LMB_DBDEF_FALSE;
        } else {
            $value = LMB_DBDEF_TRUE;
        }
    /* ---------------------- Zahlen ---------------------- */
    } elseif ($ifield['fieldtype'][$fkey] == 5 or $ifield['fieldtype'][$fkey] == 6 or $ifield['fieldtype'][$fkey] == 11 or $ifield['fieldtype'][$fkey] == 14) {
        $value = str_replace(",", ".", $value);
        if (! preg_match("/" . $ifield['rule'][$fkey] . "/", $value)) {
            errorlist($value, "$lang[1010] (" . $ifield['datentyp'][$fkey] . ")", $NEXTID);
            $value ='0';
        }
    /* ---------------------- Text ---------------------- */
    } else {
        // decode/encode utf8
        $value = parse_db_string($value);
        if ($txt_encode) {
            $value = lmb_utf8_encode($value);
        }
        // $value = str_replace("#NEXTLINE#","\n",$value);
        if (! preg_match("/" . $ifield['rule'][$fkey] . "/", $value)) {
            errorlist($value, "$lang[1010] (" . $ifield['datentyp'][$fkey] . ")", $NEXTID);
            $value = "";
        }
    }
    
    if ($value) {
        $ERSTUSER = $session["user_id"];
        // DBID
        if ($ifield['datatype'][$fkey] == 22) {
            $NEXTID = parse_db_int($value, 19);
        // ERSTUSER
        } elseif ($ifield['datatype'][$fkey] == 34 or lmb_strtoupper($ifield['name'][$fkey]) == "ERSTUSER") {
            $ERSTUSER = parse_db_int($value, 5);
        } else {
            $value_[] = $ifield['enclosure'][$fkey] . $value . $ifield['enclosure'][$fkey];
            $insert_[] = $ifield['name'][$fkey];
        }
    }

}

function import_create_fillodbc($ifield, $odbc, $txt_encode, $verbose=null){
    global $session;
    global $umgvar;
    global $db;
    global $lang;
    
    $NEXTID = 1;
    $new_gtab = $ifield['new_gtab'];
    $new_gtabid = $ifield['new_gtabid'];
    

    if($verbose){
        import_showProgress($new_gtabid);
    }

    // predefined fields
    if (in_array(dbf_4('id'), $ifield['name'])) {
        $NOID = 1;
    }
    if (in_array(dbf_4('erstuser'), $ifield['name'])) {
        $NOERSTUSER = 1;
    }
    
    $systemfields = array('id','inuse_time','inuse_user','del','erstuser','edituser','erstdatum','editdatum','vid','vpid','vact','vdesc','lmb_sync_id','lmb_sync_cli','lmb_validfrom','lmb_validto');
    
    // count of rows
    $sqlquery = "SELECT COUNT(*) AS COUNT FROM " . $odbc['odbc_table'];
    $rs = lmbdb_exec($odbc['odbc_connect'], $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    $maxline = lmbdb_result($rs, "COUNT");
    
    /* ---------------------- Zeilenausgabe ---------------------- */
    $INSERT_OK = "0";
    $INSERT_FALSE = "0";
    $bzm0 = 1;
    
    // odbc result
    $selectfields = implode($ifield['name'], ',');
    $sqlquery = "SELECT $selectfields FROM " . $odbc['odbc_table'];
    $odbc_rs = lmbdb_exec($odbc['odbc_connect'], $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    
    while (lmbdb_fetch_row($odbc_rs)) {
        
        $line = array();
        $insert_ = array();
        $value_ = array();
        $insert = null;
        $value = null;
        
        // each line
        foreach ($ifield['id'] as $fkey => $fval) {
            if (in_array($ifield['name'][$fkey], $systemfields)) {continue;}
            $odbc_value = lmbdb_result($odbc_rs, $ifield['name'][$fkey]);
            import_create_sqlvalue($fkey,$ifield,$insert_,$value_,$NEXTID,$ERSTUSER,$odbc_value,$txt_encode);
        }
        
        if (lmb_count($insert_) > 0 and $value_) {
            
            $insert = implode(",", $insert_);
            $value = implode(",", $value_);
            
            /* --- Datensatz eintragen -------------------------------------- */
            if ($insert and $value) {
                $sqlquery = "INSERT INTO $new_gtab (ID,ERSTUSER,$insert) VALUES ($NEXTID,$ERSTUSER,$value)";
                if ($rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__)) {
                    $INSERT_OK ++;
                } else {
                    $INSERT_FALSE ++;
                }
            }
            $NEXTID ++;
        }
        
        if ($verbose) {
            if (intval($maxline / 100) > 0) {
                if ((($bzm0) % ($maxline / 100)) == 0) {
                    $progress_last = round(($bzm0) * 100 / $maxline);
                    import_handleProgress($new_gtabid,$progress_last);
                    @ob_flush();
                    flush();
                }
            }
        }
        
        $bzm0 ++;
    }
    
    // set sequence table
    lmb_rebuildSequences($new_gtab);
    
    if ($verbose) {
        import_handleProgress($new_gtabid,100);
    }
    
    return array('gtabid' => $new_gtabid,'true' => $INSERT_OK,'false' => $INSERT_FALSE);
    
}


function import_showProgress($gtabid) {
    global $lang;
    echo '<p class="mb-0">' . $lang[1015] . ' ...</p>
                <div class="progress">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" id="pb-'.$gtabid.'">
                        0%
                    </div>
                </div>';
    echo '<script>scrolldown();</script>';
}
function import_handleProgress($gtabid,$progress_last) {
    echo "<script>showprogress('pb-$gtabid',$progress_last);</script>";
}



// merge fields
function import_attach_fieldmapping($gtabid,$header,&$ifield,$filename=null){
	global $gfield;
	global $lang;
	global $gtab;
	global $lmfieldtype;

	
	echo '<table class="table table-sm table-striped">';

    echo '<thead><tr>
    <th colspan="2">'.$gtab["table"][$gtabid].'</th>
    <th><i class="lmb-icon lmb-arrow-left"></i></th>
    <th>'. $filename .'</th>
    <th>Extension</th>
    <th></th>
    </tr></thead>';
	
	foreach ($gfield[$gtabid]["sort"] as $key => $value){
		if($gfield[$gtabid]["field_type"][$key] >= 100 OR $gfield[$gtabid]["data_type"][$key] == 22){continue;}
		$isactive = 0;

        echo '<tr>';


        echo '<td class="text-nowrap">'.$gfield[$gtabid]["field_name"][$key].' (<span class="font-italic">'.$gfield[$gtabid]["spelling"][$key].'</span>)</td>';
        echo '<td>'.$lmfieldtype["name"][$gfield[$gtabid]["data_type"][$key]].'</td>';
        echo '<td></td>';

        echo '<td><select name="ifield[colname][' . $key . ']" OnChange="document.getElementById(\'ifield_used_' . $key . '\').checked=true;" class="form-select form-select-sm"><option value="0"></option>';
		
		foreach ($header as $fkey => $fval){
			if($ifield["colname"][$key]){
				if(lmb_strtolower(trim($ifield["colname"][$key])) == lmb_strtolower(trim($fval))){$SELECTED = "SELECTED";}else{$SELECTED = "";}
			}else{
				if(lmb_strtolower(trim($fval)) == lmb_strtolower(trim($gfield[$gtabid]["field_name"][$key])) OR lmb_strtolower(trim($fval)) == lmb_strtolower(trim($gfield[$gtabid]["field_name"][$key]))){$SELECTED = "SELECTED";}else{$SELECTED = "";}
			}
			if($SELECTED){$isactive=1;}
			echo '<option value="'.$fval.'" '.$SELECTED.'>'.$fval.'</option>';
		}
		echo '</select></td>';
		
		echo '<TD><input type="text" name="ifield[extension][' . $key . ']" class="form-control form-control-sm"></TD>';

        $CHECKED = '';
		if($ifield["used"]){
			if($ifield["used"][$key]){$CHECKED = 'checked';}
		}elseif($isactive){
			$CHECKED = 'checked';
		}
		echo '<td align="center"><input type="checkbox" id="ifield_used_' . $key . '" name="ifield[used][' . $key . ']" ' . $CHECKED . '></td>';


        echo '</tr>';
	}

    echo '</table><hr>';

    echo '<div class="text-end"><button class="btn btn-primary" type="button" onclick="document.form1.import_action.value=2;document.form1.submit();">' . $lang[1040] . '</button></div>';
}

# TEXT import and attach to table
function import_attach_fromfile($ifield,$gtabid,$txt_terminate=null,$txt_encode=null,$txt_enclosure=null,$verbose=1){
	global $umgvar;
	global $session;
	global $gfield;
	global $lang;
	
	if(!$gtabid OR !$ifield){return false;}
	require_once(COREPATH . 'gtab/gtab.lib');

    if($verbose){
        import_showProgress($gtabid);
    }
	
	/* ---------------------- Seperator ---------------------- */
	if(!$txt_terminate){$txt_terminate = ',';}
	if(!$txt_enclosure){$txt_enclosure = '"';}

	# count of rows
	$file = file(USERPATH.$session["user_id"]."/temp/txtimport.txt");
	$maxline = lmb_count($file);
	unset($file);
	
	/* ---------------------- Textdatei öffnen ---------------------- */
	$pfad = USERPATH.$session["user_id"]."/temp/txtimport.txt";
	$txtdat = fopen($pfad,"r");

    // header
	$headerset =  lmb_fgetcsv($txtdat,0,$txt_terminate,$txt_enclosure,$umgvar['csv_escape']);
	
	if(!$ifield["used"]){
		lmb_alert("no fields selected!");
		return false;
	}
	
	if($ifield["used"]){
	foreach ($ifield["used"] as $fkey => $value){
		if($value == "on" AND $ifield["colname"][$fkey]){
			foreach ($headerset as $hkey => $hval){
				if(lmb_strtolower(trim($hval)) == lmb_strtolower(trim($ifield["colname"][$fkey]))){
					$fieldlist[$hkey] = $fkey;

                    // special fieldtype validity from
                    if($gfield[$gtabid]['field_name'][$fkey] == 'LMB_VALIDFROM'){
                        $valid['validfrom'] = $hkey;
                        $listignore[$hkey] = 1;
                    // special fieldtype  validity to
                    }elseif($gfield[$gtabid]['field_name'][$fkey] == 'LMB_VALIDTO') {
                        $valid['validto'] = $hkey;
                        $listignore[$hkey] = 1;
                    }

				}
			}
		}
	}}

    // values
	$bzm = 1;
	while ($lineset = lmb_fgetcsv($txtdat,0,$txt_terminate,$txt_enclosure,$umgvar['csv_escape'])) {
		$history_fields = array();

		foreach ($fieldlist as $filekey => $gfieldid){
			if($lineset[$filekey] AND $lineset[$filekey] != "NULL" AND !$listignore[$filekey]){
				
				if($txt_encode){
                    $lineset[$filekey] = lmb_utf8_encode($lineset[$filekey]);
				}

                $history_fields["$gtabid,$gfieldid,0"] = $lineset[$filekey];

			}
		}

        // validity - LMB_VALIDTO
        if($valid['validfrom']){
            $history_fields["$gtabid,{$fieldlist[$valid['validfrom']]},0"][0] = $lineset[$valid['validfrom']];
            $history_fields["$gtabid,{$fieldlist[$valid['validfrom']]},0"][1] = $lineset[$valid['validto']];
        }

		if(update_data($history_fields)){
			$INSERT_OK++;
		}else{
			$INSERT_FALSE++;
		}

		if(intval($maxline/100) > 0){
			if((($bzm)%($maxline/100))==0){
				$progress_last = round(($bzm)*100/$maxline);
				if($verbose){
                    import_handleProgress($gtabid,$progress_last);
                    @ob_flush();
                    flush();
				}
			}
		}
		$bzm++;
	}
	
	if($verbose){
        import_handleProgress($gtabid,100);
	}
	
	return array('true'=>$INSERT_OK,'false'=>$INSERT_FALSE);
}

# ODBC import and attach to table
function import_attach_fromodbc($ifield,$odbc,$txt_encode=null,$verbose=1){
	global $umgvar;
	global $session;
	global $gfield;
	global $lang;

	require_once(COREPATH . 'gtab/gtab.lib');
	
	$gtabid = $odbc['odbc_attach'];
	if(!$gtabid OR !$ifield){return false;}
	if($verbose AND !$ifield["used"]){
		lmb_alert("no fields selected!");
		return false;
	}
	
	$odbc_connect = $odbc['odbc_connect'];

	if($verbose){
	    import_showProgress($gtabid);
	}

	# count of rows
    $sqlquery = "SELECT COUNT(*) AS COUNT FROM " . $odbc['odbc_table'];
    $rs = lmbdb_exec($odbc_connect, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    $maxline = lmbdb_result($rs, "COUNT");
	
    // odbc result
    $dbfunc = $odbc['odbc_vendor'].'_dbf_5';
    if(!$fieldlist_ = $dbfunc($odbc_connect,array($odbc['odbc_dbschema'],$odbc['odbc_table']))){return false;}
    foreach ($fieldlist_['columnname'] as $key => $value){
        $headerset[] = $value;
    }

	foreach ($ifield["used"] as $fkey => $value){
		if($value == "on" AND $ifield["colname"][$fkey]){
			foreach ($headerset as $hkey => $hval){
				if(lmb_strtolower(trim($hval)) == lmb_strtolower(trim($ifield["colname"][$fkey]))){
					$fieldlist[$fkey] = $hval;
				}
			}
		}
	}

    $sqlquery = "SELECT ".implode(',',$fieldlist)." FROM " . $odbc['odbc_table'];
    $odbc_rs = lmbdb_exec($odbc_connect, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    while (lmbdb_fetch_row($odbc_rs)) {

    	$history_fields = array();
		foreach ($fieldlist as $gfieldid => $fieldname){
		    
		    $fieldvalue = lmbdb_result($odbc_rs, $fieldname);

            if($extension = $ifield["extension"][$gfieldid]){
                $fieldvalue = $extension($fieldvalue,$fieldname);
            }
		    
			if($fieldvalue AND $fieldvalue != "NULL"){
				
				if($txt_encode){
                    $fieldvalue = lmb_utf8_encode($fieldvalue);
				}
				$history_fields["$gtabid,$gfieldid,0"] = $fieldvalue;
			}
		}

		if(update_data($history_fields)){
			$INSERT_OK++;
		}else{
			$INSERT_FALSE++;
		}

		if($verbose){
		if(intval($maxline/100) > 0){
			if((($bzm)%($maxline/100))==0){
				$progress_last = round(($bzm)*100/$maxline);
                import_handleProgress($gtabid,$progress_last);
                @ob_flush();
                flush();
			}
		}}
    }

    if($verbose){
        import_handleProgress($gtabid,100);
    }
    
    return array('true'=>$INSERT_OK,'false'=>$INSERT_FALSE);
    
}



#----------XML Import functions -----------------
function checkFormatNUMBER($data,$param){
	if(is_numeric($data))
		return $data;
	else
		return "null";

}


function checkFormatTEXT($data,$param){
	if(lmb_strlen($data)>$param){
		return lmb_substr($data,0,$param);
	}else{
		return $data;
	}
}


/* --- fill Systemtables ------- */
function fill($tab,$file,$ctyp,$ktyp,$cname,$kkey,$partimport,$import_overwrite,$txt_encode=null,$txt_terminate=null,$txt_enclosure=null,$nosequence=null){
	global $umgvar;
	global $table;
	global $backupdir;
	global $setup;
	global $session;
	global $db;
	global $install;
	global $lang;
    global $syncimport;

    $success = 1;

	/* ---------------------- Seperator ---------------------- */
	if(!$txt_terminate){$txt_terminate = ',';}
	if(!$txt_enclosure){$txt_enclosure = '"';}
	
	/* --- Tabelle füllen------- */
	if($setup){
		if($install == "install" OR $install == "reinstall"){
			$pfad2 = BACKUPPATH.$backupdir."/$file";
		}
	} elseif($partimport){
        $pfad2 = USERPATH.$session["user_id"]."/temp/export.dat";
    } elseif($syncimport) {
        $pfad2 = USERPATH.$session["user_id"]."/temp/sync/export.dat";
    } else {
		$pfad2 = BACKUPPATH.$backupdir."/$file";
	}

	/* --- Max Zeilenanzahl auslesen für aktuellen Status ------- */
	$tab_datei = fopen($pfad2,"r");
	$maxline = 1;
	while(!feof($tab_datei)){
		fgets($tab_datei);
		$maxline++;
	}
	$maxline = ($maxline - 3);

	fclose($tab_datei);

	/* --- Max ID Festlegen falls ID angehängt werden soll ------- */
	if($import_overwrite == "add"){
		$startid = next_db_id($tab,$kkey);
	}else{
		$startid = 1;
	}

	/* --- Datei zum lesen öffnen ------- */
	$tab_datei = fopen($pfad2,"r");

		/* --- Prozessposition zeigen ------- */
	if($GLOBALS["action"]){

        import_showProgress($tab);
	}

	$count_ok = "0";
	$count_false = "0";
	$bzm4 = 1;
	//while($line2 = fgets($tab_datei, 1000000)){
	while ($ccont = lmb_fgetcsv($tab_datei,0)) {

		if($bzm4 == 1){
			//$cheader = explode("\t",$line2);
			$cheader = $ccont;
		}else{
			unset($values);
			unset($coll);
			//$ccont = explode("\t",$line2);
			$bzm3 = 0;
			while($cheader[$bzm3]){
				if(($ccont[$bzm3] OR $ccont[$bzm3] == "0" OR $ctyp[$bzm3] == 2) AND $cname[$bzm3]){

					# decode/encode utf8
					if($txt_encode AND ($ctyp[$bzm3] == 4 OR $ctyp[$bzm3] == 1)){
                        $ccont[$bzm3] = lmb_utf8_encode($ccont[$bzm3]);
					}

					# next ID
					if(lmb_strtoupper($cheader[$bzm3]) == "ID" AND lmb_strtoupper($tab) != "LMB_SESSION"){
						if($import_overwrite == "add_with_ID"){
							$prepare_long["id"][$bzm4] = $ccont[$bzm3];
							$values[] = $ccont[$bzm3];
						}elseif($import_overwrite == "add"){
							$values[] = $startid;
							$prepare_long["id"][$bzm4] = $startid;
							$startid++;
						}else{
							$values[] = $ccont[$bzm3];
							$prepare_long["id"][$bzm4] = $ccont[$bzm3];
						}
					}
					# --- LONG ---
					elseif($ctyp[$bzm3] == 4){
						$values[] = "''";
						$prepare_long["field"][$bzm4][] = $cheader[$bzm3];
						$prepare_long["value"][$bzm4][] = $ccont[$bzm3];
					}
					# --- STRING ---
					elseif($ctyp[$bzm3] == 1){$values[] = "'".parse_db_string($ccont[$bzm3])."'";}
					# --- BOOLEAN ---
					elseif($ctyp[$bzm3] == 2){if($ccont[$bzm3] == 1){$ccont[$bzm3] = LMB_DBDEF_TRUE;}else{$ccont[$bzm3] = LMB_DBDEF_FALSE;} $values[] = $ccont[$bzm3];}
					# --- NUMBER ---
					elseif($ctyp[$bzm3] == 3){$ccont[$bzm3] = str_replace(",",".",trim($ccont[$bzm3]));if(!$ccont[$bzm3]){$ccont[$bzm3] = "0";}$values[] = $ccont[$bzm3];}
					# --- DATETIME ---
					elseif($ctyp[$bzm3] == 5){$values[] = ($dts = convert_date($ccont[$bzm3])) ? "'".$dts."'" : LMB_DBDEF_DTNULL;}
					# --- DATE ---
					elseif($ctyp[$bzm3] == 6){$values[] = ($dt = convert_date($ccont[$bzm3],1)) ? "'".$dt."'" : LMB_DBDEF_DTNULL;}
					
					# --- Collumn ---
					$coll[] = $cname[$bzm3];

				}else{
					if($ktyp[$bzm3]){
						$values[] = "$id";
						$coll[] = $cname[$bzm3];
                    // systemfield ERSTUSER
					}elseif(lmb_strtoupper($cname[$bzm3]) == "ERSTUSER" ){
						$values[] = "1";
						$coll[] = $cname[$bzm3];
                    // systemfield ERSTDATUM
					}elseif(lmb_strtoupper($cname[$bzm3]) == "ERSTDATUM") {
                        $values[] = "'" . convert_stamp(local_stamp(), $t = 0) . "'";
                        $coll[] = $cname[$bzm3];
                    // boolean
                    }elseif($ctyp[$bzm3] == 2){
                        $cname[$bzm3] == LMB_DBDEF_FALSE;
                    // all others to NULL
					}else{
						$values[] = "NULL";
						$coll[] = $cname[$bzm3];
                    }

				}
				$bzm3++;
			}
			$values = implode(",",$values);
			$coll = implode(",",$coll);
			$sqlquery2 = "INSERT INTO $tab ($coll) VALUES($values)";
			if($bzm4 > 1){
				$rs3 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, $GLOBALS['action'], __FILE__, __LINE__);
				if(!$rs3) {
                    LimbasLogger::log("import failure in insert statement of table $tab and ID $id", LimbasLogger::LL_ERROR);
					$success = 0;
					$count_false++;
				}else{
					if($GLOBALS["action"]){
						if(intval($maxline/100) > 0){
						if((($bzm4)%($maxline/100))==0){
							$progress_last = round(($bzm4)*100/$maxline);
                            import_handleProgress($tab,$progress_last);
                            @ob_flush();
                            flush();
						}}
					}
					$count_ok++;
				}
			}
		}
		
		# --- Long Felder füllen ----
		if(is_array($prepare_long) && isset($prepare_long['field']) && $prepare_long['field'][$bzm4]){
            foreach($prepare_long["field"][$bzm4] as $lkey => $lval){
                if($prepare_long["id"][$bzm4]){
                    $prepare_string = "UPDATE ".$tab." SET ".$prepare_long["field"][$bzm4][$lkey]." = ? WHERE ID = ".$prepare_long["id"][$bzm4];
                    $rs4 = lmb_PrepareSQL($prepare_string,array($prepare_long["value"][$bzm4][$lkey]),__FILE__,__LINE__);
                    if(!$rs4) {
                        LimbasLogger::log("import failure in prepare statement of table $tab and ID $id", LimbasLogger::LL_ERROR);
                        $success = 0;
                        $count_false++;
                    }
                }
            }
        }
		unset($prepare_long);

		$bzm4++;
		$id++;
	}
	
	
	# set sequence table
    if(strtolower(substr($tab,0,4)) != 'lmb_' && !$nosequence) {
        lmb_rebuildSequences($tab,'ID');
    }
	
	if($count_false){
		if($GLOBALS["action"]){echo "<p style=\"color:red;\">&nbsp;&nbsp;$count_false $lang[1016]!</p>";}
	}else{
		if($GLOBALS["action"]){echo "<p style=\"color:green;\">&nbsp;&nbsp;$count_ok $lang[1017].</p>";}
	}
	if($GLOBALS["action"]){import_handleProgress($tab,100);}

    return $success;

}

/* --- Tabelle anlegen------- */
function create($tab,$sqlquery,$key){
	global $umgvar;
	global $table;
	global $session;
	global $db;
	global $lang;
	
	$sqlquery = $sqlquery.$key;
	$sqlquery = lmb_substr($sqlquery,0,lmb_strlen($sqlquery) - 1).")";
    $rs2 = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);

    ob_flush();
    
	if($rs2){
        LimbasLogger::log("create table $tab", LimbasLogger::LL_INFO);
		if($GLOBALS["action"]){echo "<p class=\"fw-bold mt-3 mb-0\">$lang[164] $tab $lang[1018]</p>";}
		return true;
	}else {
        LimbasLogger::log("Could not create table $tab - Message: ".lmbdb_errormsg($db), LimbasLogger::LL_ERROR);
		if($GLOBALS["action"]){echo "<div style=\"color:red;\">$lang[1020] <font style=\"font-style:italic;font-weight:bold\">$tab</FONT> $lang[1012]!</div>\n";}
		return false;
	}
}

/* --- Tabelle löschen------- */
function deleteExistingTab($tab){
	global $umgvar;
	global $table;
	global $session;
	global $db;
	global $lang;
    global $DBA;

    $odbc_table = dbf_20(array($DBA["DBSCHEMA"],$tab,"'TABLE'"));
    if(!$odbc_table) {
        return true;
    }

	$sqlquery = "DROP TABLE ".dbf_4($tab);
	$rs2 = lmbdb_exec($db,$sqlquery);
	if($rs2){
        LimbasLogger::log("delete table $tab", LimbasLogger::LL_INFO);
		if($GLOBALS["action"]){echo "<div>$lang[164] <font style=\"font-style:italic;font-weight:bold\">$tab</FONT> <B>$lang[770]</B></div>\n";}
        return true;
	}else{
        LimbasLogger::log("Could not create table $tab - Message: ".lmbdb_errormsg($db), LimbasLogger::LL_ERROR);
		if($GLOBALS["action"]){echo "<div style=\"color:red;\">$lang[1021] <font style=\"font-style:italic;font-weight:bold\">$tab</FONT> $lang[1012]!</div>\n";}
        return false;
	}
}

/* --- System Import ------- */
function import($partimport,$import_overwrite,$prefix=null,$txt_encode=null, $txt_terminate=null,$txt_enclosure=null,$tab_name='',$nosequence=null,$initial_setup=null){
	global $umgvar;
	global $table;
	global $backupdir;
	global $session;
	global $db;
	global $install;
	global $lang;
	global $DBA;
    global $syncimport;

	/* ---------------------- Seperator ---------------------- */
	if(!$txt_terminate){$txt_terminate = ',';}
	if(!$txt_enclosure){$txt_enclosure = '"';}
    $success = 1;

	# Komplett-Import aus Backupverzeichniss
	if($initial_setup){

		# ------ alte Verzeichnisse löschen -------
		$path = BACKUPPATH;
		$folderval = read_dir($path);
		foreach($folderval["name"] as $key => $value){
            if($folderval["typ"][$key] == "dir" && $folderval["name"] !== 'revision'){
				rmdirr($folderval["path"][$key],1,0,1);
			}
		}

		# ------ Archiv entpacken -------
		$sys = system("tar -x -z -C ".BACKUPPATH." -f ".BACKUPPATH.$backupdir);

		# ------ Archiv-Verzeichniss auswählen -------
		$folderval = read_dir($path);
		foreach($folderval["name"] as $key => $value){
			if($folderval["typ"][$key] == "dir" && $folderval["name"] !== 'revision'){
				$backupdir = $value;
			}
		}

		if($install == "install" OR $install == "reinstall"){
			$pfad = BACKUPPATH . $backupdir."/export.conf";
		}
	}
	# Einzel-Import
	elseif($partimport){
		$pfad = USERPATH . $session["user_id"]."/temp/export.conf";}
        elseif($tab_name != '')
        {
            $syncimport = true;
            $pfad = USERPATH . $session["user_id"]."/temp/sync/$tab_name.conf";
        }
	else
        {
		$pfad = BACKUPPATH . $backupdir."/export.conf";
	}

	$config_datei = fopen($pfad,"r");

	while($line = fgets($config_datei, 100000)){
	    
	    // break if attach datasets
	    if($iscreated === 'attach'){break;}
	    
		if(lmb_substr($line,0,1) != "#" AND lmb_substr($line,0,1) != " "){

	        if(lmb_substr($line,0,10) == "<encoding ") {
                $encoding = rtrim(rtrim(lmb_substr($line,10)),'>');

                // encoding different
                if(!$txt_encode AND $encoding AND $GLOBALS['umgvar']["charset"] AND strtoupper($encoding) != strtoupper($GLOBALS['umgvar']["charset"])){
                    $txt_encode = 1;
                }

            }elseif(lmb_substr($line,0,22) == "<begin indexdefinition"){
				$definition = "index";
			} elseif(lmb_substr($line,0,20) == "<end indexdefinition"){
				$definition = "";

			} elseif(lmb_substr($line,0,20) == "<begin keydefinition"){
				$definition = "key";
			} elseif(lmb_substr($line,0,18) == "<end keydefinition"){
				$definition = "";

			} elseif(lmb_substr($line,0,21) == "<begin viewdefinition"){
				$definition = "view";
			} elseif(lmb_substr($line,0,19) == "<end viewdefinition"){
				$definition = "";

			} elseif(lmb_substr($line,0,24) == "<begin triggerdefinition"){
				$definition = "trigger";
			} elseif(lmb_substr($line,0,22) == "<end triggerdefinition"){
				$definition = "";

			} elseif(lmb_substr($line,0,22) == "<begin tabledefinition"){
				$definition = "table";

				unset($ctyp);
				unset($cname);
				unset($key);
				unset($kkey);
				unset($cdf);
				unset($ktyp);

				$tab = lmb_substr($line,24);
				$tab = lmb_substr($tab,0,lmb_strlen($tab) - 2);
                $tab = dbf_4($tab);
				$filename = ($tab_name != '' && $tab_name != 'export') ? '' : strtolower($tab);
				$tabname = $prefix.$tab;
				$oldtabname = $tabname;
				#$tabname = parse_db_syntax($tabname,1);
				$newtabname[lmb_strtoupper($tab)] = $tabname;
				$tab = $tabname;

				$sqlquery = "CREATE TABLE $tab (";

			} elseif(lmb_substr($line,0,20) == "<end tabledefinition"){

				$definition = "";
				// --- create table------- */
				if($import_overwrite == "rename" OR $import_overwrite == "over"){
					if(!create($tab,$sqlquery,$key)){
                        return false;
                    }
				// --- adding datasets ------- 
				}elseif ($import_overwrite == "add" OR $import_overwrite == "add_with_ID"){
					$tab = $oldtabname;
					// check if table exists
					$odbc_table = dbf_20(array($DBA["DBSCHEMA"],$tab,"'TABLE','VIEW'"));
					if($odbc_table) {
						$iscreated = 'attach';
					}else{
						if(!create($tab,$sqlquery,$key)){
                            return false;
                        }
					}
				}
				
				# falls kein Primary Key vorhanden
				if(!$kkey){$kkey = "ID";}

				/* --- Tabelle füllen------- */
				if($filename != ''){
                    $success = fill($tab,$filename,$ctyp,$ktyp,$cname,$kkey,$partimport,$import_overwrite,$txt_encode,$txt_terminate,$txt_enclosure,$nosequence);
                }

			}elseif($definition == "table"){
				unset($columndef);
				unset($default);
				unset($cdf);

				$cdf = explode("::",$line);
				#$cdf[0]= parse_db_syntax($cdf[0],2);	# fieldname
                $cdf[0]= trim($cdf[0]);	                # fieldname
				$cdf[1]= trim($cdf[1]);					# datatype
				$cdf[2]= trim($cdf[2]);					# codetype
				$cdf[3]= trim($cdf[3]);					# fieldlength
				$cdf[4]= trim($cdf[4]);					# scale
				$cdf[5]= trim($cdf[5]);					# mode
				$cdf[6]= trim($cdf[6]);					# default
				$cdf[7]= constant("LMB_DBTYPE_".trim($cdf[1]));	# database specific datatype
				if($cdf[2]){$cdf[8]= constant("LMB_DBTYPE_".trim($cdf[2]));}	# database specific codetype
				
				if($cdf[0] == "NEXT" OR $cdf[0] == "ORDER"){$cdf[0] = "\"".$cdf[0]."\"";} # only for reserved names (should be extended)
				if($cdf[6] OR $cdf[6] == "0"){
					if (defined("LMB_DBDEF_".trim(str_replace("DEFAULT ","",$cdf[6])))){
						$default = constant("LMB_DBDEF_".trim(str_replace("DEFAULT ","",$cdf[6]))); # database specific default
					}else{
						$default = trim(str_replace("DEFAULT ","",$cdf[6]));
					}
					// only if default without " ' "
					#if($cdf[1] == "DATE" OR $cdf[1] == "TIME"){
					#	$default = "DEFAULT '".$default."'";
					// default value is real date
					if($cdf[1] == "DATE" AND $cdf[6] != 'DATE'){
						$default = "DEFAULT '".$default."'";	
					// default value is real time
					}elseif($cdf[1] == "TIME" AND $cdf[6] != 'TIME'){
						$default = "DEFAULT '".$default."'";
					// default value is real timestamp
					#}elseif($cdf[1] == "TIMESTAMP" AND $cdf[6] != 'TIMESTAMP' AND $cdf[6] != 'DEFAULT_TIMESTAMP' AND $cdf[6] != 'DATE' AND $cdf[6] != 'TIME'){
                    }elseif($cdf[1] == "TIMESTAMP" AND is_numeric(substr($cdf[6],0,2))) {
					    $default = "DEFAULT '".$default."'";
					}elseif($cdf[1] == "TIMESTAMP" OR $cdf[1] == "BOOLEAN" OR $cdf[1] == "INTEGER" OR $cdf[1] == "SMALLINT" OR $cdf[1] == "BIGINT" OR $cdf[1] == "FIXED" OR $cdf[1] == "FLOAT" OR $cdf[1] == "DECIMAL" OR $cdf[1] == "NUMERIC" OR $cdf[1] == "DATE" OR $cdf[1] == "TIME"){
						$default = "DEFAULT ".$default;
					}else{
                        # decode/encode utf8
                        if($txt_encode){
                            $default = lmb_utf8_encode($default);
                        }
						$default = "DEFAULT '".parse_db_string($default)."'";
					}
					if($DBA['DB'] == 'mysql' AND $cdf[1] == 'TIMESTAMP' AND !$default){
					    $default = 'NULL';
                    }
				}
				if($cdf[1] == "TIMESTAMP" OR $cdf[1] == "DATE" OR $cdf[1] == "TIME" OR $cdf[1] == "BOOLEAN" OR $cdf[1] == "INTEGER" OR $cdf[1] == "SMALLINT" OR $cdf[1] == "BIGINT" OR $cdf[1] == "FLOAT" OR $cdf[1] == "DECIMAL" OR (($cdf[1] == "FIXED" OR $cdf[1] == "NUMERIC") AND (!$cdf[3] OR $cdf[3] == 28))){
					$sqlquery .= $cdf[0]." ".$cdf[7].$cdf[8]." ".$default;
				}elseif($cdf[1] == "LONG"){
					$sqlquery .= $cdf[0]." ".$cdf[7]." ".$default;
				# with scale
				}elseif($cdf[4]){
					#$sqlquery .= $cdf[0]." ".$cdf[7]."(".($cdf[3]+$cdf[4]).",".$cdf[4].") ".$cdf[8]." ".$default;  // todo ??
                    $sqlquery .= $cdf[0]." ".$cdf[7]."(".$cdf[3].",".$cdf[4].") ".$cdf[8]." ".$default;
				}else{
					$sqlquery .= $cdf[0]." ".$cdf[7]."(".$cdf[3].") ".$cdf[8]." ".$default;
				}
				if(lmb_strpos($cdf[5],"KEY") !== false){
					$key = LMB_DBFUNC_PRIMARY_KEY."(".$cdf[0]."),"; $ktyp[] = $cdf[0];$kkey = $cdf[0];
					$sqlquery .= " NOT NULL,";
				}
				else{
					$ktyp[] = 0;
					$sqlquery .= ",";
				}

				if($cdf[1] == "LONG"){$ctyp[] = 4;}
				elseif($cdf[1] == "TIMESTAMP"){$ctyp[] = 5;} 
				elseif($cdf[1] == "DATE"){$ctyp[] = 6;} 
				elseif($cdf[1] == "BOOLEAN"){$ctyp[] = 2;} 
				elseif($cdf[1] == "VARCHAR" OR $cdf[1] == "CHAR" OR $cdf[2] == "BYTE" OR $cdf[2] == "ASCII" OR $cdf[1] == "TIME"){$ctyp[] = 1;} 
				else{$ctyp[] = 3;}
				
				$cname[] = $cdf[0];

			}elseif($definition == "index"){
				unset($cdf);

				$cdf = explode("::",$line);
				$cdf[0] = $newtabname[lmb_strtoupper($cdf[0])];

                $indname = lmb_getConstraintName('LMB_IND',$cdf[0],$cdf[1]);
				$odbc_table = dbf_20(array($DBA["DBSCHEMA"],$cdf[0],"'TABLE'"));
				if($odbc_table) {
					$sqlquery = dbq_4(array($DBA["DBSCHEMA"],$indname,$cdf[0],$cdf[1]));
					$rs4 = lmbdb_exec($db,$sqlquery);
					if(!$rs4) {
                        $success = 0;
                    }
					if($rs4){
						if($GLOBALS["action"]){echo "<div>$lang[164] <font style=\"font-style:italic;font-weight:bold\">".$cdf[0]." (".$cdf[1].")</FONT> <b>$lang[1024]</b>.</div>\n";
						echo "\n<script type=\"text/javascript\">//<!--\nscrolldown();\n//--></script>\n";}
					}else{
						if($GLOBALS["action"]){echo "<div style=\"color:red;\">$lang[1025]<font style=\"font-style:italic;font-weight:bold\">".$cdf[0]." (".$cdf[1].")</FONT> <b>$lang[1019]!</b></div>\n";
						echo "\n<script type=\"text/javascript\">//<!--\nscrolldown();\n//--></script>\n";}
					}
				}else{
					if($GLOBALS["action"]){echo "<div style=\"color:red;\">$lang[1025] <font style=\"font-style:italic;font-weight:bold\">".$cdf[0]." (".$cdf[1].")</FONT> <br>$lang[1019]</b>, table does not exist!</div>\n";
					echo "\n<script type=\"text/javascript\">//<!--\nscrolldown();\n//--></script>\n";}
				}

			}elseif($definition == "view"){
				unset($cdf);

				$cdf[0] = lmb_substr($line,0,lmb_strpos($line,"::"));
				$cdf[1] = lmb_substr($line,lmb_strpos($line,"::")+2,lmb_strlen($line));
				
				if($cdf){
					$sqlquery = dbq_19($cdf);
					$rs4 = lmbdb_exec($db,$sqlquery);
					if(!$rs4) {
                        $success = 0;
                    }
					
					$outdesc1 = "<div>$lang[2215] <font style=\"font-style:italic;font-weight:bold\">".$cdf[0]."</FONT> <B>$lang[1018]</B>.</div>\n".
						"<script type=\"text/javascript\">//<!--\nscrolldown();\n//--></script>\n";
					$outdesc2 = "<div style=\"color:red;\">$lang[2215] <font style=\"font-style:italic;font-weight:bold\">".$cdf[0]."</FONT> $lang[1019]!</div>\n".
						"<script type=\"text/javascript\">//<!--\nscrolldown();\n//--></script>\n";
					if($rs4){
						if($GLOBALS["action"]){echo $outdesc1."\n";}
					}else{
						$GLOBALS["LAST_SQL"]["sql"][] = $sqlquery;
						$GLOBALS["LAST_SQL"]["desc1"][] = $outdesc1;
						$GLOBALS["LAST_SQL"]["desc2"][] = $outdesc2;
						if($GLOBALS["action"]){echo $outdesc2."\n";}
					}
					
				}

			}elseif($definition == "key"){
				/*
				unset($cdf);

				$cdf = explode("::",$line);
				$sqlquery = "ALTER TABLE ".$newtabname[$cdf[0]]." ADD FOREIGN KEY(".$cdf[1].") REFERENCES ".$cdf[2]."(".$cdf[3].") ON DELETE RESTRICT";
				$rs5 = lmbdb_exec($db,$sqlquery);
				$outdesc1 = "<div>$lang[1026] <FONT COLOR=\"#0033CC\">".$newtabname[$cdf[0]]."</FONT></div>\n<Script language=\"JavaScript\">scrolldown();</SCRIPT>\n";
				$outdesc2 = "<div style=\"color:red;\">$lang[1026] <FONT COLOR=\"#0033CC\">".$newtabname[$cdf[0]]."</FONT> $lang[1019]</div>\n<Script language=\"JavaScript\">scrolldown();</SCRIPT>\n";
				if($rs5){
					if($GLOBALS["action"]){echo $outdesc1."\n";}
				}else{
					$GLOBALS["LAST_SQL"]["sql"][] = $sqlquery;
					$GLOBALS["LAST_SQL"]["desc1"][] = $outdesc1;
					$GLOBALS["LAST_SQL"]["desc2"][] = $outdesc2;
					if($GLOBALS["action"]){echo $outdesc2."\n";}
				}
				*/
			} else {
				$definition = "";
			}

		}
	}

	if(is_dir(BACKUPPATH.$backupdir) AND $backupdir){
		system("rm -r ".BACKUPPATH.$backupdir);
	}

    return $success;

}

/* --- preselect - import multible atm files ------- */
function import_part_groupselect($fileatm,$fileatm_name){
    global $farbschema;
    global $umgvar;
    global $session;
    global $lang;
    
    // extract upload archive
    $pfad = USERPATH.$session["user_id"]."/temp/";
    $sys = system("rm ".$pfad."*");
    $copy = copy ($fileatm, $pfad.$fileatm_name);
    $sys = system("tar -x -z -C ".$pfad." -f ".$pfad."/".$fileatm_name);
    $sys = system("rm ".$pfad.$fileatm_name);
    
    // read extracted directory
    if($path = read_dir($pfad)){
    foreach($path["name"] as $key => $value){
    	$value_ = explode(".",$value);
    	if($path["typ"][$key] == "file" AND lmb_substr($value,lmb_strlen($value)-2,2) == 'gz'){
    		$imptabgroup[] = lmb_strtoupper(preg_replace("/^[^0-9a-zA-z]$/","",$value_[0]));
    	}
    }
    }
    
    sort($imptabgroup);
    
    /* ---------------------- Spaltenliste ---------------------- */?>
<BR>
<HR>
<?php
   echo "<TABLE>";
    echo "<TR BGCOLOR=\"".$farbschema['WEB7']."\"><TD>$lang[1024]</TD><TD>$lang[1039]</TD><TD>$lang[1040]</TD>";
    $bzm = 0;
    while($imptabgroup[$bzm]){
            echo "<TR><TD>$imptabgroup[$bzm]</TD>";
            if(in_array($imptabgroup[$bzm],$existingfields)){echo "<TD ALIGN=\"CENTER\"><i class=\"lmb-icon lmb-aktiv\" BORDER=\"0\"></i></TD>";}
            else{echo "<TD></TD>";}
            echo "<TD ALIGN=\"CENTER\"><INPUT TYPE=\"CHECKBOX\" NAME=\"tablegrouplist[".$imptabgroup[$bzm]."]\" CHECKED></TD></TR>";
    $bzm++;
    }
    
    echo "<TR><TD COLSPAN=\"3\">&nbsp;</TD></TR>";
    echo "<TR><TD COLSPAN=\"3\" ALIGN=\"LEF\"><INPUT TYPE=\"button\" class=\"btn btn-primary\" onclick=\"document.form1.import_action.value=2;document.form1.submit();\" VALUE=\"$lang[1040]\"></TD></TR>";
    echo "</TABLE>";
}


function import_parse_txt($txt_terminate=',',$txt_calculate=100,$txt_enclosure='"'){
	
	global $session;
	global $umgvar;
	
	/* ---------------------- Seperator ---------------------- */
	if(!$txt_enclosure){$txt_enclosure = '"';}
	if(!$txt_terminate){$txt_terminate = ",";}

	/* ---------------------- Textdatei öffnen ---------------------- */
	$pfad = USERPATH.$session["user_id"]."/temp/";
	
	$filename = $_FILES["filetxt"]["name"];
	$file_origin = $pfad.$filename;
	$filename = rtrim($filename,'.gz');
	$filename = rtrim($filename,'.zip');

	if($_FILES["filetxt"]["tmp_name"]){$copy = copy ($_FILES["filetxt"]["tmp_name"], $file_origin);}
	
	# unzip file if needed
	$ext = lmb_substr($file_origin,lmb_strrpos($file_origin,".")+1);
	if($ext == 'zip'){
		exec('unzip -p '.$file_origin.' > '.$pfad.'txtimport.txt');
	}elseif($ext == 'gz'){
		exec('gzip -dc '.$file_origin.' > '.$pfad.'txtimport.txt');
	}else{
		rename($file_origin,$pfad.'txtimport.txt');
	}
	
	$file_origin = $pfad.'txtimport.txt';
	
	# get table name
	$tabname = lmb_substr($filename,0,lmb_strrpos($filename,"."));
	$tabname = parse_db_syntax($tabname,1);


	
	# open file
	$txtdat = fopen($file_origin,"r");

	/* ---------------------- Kopfzeile ---------------------- */
	#if($line = fgets($txtdat)){
	#	$header = explode($txt_terminate,$line);
	#	$rowcount = count($header);
	#}
	
	$header = lmb_fgetcsv($txtdat,0,$txt_terminate,$txt_enclosure,$umgvar['csv_escape']);
	$rowcount = lmb_count($header);

	/* ---------------------- Feldtyp vorschlagen ---------------------- */
	# ---------------------- Grundtyp feststellen für Reihe ----------------------
	if($txt_calculate){
		$bzm = 0;

		while ($zeile = lmb_fgetcsv($txtdat,0,$txt_terminate,$txt_enclosure,$umgvar['csv_escape']) AND $bzm <= $txt_calculate) {

			#$zeile = explode($txt_terminate,$line);
			for($i = 0; $i < $rowcount; $i++){
				$cellval = $zeile[$i];

				# csv
				if($txt_terminate == ";"){
					$cellval = trim($cellval,"\"");
				}

				if($e["length"][$i] < lmb_strlen($cellval)){$e["length"][$i] = lmb_strlen($cellval);}
				# Ganzzahlen
				if(preg_match("/^[0-9]{1,18}$/",$cellval)){
					$e["typ"][$i][] = 1;
				# Kommazahlen
				}elseif(preg_match("/^[0-9,]{1,20}$/",$cellval)){
					$e["typ"][$i][] = 2;
				# Datum
				}elseif(preg_match("/^[0-3]{0,1}[0-9]{1}.([0-1]{0,1}[0-9]{1}|[A-Za-z]{3,9}).[12]{0,1}[90]{0,1}[0-9]{0,1}[0-9]{1}(.?|.[0-2]{0,1}[0-9]{0,1}.[0-5]{0,1}[0-9]{0,1}.[0-5]{0,1}[0-9]{0,1})$/",$cellval)){
					$e["typ"][$i][] = 3;
				# Text
				}else{
					$e["typ"][$i][] = 4;
				}
			}
			$bzm++;
		}

		# ---------------------- Grundtyp feststellen für Spalte ----------------------
		for($i = 0; $i < $rowcount; $i++){
			$e["field_type"][$i] = array_unique($e["typ"][$i]);
			if(lmb_count($e["field_type"][$i]) > 1){
				if(in_array("1",$e["field_type"][$i]) AND in_array("2",$e["field_type"][$i]) AND !in_array("3",$e["field_type"][$i]) AND !in_array("4",$e["field_type"][$i])){
					$e["field_type"][$i] = "FLOAT";
				}else{
					$e["field_type"][$i] = "VARCHAR";
				}
			}else{
				if($e["field_type"][$i][0] == 1){$e["field_type"][$i] = "INTEGER";}
				elseif($e["field_type"][$i][0] == 2){$e["field_type"][$i] = "FLOAT";}
				elseif($e["field_type"][$i][0] == 3){$e["field_type"][$i] = "TIMESTAMP";}
				else{$e["field_type"][$i] = "VARCHAR";}
			}
		}
	}
	
	$parsefile["header"] = $header;
	$parsefile["findtype"] = $e;
	$parsefile["tabname"] = $tabname;
	
	
	return $parsefile;

}

# Import aus Pool
function import_tab_pool($import_typ,$import_overwrite,$import_count,$partimport,$fileatm,$fileatm_name,$filexml,$tablegrouplist,$prefix=null,$txt_encode=null,$txt_terminate=null,$txt_enclosure=null){
	global $db;
	global $session;
	global $umgvar;
	global $DBA;
	
	/* ---------------------- Seperator ---------------------- */
	if(!$txt_terminate){$txt_terminate = ',';}
	if(!$txt_enclosure){$txt_enclosure = '"';}
	
	#xml test mutli table
	if($import_typ == "xml"){
		$import_count = "single";
	}elseif($fileatm_name != "export.tar.gz" AND !$import_count){
		$import_count = "single";
	}

	if($import_typ=="xml"){
		do_importXML($filexml);
	}elseif($import_typ == "atm"){

		/* --- Liste vorhandener Tabellen --------------------------------------------- */
		$odbc_table = dbf_20(array($DBA["DBSCHEMA"],null,"'TABLE','VIEW'"));
		foreach($odbc_table["table_name"] as $tkey => $tvalue) {
			$existingtabs[] = lmb_strtoupper($tvalue);
		}

		/* --- falls Tabellengruppe -------------------------------------- */
		if($import_count == "group"){
			$pfad = USERPATH.$session["user_id"]."/temp/";
			if($folderval = read_dir($pfad)){
				foreach($folderval["name"] as $key => $value){
					$value_ = explode(".",$value);
					if($folderval["typ"][$key] == "file"){
						$tabname = preg_replace("/^[^0-9a-zA-z_]$/","",$value_[0]);
						if($tablegrouplist[lmb_strtoupper($tabname)] OR $tablegrouplist[lmb_strtolower($tabname)]){
							$imptabgroup[] = $tabname;
						}
					}
				}
			}
			if($imptabgroup){sort($imptabgroup);}
			/* --- falls Einzeltabelle -------------------------------------- */
		}elseif($import_count == "single"){
			$tmp = explode(".",$fileatm_name);
			$imptabgroup[0] = lmb_strtoupper(preg_replace("/^[^0-9a-zA-z_]$/","",$tmp[0]));
			$pfad = USERPATH.$session['user_id']."/temp/";
			rmdirr(USERPATH.$session['user_id']."/temp");
			$copy = copy ($fileatm, $pfad.$imptabgroup[0].".tar.gz");
		}

		$bzm = 0;
		while($imptabgroup[$bzm]){

			unset($table);
			unset($typ);
			
			if(trim(lmb_strtoupper(lmb_substr($imptabgroup[$bzm],0,4))) == "LMB_"){
				$prefix_ = $prefix;
			}else{
				$prefix_ = "";
			}
			
			/* ----------- Extrahiere export.conf;export.dat ------------- */
			$sys = system("tar -x -z -C ".$pfad." -f \"".$pfad.$imptabgroup[$bzm].".tar.gz\"");
			
			/* ----------- prüfen ob Tabelle schon vorhanden ------------- */
			if(in_array(lmb_strtoupper($prefix_.$imptabgroup[$bzm]),$existingtabs)){
				/* ----------- Tabelle schon vorhanden ------------- */
				$table = dbf_4($imptabgroup[$bzm]);
			}else{
				/* ----------- Tabelle noch nicht vorhanden ------------- */
				$typ = "new";
				$table = dbf_4($prefix_.$imptabgroup[$bzm]);
			}
			
			/* ----------- neue Tabelle anlegen / anhängen / umbenennen ------------- */
			if($typ == "new" OR $import_overwrite == "rename" OR $import_overwrite == "add" OR $import_overwrite == "add_with_ID"){
				import($partimport,$import_overwrite,$prefix_,$txt_encode,$txt_terminate,$txt_enclosure);
			/* ----------- Tabelle überschreiben ------------- */
			}elseif($import_overwrite == "over"){
				if(deleteExistingTab($table)) {
                    import($partimport, $import_overwrite, $prefix_, $txt_encode, $txt_terminate, $txt_enclosure);
                }
			}
			$bzm++;
		}
	}

	return array($imptabgroup,$existingtabs);
}

# Komplett Import
function import_complete($del_all,$txt_encode=null, $txt_terminate=null,$txt_enclosure=null, bool $isInstaller = false){
	global $db;
	global $lang;
	global $setup_dbuser;
	global $DBA;
	
	/* ---------------------- Seperator ---------------------- */
	if(!$txt_terminate){$txt_terminate = ',';}
	if(!$txt_enclosure){$txt_enclosure = '"';}

	if($DBA["DBUSER"]){$setup_dbuser = $DBA["DBUSER"];}

	if($del_all){

		# delete all trigger
		if(LMB_DBFUNC_PROCEDUREHANDLE){
			if(lmb_dropAllDBTrigger()){
				echo 'drop existing trigges ... <span class="text-success">done</span><br>';
			}
		}
	
		# delete all constrains
		if(LMB_DBFUNC_FKEYHANDLE){
			if(lmb_dropAllForeignKeys()){
				echo 'drop existing constraints ... <span class="text-success">done</span><br>';
			}
		}
		
		# drop views
		$odbc_table = dbf_20(array($DBA["DBSCHEMA"],null,"'VIEW'"));
		if($odbc_table){
			foreach($odbc_table["table_name"] as $tkey => $tvalue) {
				$sqlquery1 = "DROP VIEW ".dbf_4($tvalue);
				$vrs1 = lmbdb_exec($db,$sqlquery1);
				if(!$vrs1) {$commit = 1;}
			}
			echo 'drop existing tables ... <span class="text-success">done</span><br>';
		}
		
		# drop tables
		$odbc_table = dbf_20(array($DBA["DBSCHEMA"],null,"'TABLE'"));
		if($odbc_table){
			foreach($odbc_table["table_name"] as $tkey => $tvalue) {
				$sqlquery1 = "DROP TABLE ".dbf_4($tvalue);
				$vrs1 = lmbdb_exec($db,$sqlquery1);
				if(!$vrs1) {$commit = 1;}
			}
			echo 'drop existing views ... <span class="text-success">done</span><br>';
		}
	}

	# procedures
	if(LMB_DBFUNC_PROCEDUREHANDLE){
		# drop functions
		dbq_21(array($DBA["DBSCHEMA"]));

		# add functions
		if(!dbq_16(array($DBA["DBSCHEMA"]))){
			echo '<span class="text-danger">error by adding stored procedures!</span><br>';
		}else{
			echo 'adding stored procedures ... <span class="text-success">done</span><br>';
		}
	}
	
	# fullimport
	import('','over',null,$txt_encode, $txt_terminate,$txt_enclosure,null,1,1);
	
	# create foreign keys and trigger
	if(lmb_rebuildForeignKey(1)){
		if($GLOBALS["action"]){
			echo 'rebuild foreign keys... <span class="text-success">done</span><br>';
		}
	}else{
		if($GLOBALS["action"]){
			echo 'rebuild foreign keys... <span class="text-danger">failed</span><br>';
		}
	}
	
	# Trigger
	if(lmb_rebuildTrigger(1)){
		if($GLOBALS["action"]){
			echo 'rebuild trigger... <span class="text-success">done</span><br>';
		}
	}else{
		if($GLOBALS["action"]){
			echo 'rebuild trigger... <span class="text-danger">failed</span><br>';
		}
	}
	
	# Sequences
	if(lmb_rebuildSequences()){
		if($GLOBALS["action"]){
			echo 'rebuild Sequences... <span class="text-success">done</span><br>';
		}
	}else{
		if($GLOBALS["action"]){
			echo 'rebuild Sequences... <span class="text-danger">failed</span><br>';
		}
	}
# 987 / 1014 <?=lang('Limbas is already installed.')
	if($GLOBALS["action"]){
		echo "<BR><BR><HR><H4>".lang('Limbas has been successfully installed').",</H4>";
        
        if($isInstaller) {
            echo '<a class="btn btn-primary pull-right" href="../">'.lang('start Limbas now!')."</a><BR><BR><BR>";
        } else {
            echo "<a class=\"btn btn-primary pull-right\" onclick=\"top.window.location.reload();\">".lang('start Limbas now!')."</a></div><BR><BR><BR>";
        }
        
		
		echo "<script>//<!--\nscrolldown();\n//--></script>";
        unset($_SESSION);
        session_unset();
        session_destroy();
	}
}





function import_template(&$ifield,$attach_gtabid,$template,$template_val){
    global $db;
    global $lang;
    global $import_action;

    if($template == 'load'){
        $sqlquery = "SELECT SETTING FROM LMB_SYNC_TEMPLATE WHERE ID = ".parse_db_int($template_val);
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        $ifield = unserialize(base64_decode(lmbdb_result($rs, "SETTING")));
        return;
    }
    
    if($template == 'add' AND $template_val AND $ifield AND $attach_gtabid){
        $setting = base64_encode(serialize($ifield));
        $NEXTID = next_db_id("LMB_SYNC_TEMPLATE");
    	$prepare_string = "INSERT INTO LMB_SYNC_TEMPLATE (ID,NAME,TABID,SETTING) VALUES ($NEXTID,'".parse_db_string($template_val,50)."', ".parse_db_int($attach_gtabid).", ?)";
        if(!lmb_PrepareSQL($prepare_string,array($setting),__FILE__,__LINE__)){$commit = 1;}
    }
    
    if($template == 'drop'){
        $sqlquery = "DELETE FROM LMB_SYNC_TEMPLATE WHERE ID = ".parse_db_int($template_val);
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    }
    
    $sqlquery = "SELECT * FROM LMB_SYNC_TEMPLATE WHERE TABID = ".parse_db_int($attach_gtabid);
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

    
    echo "<HR>
        <TABLE>
        <TR><TD class=\"tabHeaderItem\"><b>Templates</b></TD></TR>
        <TR class=\"tabHeader\"><TD>&nbsp;</TD></TR>";
    while(lmbdb_fetch_row($rs)) {
        $template_id = lmbdb_result($rs, "ID");
        
        echo "<TR>
            <TD style=\"width:20px\"><i class=\"lmb-icon lmb-trash\" onclick=\"document.form1.template_val.value=$template_id;document.form1.template.value='drop';document.form1.import_action.value=".$import_action.";document.form1.submit();\" style=\"cursor:pointer\" border=\"0\"></i></TD>
            <TD>".lmbdb_result($rs, "NAME")."</TD>
            <TD><input type=\"button\" value=\"Einstellung laden\" onclick=\"document.form1.template_val.value=$template_id;document.form1.template.value='load';document.form1.import_action.value=".$import_action.";document.form1.submit();\"></TD>
            </TR>";
    }
        
    echo "
        <TR></TR><TD>&nbsp;</TD><TR>
        <TR><TD></TD><TD><input type=\"TEXT\" name=\"template_val\"></TD><TD><input type=\"button\" VALUE=\"".$lang[540]."\" class=\"btn btn-primary\" OnClick=\"document.form1.import_action.value=".$import_action.";document.form1.template.value='add';document.form1.submit();\"></TD></TR>
        </TABLE>         
        ";

}





/**
 * xml function
 *
 * @param unknown_type $parser
 * @param unknown_type $name
 * @param unknown_type $attrs
 */
function do_importXML($xmlFile){
		global $gfield;
		global $gtab;
		global $db;
			if(file_exists($xmlFile)){

			$xmlRoot = simplexml_load_file($xmlFile);

			$bzm = 0;

			$tables = $xmlRoot->DEFINITION->TABLE;

			$fieldStruct = Array();

			foreach ($tables as $keyTable => $tableElt) {

				$tableName = strval($tableElt["NAME"]);
				$tableStruct["NAME"][] = strval($tableElt["NAME"]);

				$result["countImport"][$tableName] = 0;

				foreach ($gtab["table"] as $keyTableId => $tableNameVal) {
					if($tableNameVal == $tableName){
						$tableStruct["ID"][strval($tableElt["NAME"])] = $keyTableId;
					}
				}

				$fields = $tableElt->FIELD;

				unset($fieldTable);
				unset($fieldType);
				unset($fieldId);

				foreach ($fields as $keyFields => $fieldElt) {
					if(strval($fieldElt["NAME"])!="ID"){
						$fieldTable[] = strval($fieldElt["NAME"]);
						$fieldType[ strval($fieldElt["NAME"])] = strval($fieldElt["TYPE"]);
						foreach ($gfield[$tableStruct["ID"][$tableName]]["field_name"] as $keyFieldId => $valueFieldName) {
							if($valueFieldName == strval($fieldElt["NAME"]) ){
								$fieldId[ strval($fieldElt["NAME"])] = $keyFieldId;
								break;
							}
						}

					}
				}



				$fieldStruct[strval($tableName)]["NAME"] = $fieldTable;
				$fieldStruct[strval($tableName)]["TYPE"] = $fieldType;
				$fieldStruct[strval($tableName)]["ID"] = $fieldId;

			}

			$relations = $xmlRoot->DEFINITION->RELATION;

			foreach ($relations as $relation) {
				$tableStruct[strval($relation["PARENT"])]["RELATION"][] = strval($relation["CHILD"]);
				$relationStruct[strval($relation["PARENT"])][strval($relation["CHILD"])] = "VERK_e33c64522e514";


			}


			foreach ($tableStruct["NAME"] as  $tableKey => $tableName) {

				$lines = $xmlRoot->DATA->$tableName;
				$result = proceedXmlImportLines($lines,$tableName,$tableStruct,$fieldStruct,$relationStruct,$result);
			}

			foreach ($tableStruct["NAME"] as $tableNameKey => $tableName) {
				if($GLOBALS["action"]){echo '<br>' . $result["countImport"][$tableName] . " records imported successfully in table $tableName ";}

				if($warningImport)
					if($GLOBALS["action"]){echo '<span class="text-warning">Warning: '. implode("<br>", $result["warningImport"][$tableName]) . '</span>';
					echo '<hr>';}

			}

			$sqlquery = "INSERT INTO XMLIMPORTLOG(ID,WARNING,TABLES,RESULT) values(" . next_db_id('XMLIMPORTLOG','ID') . "," . ($result["warningImport"] ? "'" . parse_db_string(serialize($result["warningImport"]),1000) . "'" : "null" ) . ",'" . parse_db_string(serialize($tableStruct["NAME"]),1000) . "','" . parse_db_string(serialize($result["countImport"]),1000) . "')";
			lmbdb_exec($db,$sqlquery);
		}

}

function proceedXmlImportLines($lines,$tableName,$tableStruct,$fieldStruct,$relationStruct,$result,$relationParam = null){
	global $gfield;
	global $db;
	global $session;

		foreach ($lines as $keyLine => $line){
			unset($fieldValue);

			# define the ID
			# use ID from import
			#if($hold_id == 1){
				if(! $line->ID == ""){
					$NEXTID = strval($line->ID);
				}elseif ($field = $line["ID"]){
					$NEXTID = $line["ID"];
				}else{
					$NEXTID = next_db_id(strval($tableName),"ID");
				}
			#}else{
			# new ID
			#		$NEXTID = next_db_id(strval($tableName),"ID");
			#}

			# update

			foreach ($fieldStruct[strval($tableName)]["NAME"] as $keyField => $fieldName){

				if($fieldStruct[strval($tableName)]["TYPE"][$fieldName]=="FILE"){
					if(strval($line->$fieldName)!=""){
						if(strval($line->{$fieldName}["NAME"])!=""){
							$filename[] = $line->{$fieldName}["NAME"];
						}else{
							$filename[] = "importFile_" . time() . ".msg";
						}

						$secname[] = "/tmp/" . md5(time() . $filename[lmb_count($filename) - 1]);

						file_put_contents($secname[lmb_count($secname) - 1],base64_decode(strval($line->$fieldName)));

						$fieldValue[] = "1";
					}else{ $fieldValue[] = "0";}
				}else{

					if($fieldStruct[strval($tableName)]["TYPE"][$fieldName]!="NUMBER"){
						$quote = "'";
					}else{
						$quote = "";
					}


					if(! $line->$fieldName == ""){
						if(preg_match("/".$gfield[$tableStruct["ID"][$tableName]]["regel"][$fieldStruct[strval($tableName)]["ID"][$fieldName]]."/",$line->$fieldName) !=1){
							$fieldValue = "null";
							$result["warningImport"][$tableName][] = "Tablename: $tableName ; ID: " . $NEXTID . "; Fieldname: $fieldName, Value: " . $line->$fieldName . "<BR>";
						}else
							$fieldValue[] = $quote . $line->$fieldName . $quote;
					}elseif ($field = $line[$fieldName]){
						if(preg_match("/".$gfield[$tableStruct["ID"][$tableName]]["regel"][$fieldStruct[strval($tableName)]["ID"][$fieldName]]."/",$line[$fieldName]) !=1 ){
							$fieldValue[] = "null";
							$result["warningImport"][$tableName][] = "Tablename: $tableName ; ID: " . $NEXTID . "; Fieldname: $fieldName, Value: " . $line[$fieldName] . "<BR>";
						}else
							$fieldValue[] =  $quote . strval($field) . $quote;
					}else{
						$fieldValue[] = "null";
					}
				}

			}

			$fieldList = implode(",",$fieldStruct[strval($tableName)]["NAME"]);
			$valueList = implode(",",$fieldValue);

			$sqlquery = "INSERT INTO $tableName (ID,ERSTUSER,$fieldList) VALUES ($NEXTID,{$session['user_id']},$valueList)";
			lmbdb_exec($db,$sqlquery) or print_r($sqlquery);#$errorImport .=  lmbdb_error($db);
			$result["countImport"][$tableName]++;

			// relation
			if($relationParam){
				$sqlquery = "INSERT INTO " . $relationStruct[$relationParam["PARENT"]][$tableName] . "(KEYID,ID,VERKN_ID) values(" . next_db_id($relationStruct[$relationParam["PARENT"]][$tableName],"KEYID",1) . "," . $relationParam["ID"] . ",$NEXTID)";
				lmbdb_exec($db,$sqlquery) or$result["warningImport"][$tableName][] = "Error relation between to tables: $sqlquery";
			}

			if($tableStruct[$tableName]["RELATION"]){
				foreach ($tableStruct[$tableName]["RELATION"] as $keyRelation => $childTable) {

					$childs = $line->$childTable;

					$relationParamTogive["PARENT"] = $tableName;
					$relationParamTogive["ID"] = $NEXTID;
					$result = proceedXmlImportLines($childs,$childTable,$tableStruct,$fieldStruct,$relationStruct,$result,$relationParamTogive);

				}
			}
		}
		return $result;
}
 
?>
